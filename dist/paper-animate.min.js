!function t(e,n,i){function r(a,o){if(!n[a]){if(!e[a]){var h="function"==typeof require&&require;if(!o&&h)return h(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[a]={exports:{}};e[a][0].call(l.exports,function(t){var n=e[a][1][t];return r(n?n:t)},l,l.exports,t,e,n,i)}return n[a].exports}for(var s="function"==typeof require&&require,a=0;a<i.length;a++)r(i[a]);return r}({1:[function(t,e,n){var i=new function(t){var n=new function(){function e(t,e,i,r,a){function o(s,o){o=o||(o=u(e,s))&&(o.get?o:o.value),"string"==typeof o&&"#"===o[0]&&(o=t[o.substring(1)]||o);var l,d="function"==typeof o,f=o,g=a||d&&!o.base?o&&o.get?s in t:t[s]:null;a&&g||(d&&g&&(o.base=g),d&&r!==!1&&(l=s.match(/^([gs]et|is)(([A-Z])(.*))$/))&&(h[l[3].toLowerCase()+l[4]]=l[2]),f&&!d&&f.get&&"function"==typeof f.get&&n.isPlainObject(f)||(f={value:f,writable:!0}),(u(t,s)||{configurable:!0}).configurable&&(f.configurable=!0,f.enumerable=i),c(t,s,f))}var h={};if(e){for(var l in e)e.hasOwnProperty(l)&&!s.test(l)&&o(l);for(var l in h){var d=h[l],f=t["set"+d],g=t["get"+d]||f&&t["is"+d];!g||r!==!0&&0!==g.length||o(l,{get:g,set:f})}}return t}function i(t,e,n){return t&&("length"in t&&!t.getLength&&"number"==typeof t.length?a:o).call(t,e,n=n||t),n}function r(t,e,n){for(var i in e)!e.hasOwnProperty(i)||n&&n[i]||(t[i]=e[i]);return t}var s=/^(statics|enumerable|beans|preserve)$/,a=[].forEach||function(t,e){for(var n=0,i=this.length;i>n;n++)t.call(e,this[n],n,this)},o=function(t,e){for(var n in this)this.hasOwnProperty(n)&&t.call(e,this[n],n,this)},h=Object.create||function(t){return{__proto__:t}},u=Object.getOwnPropertyDescriptor||function(t,e){var n=t.__lookupGetter__&&t.__lookupGetter__(e);return n?{get:n,set:t.__lookupSetter__(e),enumerable:!0,configurable:!0}:t.hasOwnProperty(e)?{value:t[e],enumerable:!0,configurable:!0,writable:!0}:null},l=Object.defineProperty||function(t,e,n){return(n.get||n.set)&&t.__defineGetter__?(n.get&&t.__defineGetter__(e,n.get),n.set&&t.__defineSetter__(e,n.set)):t[e]=n.value,t},c=function(t,e,n){return delete t[e],l(t,e,n)};return e(function(){for(var t=0,e=arguments.length;e>t;t++)r(this,arguments[t])},{inject:function(t){if(t){var n=t.statics===!0?t:t.statics,i=t.beans,r=t.preserve;n!==t&&e(this.prototype,t,t.enumerable,i,r),e(this,n,!0,i,r)}for(var s=1,a=arguments.length;a>s;s++)this.inject(arguments[s]);return this},extend:function(){for(var t,n,i=this,r=0,s=arguments.length;s>r&&!(t=arguments[r].initialize);r++);return t=t||function(){i.apply(this,arguments)},n=t.prototype=h(this.prototype),c(n,"constructor",{value:t,writable:!0,configurable:!0}),e(t,this,!0),arguments.length&&this.inject.apply(t,arguments),t.base=i,t}},!0).inject({inject:function(){for(var t=0,n=arguments.length;n>t;t++){var i=arguments[t];i&&e(this,i,i.enumerable,i.beans,i.preserve)}return this},extend:function(){var t=h(this);return t.inject.apply(t,arguments)},each:function(t,e){return i(this,t,e)},set:function(t){return r(this,t)},clone:function(){return new this.constructor(this)},statics:{each:i,create:h,define:c,describe:u,set:r,clone:function(t){return r(new t.constructor,t)},isPlainObject:function(t){var e=null!=t&&t.constructor;return e&&(e===Object||e===n||"Object"===e.name)},pick:function(e,n){return e!==t?e:n}}})};"undefined"!=typeof e&&(e.exports=n),n.inject({toString:function(){return null!=this._id?(this._class||"Object")+(this._name?" '"+this._name+"'":" @"+this._id):"{ "+n.each(this,function(t,e){if(!/^_/.test(e)){var n=typeof t;this.push(e+": "+("number"===n?o.instance.number(t):"string"===n?"'"+t+"'":t))}},[]).join(", ")+" }"},getClassName:function(){return this._class||""},exportJSON:function(t){return n.exportJSON(this,t)},toJSON:function(){return n.serialize(this)},_set:function(e,i,r){if(e&&(r||n.isPlainObject(e))){for(var s=Object.keys(e._filtering||e),a=0,o=s.length;o>a;a++){var h=s[a];if(!i||!i[h]){var u=e[h];u!==t&&(this[h]=u)}}return!0}},statics:{exports:{enumerable:!0},extend:function it(){var t=it.base.apply(this,arguments),e=t.prototype._class;return e&&!n.exports[e]&&(n.exports[e]=t),t},equals:function(t,e){if(t===e)return!0;if(t&&t.equals)return t.equals(e);if(e&&e.equals)return e.equals(t);if(t&&e&&"object"==typeof t&&"object"==typeof e){if(Array.isArray(t)&&Array.isArray(e)){var i=t.length;if(i!==e.length)return!1;for(;i--;)if(!n.equals(t[i],e[i]))return!1}else{var r=Object.keys(t),i=r.length;if(i!==Object.keys(e).length)return!1;for(;i--;){var s=r[i];if(!e.hasOwnProperty(s)||!n.equals(t[s],e[s]))return!1}}return!0}return!1},read:function(e,i,r,s){if(this===n){var a=this.peek(e,i);return e.__index++,a}var o=this.prototype,h=o._readIndex,u=i||h&&e.__index||0;s||(s=e.length-u);var l=e[u];return l instanceof this||r&&r.readNull&&null==l&&1>=s?(h&&(e.__index=u+1),l&&r&&r.clone?l.clone():l):(l=n.create(this.prototype),h&&(l.__read=!0),l=l.initialize.apply(l,u>0||s<e.length?Array.prototype.slice.call(e,u,u+s):e)||l,h&&(e.__index=u+l.__read,l.__read=t),l)},peek:function(t,e){return t[t.__index=e||t.__index||0]},remain:function(t){return t.length-(t.__index||0)},readAll:function(t,e,n){for(var i,r=[],s=e||0,a=t.length;a>s;s++)r.push(Array.isArray(i=t[s])?this.read(i,0,n):this.read(t,s,n,1));return r},readNamed:function(e,i,r,s,a){var o=this.getNamed(e,i),h=o!==t;if(h){var u=e._filtered;u||(u=e._filtered=n.create(e[0]),u._filtering=e[0]),u[i]=t}return this.read(h?[o]:e,r,s,a)},getNamed:function(e,i){var r=e[0];return e._hasObject===t&&(e._hasObject=1===e.length&&n.isPlainObject(r)),e._hasObject?i?r[i]:e._filtered||r:void 0},hasNamed:function(t,e){return!!this.getNamed(t,e)},isPlainValue:function(t,e){return this.isPlainObject(t)||Array.isArray(t)||e&&"string"==typeof t},serialize:function(t,e,i,r){e=e||{};var s,a=!r;if(a&&(e.formatter=new o(e.precision),r={length:0,definitions:{},references:{},add:function(t,e){var n="#"+t._id,i=this.references[n];if(!i){this.length++;var r=e.call(t),s=t._class;s&&r[0]!==s&&r.unshift(s),this.definitions[n]=r,i=this.references[n]=[n]}return i}}),t&&t._serialize){s=t._serialize(e,r);var h=t._class;!h||i||s._compact||s[0]===h||s.unshift(h)}else if(Array.isArray(t)){s=[];for(var u=0,l=t.length;l>u;u++)s[u]=n.serialize(t[u],e,i,r);i&&(s._compact=!0)}else if(n.isPlainObject(t)){s={};for(var c=Object.keys(t),u=0,l=c.length;l>u;u++){var d=c[u];s[d]=n.serialize(t[d],e,i,r)}}else s="number"==typeof t?e.formatter.number(t,e.precision):t;return a&&r.length>0?[["dictionary",r.definitions],s]:s},deserialize:function(t,e,i,r){var s=t,a=!i;if(i=i||{},Array.isArray(t)){var o=t[0],h="dictionary"===o;if(1==t.length&&/^#/.test(o))return i.dictionary[o];o=n.exports[o],s=[],r&&(i.dictionary=s);for(var u=o?1:0,l=t.length;l>u;u++)s.push(n.deserialize(t[u],e,i,h));if(o){var c=s;e?s=e(o,c):(s=n.create(o.prototype),o.apply(s,c))}}else if(n.isPlainObject(t)){s={},r&&(i.dictionary=s);for(var d in t)s[d]=n.deserialize(t[d],e,i)}return a&&t&&t.length&&"dictionary"===t[0][0]?s[1]:s},exportJSON:function(t,e){var i=n.serialize(t,e);return e&&e.asString===!1?i:JSON.stringify(i)},importJSON:function(t,e){return n.deserialize("string"==typeof t?JSON.parse(t):t,function(t,i){var r=e&&e.constructor===t?e:n.create(t.prototype),s=r===e;if(1===i.length&&r instanceof w&&(s||!(r instanceof b))){var a=i[0];n.isPlainObject(a)&&(a.insert=!1)}return t.apply(r,i),s&&(e=null),r})},splice:function(e,n,i,r){var s=n&&n.length,a=i===t;i=a?e.length:i,i>e.length&&(i=e.length);for(var o=0;s>o;o++)n[o]._index=i+o;if(a)return e.push.apply(e,n),[];var h=[i,r];n&&h.push.apply(h,n);for(var u=e.splice.apply(e,h),o=0,l=u.length;l>o;o++)u[o]._index=t;for(var o=i+s,l=e.length;l>o;o++)e[o]._index=o;return u},capitalize:function(t){return t.replace(/\b[a-z]/g,function(t){return t.toUpperCase()})},camelize:function(t){return t.replace(/-(.)/g,function(t,e){return e.toUpperCase()})},hyphenate:function(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}}});var r={on:function(t,e){if("string"!=typeof t)n.each(t,function(t,e){this.on(e,t)},this);else{var i=this._eventTypes,r=i&&i[t],s=this._callbacks=this._callbacks||{};s=s[t]=s[t]||[],-1===s.indexOf(e)&&(s.push(e),r&&r.install&&1===s.length&&r.install.call(this,t))}return this},off:function(t,e){if("string"!=typeof t)return void n.each(t,function(t,e){this.off(e,t)},this);var i,r=this._eventTypes,s=r&&r[t],a=this._callbacks&&this._callbacks[t];return a&&(!e||-1!==(i=a.indexOf(e))&&1===a.length?(s&&s.uninstall&&s.uninstall.call(this,t),delete this._callbacks[t]):-1!==i&&a.splice(i,1)),this},once:function(t,e){return this.on(t,function(){e.apply(this,arguments),this.off(t,e)})},emit:function(t,e){var n=this._callbacks&&this._callbacks[t];if(!n)return!1;var i=[].slice.call(arguments,1);n=n.slice();for(var r=0,s=n.length;s>r;r++)if(n[r].apply(this,i)===!1){e&&e.stop&&e.stop();break}return!0},responds:function(t){return!(!this._callbacks||!this._callbacks[t])},attach:"#on",detach:"#off",fire:"#emit",_installEvents:function(t){var e=this._callbacks,n=t?"install":"uninstall";for(var i in e)if(e[i].length>0){var r=this._eventTypes,s=r&&r[i],a=s&&s[n];a&&a.call(this,i)}},statics:{inject:function rt(t){var e=t._events;if(e){var i={};n.each(e,function(e,r){var s="string"==typeof e,a=s?e:r,o=n.capitalize(a),h=a.substring(2).toLowerCase();i[h]=s?{}:e,a="_"+a,t["get"+o]=function(){return this[a]},t["set"+o]=function(t){var e=this[a];e&&this.off(h,e),t&&this.on(h,t),this[a]=t}}),t._eventTypes=i}return rt.base.apply(this,arguments)}}},s=n.extend({_class:"PaperScope",initialize:function st(){i=this,this.settings=new n({applyMatrix:!0,handleSize:4,hitTolerance:0}),this.project=null,this.projects=[],this.tools=[],this.palettes=[],this._id=st._id++,st._scopes[this._id]=this;var t=st.prototype;if(!this.support){var e=K.getContext(1,1);t.support={nativeDash:"setLineDash"in e||"mozDash"in e,nativeBlendModes:tt.nativeModes},K.release(e)}if(!this.browser){var r=navigator.userAgent.toLowerCase(),s=(/(win)/.exec(r)||/(mac)/.exec(r)||/(linux)/.exec(r)||[])[0],a=t.browser={platform:s};s&&(a[s]=!0),r.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:([.\d]+))?/g,function(t,e,n,i,r){if(!a.chrome){var s="opera"===e?i:n;"trident"===e&&(s=r,e="msie"),a.version=s,a.versionNumber=parseFloat(s),a.name=e,a[e]=!0}}),a.chrome&&delete a.webkit,a.atom&&delete a.chrome}},version:"0.9.25",getView:function(){return this.project&&this.project.getView()},getPaper:function(){return this},execute:function(t,e,n){i.PaperScript.execute(t,this,e,n),Z.updateFocus()},install:function(t){var e=this;n.each(["project","view","tool"],function(i){n.define(t,i,{configurable:!0,get:function(){return e[i]}})});for(var i in this)!/^_/.test(i)&&this[i]&&(t[i]=this[i])},setup:function(t){return i=this,this.project=new m(t),this},activate:function(){i=this},clear:function(){for(var t=this.projects.length-1;t>=0;t--)this.projects[t].remove();for(var t=this.tools.length-1;t>=0;t--)this.tools[t].remove();for(var t=this.palettes.length-1;t>=0;t--)this.palettes[t].remove()},remove:function(){this.clear(),delete s._scopes[this._id]},statics:new function(){function t(t){return t+="Attribute",function(e,n){return e[t](n)||e[t]("data-paper-"+n)}}return{_scopes:{},_id:0,get:function(t){return this._scopes[t]||null},getAttribute:t("get"),hasAttribute:t("has")}}}),a=n.extend(r,{initialize:function(t){this._scope=i,this._index=this._scope[this._list].push(this)-1,(t||!this._scope[this._reference])&&this.activate()},activate:function(){if(!this._scope)return!1;var t=this._scope[this._reference];return t&&t!==this&&t.emit("deactivate"),this._scope[this._reference]=this,this.emit("activate",t),!0},isActive:function(){return this._scope[this._reference]===this},remove:function(){return null==this._index?!1:(n.splice(this._scope[this._list],null,this._index,1),this._scope[this._reference]==this&&(this._scope[this._reference]=null),this._scope=null,!0)}}),o=n.extend({initialize:function(t){this.precision=t||5,this.multiplier=Math.pow(10,this.precision)},number:function(t){return Math.round(t*this.multiplier)/this.multiplier},pair:function(t,e,n){return this.number(t)+(n||",")+this.number(e)},point:function(t,e){return this.number(t.x)+(e||",")+this.number(t.y)},size:function(t,e){return this.number(t.width)+(e||",")+this.number(t.height)},rectangle:function(t,e){return this.point(t,e)+(e||",")+this.size(t,e)}});o.instance=new o;var h=new function(){function t(t,e,n){return e>t?e:t>n?n:t}var e=[[.5773502691896257],[0,.7745966692414834],[.33998104358485626,.8611363115940526],[0,.5384693101056831,.906179845938664],[.2386191860831969,.6612093864662645,.932469514203152],[0,.4058451513773972,.7415311855993945,.9491079123427585],[.1834346424956498,.525532409916329,.7966664774136267,.9602898564975363],[0,.3242534234038089,.6133714327005904,.8360311073266358,.9681602395076261],[.14887433898163122,.4333953941292472,.6794095682990244,.8650633666889845,.9739065285171717],[0,.26954315595234496,.5190961292068118,.7301520055740494,.8870625997680953,.978228658146057],[.1252334085114689,.3678314989981802,.5873179542866175,.7699026741943047,.9041172563704749,.9815606342467192],[0,.2304583159551348,.44849275103644687,.6423493394403402,.8015780907333099,.9175983992229779,.9841830547185881],[.10805494870734367,.31911236892788974,.5152486363581541,.6872929048116855,.827201315069765,.9284348836635735,.9862838086968123],[0,.20119409399743451,.3941513470775634,.5709721726085388,.7244177313601701,.8482065834104272,.937273392400706,.9879925180204854],[.09501250983763744,.2816035507792589,.45801677765722737,.6178762444026438,.755404408355003,.8656312023878318,.9445750230732326,.9894009349916499]],n=[[1],[.8888888888888888,.5555555555555556],[.6521451548625461,.34785484513745385],[.5688888888888889,.47862867049936647,.23692688505618908],[.46791393457269104,.3607615730481386,.17132449237917036],[.4179591836734694,.3818300505051189,.27970539148927664,.1294849661688697],[.362683783378362,.31370664587788727,.22238103445337448,.10122853629037626],[.3302393550012598,.31234707704000286,.26061069640293544,.1806481606948574,.08127438836157441],[.29552422471475287,.26926671930999635,.21908636251598204,.1494513491505806,.06667134430868814],[.2729250867779006,.26280454451024665,.23319376459199048,.18629021092773426,.1255803694649046,.05566856711617366],[.24914704581340277,.2334925365383548,.20316742672306592,.16007832854334622,.10693932599531843,.04717533638651183],[.2325515532308739,.22628318026289723,.2078160475368885,.17814598076194574,.13887351021978725,.09212149983772845,.04048400476531588],[.2152638534631578,.2051984637212956,.18553839747793782,.15720316715819355,.12151857068790319,.08015808715976021,.03511946033175186],[.2025782419255613,.19843148532711158,.1861610000155622,.16626920581699392,.13957067792615432,.10715922046717194,.07036604748810812,.03075324199611727],[.1894506104550685,.18260341504492358,.16915651939500254,.14959598881657674,.12462897125553388,.09515851168249279,.062253523938647894,.027152459411754096]],i=Math.abs,r=Math.sqrt,s=Math.pow,a=1e-12,o=1.12e-16;return{TOLERANCE:1e-6,EPSILON:a,MACHINE_EPSILON:o,CURVETIME_EPSILON:4e-7,GEOMETRIC_EPSILON:2e-7,WINDING_EPSILON:2e-7,TRIGONOMETRIC_EPSILON:1e-7,CLIPPING_EPSILON:1e-7,KAPPA:4*(r(2)-1)/3,isZero:function(t){return t>=-a&&a>=t},integrate:function(t,i,r,s){for(var a=e[s-2],o=n[s-2],h=.5*(r-i),u=h+i,l=0,c=s+1>>1,d=1&s?o[l++]*t(u):0;c>l;){var f=h*a[l];d+=o[l++]*(t(u+f)+t(u-f))}return h*d},findRoot:function(t,e,n,r,s,a,o){for(var h=0;a>h;h++){var u=t(n),l=u/e(n),c=n-l;if(i(l)<o)return c;u>0?(s=n,n=r>=c?.5*(r+s):c):(r=n,n=c>=s?.5*(r+s):c)}return n},solveQuadratic:function(e,n,h,u,l,c){var d,f,g=0,_=l-a,p=c+a,v=1/0,m=n;if(n/=-2,f=n*n-e*h,0!==f&&i(f)<o){var y=s(i(e*n*h),1/3);if(1e-8>y){var w=s(10,i(Math.floor(Math.log(y)*Math.LOG10E)));isFinite(w)||(w=0),e*=w,n*=w,h*=w,f=n*n-e*h}}if(i(e)<a){if(i(m)<a)return i(h)<a?-1:0;d=-h/m}else if(f>=-o){var x=0>f?0:r(f),b=n+(0>n?-x:x);0===b?(d=h/e,v=-d):(d=b/e,v=h/b)}return isFinite(d)&&(null==l||d>_&&p>d)&&(u[g++]=null==l?d:t(d,l,c)),v!==d&&isFinite(v)&&(null==l||v>_&&p>v)&&(u[g++]=null==l?v:t(v,l,c)),g},solveCubic:function(e,n,u,l,c,d,f){var g,_,p,v=0;if(i(e)<a)e=n,_=u,p=l,g=1/0;else if(i(l)<a)_=n,p=u,g=0;else{var m,y,w,x,b,C,S,P=1+o;if(g=-(n/e)/3,S=e*g,_=S+n,p=_*g+u,w=(S+_)*g+p,y=p*g+l,x=y/e,b=s(i(x),1/3),C=0>x?-1:1,x=-w/e,b=x>0?1.3247179572*Math.max(b,r(x)):b,m=g-C*b,m!==g){do if(g=m,S=e*g,_=S+n,p=_*g+u,w=(S+_)*g+p,y=p*g+l,m=0===w?g:g-y/w/P,m===g){g=m;break}while(C*m>C*g);i(e)*g*g>i(l/g)&&(p=-l/g,_=(p-u)/g)}}var v=h.solveQuadratic(e,_,p,c,d,f);return isFinite(g)&&(0===v||g!==c[v-1])&&(null==d||g>d-a&&f+a>g)&&(c[v++]=null==d?g:t(g,d,f)),v}}},u={_id:1,_pools:{},get:function(t){if(t){var e=t._class,n=this._pools[e];return n||(n=this._pools[e]={_id:1}),n._id++}return this._id++}},l=n.extend({_class:"Point",_readIndex:!0,initialize:function(t,e){var n=typeof t;if("number"===n){var i="number"==typeof e;this.x=t,this.y=i?e:t,this.__read&&(this.__read=i?2:1)}else"undefined"===n||null===t?(this.x=this.y=0,this.__read&&(this.__read=null===t?1:0)):(Array.isArray(t)?(this.x=t[0],this.y=t.length>1?t[1]:t[0]):null!=t.x?(this.x=t.x,this.y=t.y):null!=t.width?(this.x=t.width,this.y=t.height):null!=t.angle?(this.x=t.length,this.y=0,this.setAngle(t.angle)):(this.x=this.y=0,this.__read&&(this.__read=0)),this.__read&&(this.__read=1))},set:function(t,e){return this.x=t,this.y=e,this},equals:function(t){return this===t||t&&(this.x===t.x&&this.y===t.y||Array.isArray(t)&&this.x===t[0]&&this.y===t[1])||!1},clone:function(){return new l(this.x,this.y)},toString:function(){var t=o.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y)]},getLength:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},setLength:function(t){if(this.isZero()){var e=this._angle||0;this.set(Math.cos(e)*t,Math.sin(e)*t)}else{var n=t/this.getLength();h.isZero(n)&&this.getAngle(),this.set(this.x*n,this.y*n)}},getAngle:function(){return 180*this.getAngleInRadians.apply(this,arguments)/Math.PI},setAngle:function(t){this.setAngleInRadians.call(this,t*Math.PI/180)},getAngleInDegrees:"#getAngle",setAngleInDegrees:"#setAngle",getAngleInRadians:function(){if(arguments.length){var t=l.read(arguments),e=this.getLength()*t.getLength();if(h.isZero(e))return NaN;var n=this.dot(t)/e;return Math.acos(-1>n?-1:n>1?1:n)}return this.isZero()?this._angle||0:this._angle=Math.atan2(this.y,this.x)},setAngleInRadians:function(t){if(this._angle=t,!this.isZero()){var e=this.getLength();this.set(Math.cos(t)*e,Math.sin(t)*e)}},getQuadrant:function(){return this.x>=0?this.y>=0?1:4:this.y>=0?2:3}},{beans:!1,getDirectedAngle:function(){var t=l.read(arguments);return 180*Math.atan2(this.cross(t),this.dot(t))/Math.PI},getDistance:function(){var t=l.read(arguments),e=t.x-this.x,i=t.y-this.y,r=e*e+i*i,s=n.read(arguments);return s?r:Math.sqrt(r)},normalize:function(e){e===t&&(e=1);var n=this.getLength(),i=0!==n?e/n:0,r=new l(this.x*i,this.y*i);return i>=0&&(r._angle=this._angle),r},rotate:function(t,e){if(0===t)return this.clone();t=t*Math.PI/180;var n=e?this.subtract(e):this,i=Math.sin(t),r=Math.cos(t);return n=new l(n.x*r-n.y*i,n.x*i+n.y*r),e?n.add(e):n},transform:function(t){return t?t._transformPoint(this):this},add:function(){var t=l.read(arguments);return new l(this.x+t.x,this.y+t.y)},subtract:function(){var t=l.read(arguments);return new l(this.x-t.x,this.y-t.y)},multiply:function(){var t=l.read(arguments);return new l(this.x*t.x,this.y*t.y)},divide:function(){var t=l.read(arguments);return new l(this.x/t.x,this.y/t.y)},modulo:function(){var t=l.read(arguments);return new l(this.x%t.x,this.y%t.y)},negate:function(){return new l(-this.x,-this.y)},isInside:function(){return g.read(arguments).contains(this)},isClose:function(){var t=l.read(arguments),e=n.read(arguments);return this.getDistance(t)<e},isCollinear:function(){var t=l.read(arguments);return l.isCollinear(this.x,this.y,t.x,t.y)},isColinear:"#isCollinear",isOrthogonal:function(){var t=l.read(arguments);return l.isOrthogonal(this.x,this.y,t.x,t.y)},isZero:function(){return h.isZero(this.x)&&h.isZero(this.y)},isNaN:function(){return isNaN(this.x)||isNaN(this.y)},dot:function(){var t=l.read(arguments);return this.x*t.x+this.y*t.y},cross:function(){var t=l.read(arguments);return this.x*t.y-this.y*t.x},project:function(){var t=l.read(arguments),e=t.isZero()?0:this.dot(t)/t.dot(t);return new l(t.x*e,t.y*e)},statics:{min:function(){var t=l.read(arguments),e=l.read(arguments);return new l(Math.min(t.x,e.x),Math.min(t.y,e.y))},max:function(){var t=l.read(arguments),e=l.read(arguments);return new l(Math.max(t.x,e.x),Math.max(t.y,e.y))},random:function(){return new l(Math.random(),Math.random())},isCollinear:function(t,e,n,i){return Math.abs(t*i-e*n)<=1e-7*Math.sqrt((t*t+e*e)*(n*n+i*i))},isOrthogonal:function(t,e,n,i){return Math.abs(t*n+e*i)<=1e-7*Math.sqrt((t*t+e*e)*(n*n+i*i))}}},n.each(["round","ceil","floor","abs"],function(t){var e=Math[t];this[t]=function(){return new l(e(this.x),e(this.y))}},{})),c=l.extend({initialize:function(t,e,n,i){this._x=t,this._y=e,this._owner=n,this._setter=i},set:function(t,e,n){return this._x=t,this._y=e,n||this._owner[this._setter](this),this},getX:function(){return this._x},setX:function(t){this._x=t,this._owner[this._setter](this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner[this._setter](this)}}),d=n.extend({_class:"Size",_readIndex:!0,initialize:function(t,e){var n=typeof t;if("number"===n){var i="number"==typeof e;this.width=t,this.height=i?e:t,this.__read&&(this.__read=i?2:1)}else"undefined"===n||null===t?(this.width=this.height=0,this.__read&&(this.__read=null===t?1:0)):(Array.isArray(t)?(this.width=t[0],this.height=t.length>1?t[1]:t[0]):null!=t.width?(this.width=t.width,this.height=t.height):null!=t.x?(this.width=t.x,this.height=t.y):(this.width=this.height=0,this.__read&&(this.__read=0)),this.__read&&(this.__read=1))},set:function(t,e){return this.width=t,this.height=e,this},equals:function(t){return t===this||t&&(this.width===t.width&&this.height===t.height||Array.isArray(t)&&this.width===t[0]&&this.height===t[1])||!1},clone:function(){return new d(this.width,this.height)},toString:function(){var t=o.instance;return"{ width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.width),e.number(this.height)]},add:function(){var t=d.read(arguments);return new d(this.width+t.width,this.height+t.height)},subtract:function(){var t=d.read(arguments);return new d(this.width-t.width,this.height-t.height)},multiply:function(){var t=d.read(arguments);return new d(this.width*t.width,this.height*t.height)},divide:function(){var t=d.read(arguments);return new d(this.width/t.width,this.height/t.height)},modulo:function(){var t=d.read(arguments);return new d(this.width%t.width,this.height%t.height)},negate:function(){return new d(-this.width,-this.height)},isZero:function(){return h.isZero(this.width)&&h.isZero(this.height)},isNaN:function(){return isNaN(this.width)||isNaN(this.height)},statics:{min:function(t,e){return new d(Math.min(t.width,e.width),Math.min(t.height,e.height))},max:function(t,e){return new d(Math.max(t.width,e.width),Math.max(t.height,e.height))},random:function(){return new d(Math.random(),Math.random())}}},n.each(["round","ceil","floor","abs"],function(t){var e=Math[t];this[t]=function(){return new d(e(this.width),e(this.height))}},{})),f=d.extend({initialize:function(t,e,n,i){this._width=t,this._height=e,this._owner=n,this._setter=i},set:function(t,e,n){return this._width=t,this._height=e,n||this._owner[this._setter](this),this},getWidth:function(){return this._width},setWidth:function(t){this._width=t,this._owner[this._setter](this)},getHeight:function(){return this._height},setHeight:function(t){this._height=t,this._owner[this._setter](this)}}),g=n.extend({_class:"Rectangle",_readIndex:!0,beans:!0,initialize:function(e,i,r,s){var a=typeof e,o=0;if("number"===a?(this.x=e,this.y=i,this.width=r,this.height=s,o=4):"undefined"===a||null===e?(this.x=this.y=this.width=this.height=0,o=null===e?1:0):1===arguments.length&&(Array.isArray(e)?(this.x=e[0],this.y=e[1],this.width=e[2],this.height=e[3],o=1):e.x!==t||e.width!==t?(this.x=e.x||0,this.y=e.y||0,this.width=e.width||0,this.height=e.height||0,o=1):e.from===t&&e.to===t&&(this.x=this.y=this.width=this.height=0,this._set(e),o=1)),!o){var h=l.readNamed(arguments,"from"),u=n.peek(arguments);if(this.x=h.x,this.y=h.y,u&&u.x!==t||n.hasNamed(arguments,"to")){var c=l.readNamed(arguments,"to");this.width=c.x-h.x,this.height=c.y-h.y,this.width<0&&(this.x=c.x,this.width=-this.width),this.height<0&&(this.y=c.y,this.height=-this.height)}else{var f=d.read(arguments);this.width=f.width,this.height=f.height}o=arguments.__index}this.__read&&(this.__read=o)},set:function(t,e,n,i){return this.x=t,this.y=e,this.width=n,this.height=i,this},clone:function(){return new g(this.x,this.y,this.width,this.height)},equals:function(t){var e=n.isPlainValue(t)?g.read(arguments):t;return e===this||e&&this.x===e.x&&this.y===e.y&&this.width===e.width&&this.height===e.height||!1},toString:function(){var t=o.instance;return"{ x: "+t.number(this.x)+", y: "+t.number(this.y)+", width: "+t.number(this.width)+", height: "+t.number(this.height)+" }"},_serialize:function(t){var e=t.formatter;return[e.number(this.x),e.number(this.y),e.number(this.width),e.number(this.height)]},getPoint:function(t){var e=t?l:c;return new e(this.x,this.y,this,"setPoint")},setPoint:function(){var t=l.read(arguments);this.x=t.x,this.y=t.y},getSize:function(t){var e=t?d:f;return new e(this.width,this.height,this,"setSize")},setSize:function(){var t=d.read(arguments);this._fixX&&(this.x+=(this.width-t.width)*this._fixX),this._fixY&&(this.y+=(this.height-t.height)*this._fixY),this.width=t.width,this.height=t.height,this._fixW=1,this._fixH=1},getLeft:function(){return this.x},setLeft:function(t){this._fixW||(this.width-=t-this.x),this.x=t,this._fixX=0},getTop:function(){return this.y},setTop:function(t){this._fixH||(this.height-=t-this.y),this.y=t,this._fixY=0},getRight:function(){return this.x+this.width},setRight:function(e){this._fixX!==t&&1!==this._fixX&&(this._fixW=0),this._fixW?this.x=e-this.width:this.width=e-this.x,this._fixX=1},getBottom:function(){return this.y+this.height},setBottom:function(e){this._fixY!==t&&1!==this._fixY&&(this._fixH=0),this._fixH?this.y=e-this.height:this.height=e-this.y,this._fixY=1},getCenterX:function(){return this.x+.5*this.width},setCenterX:function(t){this.x=t-.5*this.width,this._fixX=.5},getCenterY:function(){return this.y+.5*this.height},setCenterY:function(t){this.y=t-.5*this.height,this._fixY=.5},getCenter:function(t){var e=t?l:c;return new e(this.getCenterX(),this.getCenterY(),this,"setCenter")},setCenter:function(){var t=l.read(arguments);return this.setCenterX(t.x),this.setCenterY(t.y),this},getArea:function(){return this.width*this.height},isEmpty:function(){return 0===this.width||0===this.height},contains:function(e){return e&&e.width!==t||4==(Array.isArray(e)?e:arguments).length?this._containsRectangle(g.read(arguments)):this._containsPoint(l.read(arguments))},_containsPoint:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e<=this.x+this.width&&n<=this.y+this.height},_containsRectangle:function(t){var e=t.x,n=t.y;return e>=this.x&&n>=this.y&&e+t.width<=this.x+this.width&&n+t.height<=this.y+this.height},intersects:function(){var t=g.read(arguments);return t.x+t.width>this.x&&t.y+t.height>this.y&&t.x<this.x+this.width&&t.y<this.y+this.height},touches:function(){var t=g.read(arguments);return t.x+t.width>=this.x&&t.y+t.height>=this.y&&t.x<=this.x+this.width&&t.y<=this.y+this.height},intersect:function(){var t=g.read(arguments),e=Math.max(this.x,t.x),n=Math.max(this.y,t.y),i=Math.min(this.x+this.width,t.x+t.width),r=Math.min(this.y+this.height,t.y+t.height);return new g(e,n,i-e,r-n)},unite:function(){var t=g.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x+t.width),r=Math.max(this.y+this.height,t.y+t.height);return new g(e,n,i-e,r-n)},include:function(){var t=l.read(arguments),e=Math.min(this.x,t.x),n=Math.min(this.y,t.y),i=Math.max(this.x+this.width,t.x),r=Math.max(this.y+this.height,t.y);return new g(e,n,i-e,r-n)},expand:function(){var t=d.read(arguments),e=t.width,n=t.height;return new g(this.x-e/2,this.y-n/2,this.width+e,this.height+n)},scale:function(e,n){return this.expand(this.width*e-this.width,this.height*(n===t?e:n)-this.height)}},n.each([["Top","Left"],["Top","Right"],["Bottom","Left"],["Bottom","Right"],["Left","Center"],["Top","Center"],["Right","Center"],["Bottom","Center"]],function(t,e){var n=t.join(""),i=/^[RL]/.test(n);e>=4&&(t[1]+=i?"Y":"X");var r=t[i?0:1],s=t[i?1:0],a="get"+r,o="get"+s,h="set"+r,u="set"+s,d="get"+n,f="set"+n;this[d]=function(t){var e=t?l:c;return new e(this[a](),this[o](),this,f)},this[f]=function(){var t=l.read(arguments);this[h](t.x),this[u](t.y)}},{beans:!0})),_=g.extend({initialize:function(t,e,n,i,r,s){this.set(t,e,n,i,!0),this._owner=r,this._setter=s},set:function(t,e,n,i,r){return this._x=t,this._y=e,this._width=n,this._height=i,r||this._owner[this._setter](this),this}},new function(){var t=g.prototype;return n.each(["x","y","width","height"],function(t){var e=n.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._dontNotify||this._owner[this._setter](this)}},n.each(["Point","Size","Center","Left","Top","Right","Bottom","CenterX","CenterY","TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],function(e){var n="set"+e;this[n]=function(){this._dontNotify=!0,t[n].apply(this,arguments),this._dontNotify=!1,this._owner[this._setter](this)}},{isSelected:function(){return this._owner._boundsSelected},setSelected:function(t){var e=this._owner;e.setSelected&&(e._boundsSelected=t,e.setSelected(t||e._selectedSegmentState>0))}}))}),p=n.extend({_class:"Matrix",initialize:function at(t){var e=arguments.length,n=!0;if(6===e?this.set.apply(this,arguments):1===e?t instanceof at?this.set(t._a,t._c,t._b,t._d,t._tx,t._ty):Array.isArray(t)?this.set.apply(this,t):n=!1:0===e?this.reset():n=!1,!n)throw new Error("Unsupported matrix parameters")},set:function(t,e,n,i,r,s,a){return this._a=t,this._c=e,this._b=n,this._d=i,this._tx=r,this._ty=s,a||this._changed(),this},_serialize:function(t){return n.serialize(this.getValues(),t)},_changed:function(){var t=this._owner;t&&(t._applyMatrix?t.transform(null,!0):t._changed(9))},clone:function(){return new p(this._a,this._c,this._b,this._d,this._tx,this._ty)},equals:function(t){return t===this||t&&this._a===t._a&&this._b===t._b&&this._c===t._c&&this._d===t._d&&this._tx===t._tx&&this._ty===t._ty||!1},toString:function(){var t=o.instance;return"[["+[t.number(this._a),t.number(this._b),t.number(this._tx)].join(", ")+"], ["+[t.number(this._c),t.number(this._d),t.number(this._ty)].join(", ")+"]]"},reset:function(t){return this._a=this._d=1,this._c=this._b=this._tx=this._ty=0,t||this._changed(),this},apply:function(t,e){var i=this._owner;return i?(i.transform(null,!0,n.pick(t,!0),e),this.isIdentity()):!1},translate:function(){var t=l.read(arguments),e=t.x,n=t.y;return this._tx+=e*this._a+n*this._b,this._ty+=e*this._c+n*this._d,this._changed(),this},scale:function(){var t=l.read(arguments),e=l.read(arguments,0,{readNull:!0});return e&&this.translate(e),this._a*=t.x,this._c*=t.x,this._b*=t.y,this._d*=t.y,e&&this.translate(e.negate()),this._changed(),this},rotate:function(t){t*=Math.PI/180;var e=l.read(arguments,1),n=e.x,i=e.y,r=Math.cos(t),s=Math.sin(t),a=n-n*r+i*s,o=i-n*s-i*r,h=this._a,u=this._b,c=this._c,d=this._d;return this._a=r*h+s*u,this._b=-s*h+r*u,this._c=r*c+s*d,this._d=-s*c+r*d,this._tx+=a*h+o*u,this._ty+=a*c+o*d,this._changed(),this},shear:function(){var t=l.read(arguments),e=l.read(arguments,0,{readNull:!0});e&&this.translate(e);
var n=this._a,i=this._c;return this._a+=t.y*this._b,this._c+=t.y*this._d,this._b+=t.x*n,this._d+=t.x*i,e&&this.translate(e.negate()),this._changed(),this},skew:function(){var t=l.read(arguments),e=l.read(arguments,0,{readNull:!0}),n=Math.PI/180,i=new l(Math.tan(t.x*n),Math.tan(t.y*n));return this.shear(i,e)},concatenate:function(t){var e=this._a,n=this._b,i=this._c,r=this._d,s=t._a,a=t._b,o=t._c,h=t._d,u=t._tx,l=t._ty;return this._a=s*e+o*n,this._b=a*e+h*n,this._c=s*i+o*r,this._d=a*i+h*r,this._tx+=u*e+l*n,this._ty+=u*i+l*r,this._changed(),this},preConcatenate:function(t){var e=this._a,n=this._b,i=this._c,r=this._d,s=this._tx,a=this._ty,o=t._a,h=t._b,u=t._c,l=t._d,c=t._tx,d=t._ty;return this._a=o*e+h*i,this._b=o*n+h*r,this._c=u*e+l*i,this._d=u*n+l*r,this._tx=o*s+h*a+c,this._ty=u*s+l*a+d,this._changed(),this},chain:function(t){var e=this._a,n=this._b,i=this._c,r=this._d,s=this._tx,a=this._ty,o=t._a,h=t._b,u=t._c,l=t._d,c=t._tx,d=t._ty;return new p(o*e+u*n,o*i+u*r,h*e+l*n,h*i+l*r,s+c*e+d*n,a+c*i+d*r)},isIdentity:function(){return 1===this._a&&0===this._c&&0===this._b&&1===this._d&&0===this._tx&&0===this._ty},orNullIfIdentity:function(){return this.isIdentity()?null:this},isInvertible:function(){return!!this._getDeterminant()},isSingular:function(){return!this._getDeterminant()},transform:function(t,e,n){return arguments.length<3?this._transformPoint(l.read(arguments)):this._transformCoordinates(t,e,n)},_transformPoint:function(t,e,n){var i=t.x,r=t.y;return e||(e=new l),e.set(i*this._a+r*this._b+this._tx,i*this._c+r*this._d+this._ty,n)},_transformCoordinates:function(t,e,n){for(var i=0,r=0,s=2*n;s>i;){var a=t[i++],o=t[i++];e[r++]=a*this._a+o*this._b+this._tx,e[r++]=a*this._c+o*this._d+this._ty}return e},_transformCorners:function(t){var e=t.x,n=t.y,i=e+t.width,r=n+t.height,s=[e,n,i,n,i,r,e,r];return this._transformCoordinates(s,s,4)},_transformBounds:function(t,e,n){for(var i=this._transformCorners(t),r=i.slice(0,2),s=r.slice(),a=2;8>a;a++){var o=i[a],h=1&a;o<r[h]?r[h]=o:o>s[h]&&(s[h]=o)}return e||(e=new g),e.set(r[0],r[1],s[0]-r[0],s[1]-r[1],n)},inverseTransform:function(){return this._inverseTransform(l.read(arguments))},_getDeterminant:function(){var t=this._a*this._d-this._b*this._c;return isFinite(t)&&!h.isZero(t)&&isFinite(this._tx)&&isFinite(this._ty)?t:null},_inverseTransform:function(t,e,n){var i=this._getDeterminant();if(!i)return null;var r=t.x-this._tx,s=t.y-this._ty;return e||(e=new l),e.set((r*this._d-s*this._b)/i,(s*this._a-r*this._c)/i,n)},decompose:function(){var t=this._a,e=this._b,n=this._c,i=this._d;if(h.isZero(t*i-e*n))return null;var r=Math.sqrt(t*t+e*e);t/=r,e/=r;var s=t*n+e*i;n-=t*s,i-=e*s;var a=Math.sqrt(n*n+i*i);return n/=a,i/=a,s/=a,e*n>t*i&&(t=-t,e=-e,s=-s,r=-r),{scaling:new l(r,a),rotation:180*-Math.atan2(e,t)/Math.PI,shearing:s}},getValues:function(){return[this._a,this._c,this._b,this._d,this._tx,this._ty]},getTranslation:function(){return new l(this._tx,this._ty)},getScaling:function(){return(this.decompose()||{}).scaling},getRotation:function(){return(this.decompose()||{}).rotation},inverted:function(){var t=this._getDeterminant();return t&&new p(this._d/t,-this._c/t,-this._b/t,this._a/t,(this._b*this._ty-this._d*this._tx)/t,(this._c*this._tx-this._a*this._ty)/t)},shiftless:function(){return new p(this._a,this._c,this._b,this._d,0,0)},applyToContext:function(t){t.transform(this._a,this._c,this._b,this._d,this._tx,this._ty)}},n.each(["a","c","b","d","tx","ty"],function(t){var e=n.capitalize(t),i="_"+t;this["get"+e]=function(){return this[i]},this["set"+e]=function(t){this[i]=t,this._changed()}},{})),v=n.extend({_class:"Line",initialize:function(t,e,n,i,r){var s=!1;arguments.length>=4?(this._px=t,this._py=e,this._vx=n,this._vy=i,s=r):(this._px=t.x,this._py=t.y,this._vx=e.x,this._vy=e.y,s=n),s||(this._vx-=this._px,this._vy-=this._py)},getPoint:function(){return new l(this._px,this._py)},getVector:function(){return new l(this._vx,this._vy)},getLength:function(){return this.getVector().getLength()},intersect:function(t,e){return v.intersect(this._px,this._py,this._vx,this._vy,t._px,t._py,t._vx,t._vy,!0,e)},getSide:function(t,e){return v.getSide(this._px,this._py,this._vx,this._vy,t.x,t.y,!0,e)},getDistance:function(t){return Math.abs(v.getSignedDistance(this._px,this._py,this._vx,this._vy,t.x,t.y,!0))},isCollinear:function(t){return l.isCollinear(this._vx,this._vy,t._vx,t._vy)},isOrthogonal:function(t){return l.isOrthogonal(this._vx,this._vy,t._vx,t._vy)},statics:{intersect:function(t,e,n,i,r,s,a,o,u,c){u||(n-=t,i-=e,a-=r,o-=s);var d=n*o-i*a;if(!h.isZero(d)){var f=t-r,g=e-s,_=(a*g-o*f)/d,p=(n*g-i*f)/d,v=1e-12,m=-v,y=1+v;if(c||_>m&&y>_&&p>m&&y>p)return c||(_=0>=_?0:_>=1?1:_),new l(t+_*n,e+_*i)}},getSide:function(t,e,n,i,r,s,a,o){a||(n-=t,i-=e);var h=r-t,u=s-e,l=h*i-u*n;return 0!==l||o||(l=(h*n+h*n)/(n*n+i*i),l>=0&&1>=l&&(l=0)),0>l?-1:l>0?1:0},getSignedDistance:function(t,e,n,i,r,s,a){return a||(n-=t,i-=e),0===n?i>0?r-t:t-r:0===i?0>n?s-e:e-s:((r-t)*i-(s-e)*n)/Math.sqrt(n*n+i*i)}}}),m=a.extend({_class:"Project",_list:"projects",_reference:"project",initialize:function(t){a.call(this,!0),this.layers=[],this._activeLayer=null,this.symbols=[],this._currentStyle=new V(null,null,this),this._view=Z.create(this,t||K.getCanvas(1,1)),this._selectedItems={},this._selectedItemCount=0,this._updateVersion=0},_serialize:function(t,e){return n.serialize(this.layers,t,!0,e)},clear:function(){for(var t=this.layers.length-1;t>=0;t--)this.layers[t].remove();this.symbols=[]},isEmpty:function(){return 0===this.layers.length},remove:function ot(){return ot.base.call(this)?(this._view&&this._view.remove(),!0):!1},getView:function(){return this._view},getCurrentStyle:function(){return this._currentStyle},setCurrentStyle:function(t){this._currentStyle.initialize(t)},getIndex:function(){return this._index},getOptions:function(){return this._scope.settings},getActiveLayer:function(){return this._activeLayer||new b({project:this})},getSelectedItems:function(){var t=[];for(var e in this._selectedItems){var n=this._selectedItems[e];n.isInserted()&&t.push(n)}return t},insertChild:function(t,e,i){return e instanceof b?(e._remove(!1,!0),n.splice(this.layers,[e],t,0),e._setProject(this,!0),this._changes&&e._changed(5),this._activeLayer||(this._activeLayer=e)):e instanceof w?(this._activeLayer||this.insertChild(t,new b(w.NO_INSERT))).insertChild(t,e,i):e=null,e},addChild:function(e,n){return this.insertChild(t,e,n)},_updateSelection:function(t){var e=t._id,n=this._selectedItems;t._selected?n[e]!==t&&(this._selectedItemCount++,n[e]=t):n[e]===t&&(this._selectedItemCount--,delete n[e])},selectAll:function(){for(var t=this.layers,e=0,n=t.length;n>e;e++)t[e].setFullySelected(!0)},deselectAll:function(){var t=this._selectedItems;for(var e in t)t[e].setFullySelected(!1)},hitTest:function(){for(var t=l.read(arguments),e=k.getOptions(n.read(arguments)),i=this.layers.length-1;i>=0;i--){var r=this.layers[i]._hitTest(t,e);if(r)return r}return null},getItems:function(t){return w._getItems(this.layers,t)},getItem:function(t){return w._getItems(this.layers,t,null,null,!0)[0]||null},importJSON:function(t){this.activate();var e=this._activeLayer;return n.importJSON(t,e&&e.isEmpty()&&e)},draw:function(t,e,i){this._updateVersion++,t.save(),e.applyToContext(t);for(var r=new n({offset:new l(0,0),pixelRatio:i,viewMatrix:e.isIdentity()?null:e,matrices:[new p],updateMatrix:!0}),s=0,a=this.layers,o=a.length;o>s;s++)a[s].draw(t,r);if(t.restore(),this._selectedItemCount>0){t.save(),t.strokeWidth=1;var h=this._selectedItems,u=this._scope.settings.handleSize,c=this._updateVersion;for(var d in h)h[d]._drawSelection(t,e,u,h,c);t.restore()}}}),y=n.extend({_class:"Symbol",initialize:function(t,e){this._id=u.get(),this.project=i.project,this.project.symbols.push(this),t&&this.setDefinition(t,e)},_serialize:function(t,e){return e.add(this,function(){return n.serialize([this._class,this._definition],t,!1,e)})},_changed:function(t){8&t&&w._clearBoundsCache(this),1&t&&(this.project._needsUpdate=!0)},getDefinition:function(){return this._definition},setDefinition:function(t,e){t._parentSymbol&&(t=t.clone()),this._definition&&(this._definition._parentSymbol=null),this._definition=t,t.remove(),t.setSelected(!1),e||t.setPosition(new l),t._parentSymbol=this,this._changed(9)},place:function(t){return new P(this,t)},clone:function(){return new y(this._definition.clone(!1))},equals:function(t){return t===this||t&&this.definition.equals(t.definition)||!1}}),w=n.extend(r,{statics:{extend:function ht(t){return t._serializeFields&&(t._serializeFields=new n(this.prototype._serializeFields,t._serializeFields)),ht.base.apply(this,arguments)},NO_INSERT:{insert:!1}},_class:"Item",_applyMatrix:!0,_canApplyMatrix:!0,_boundsSelected:!1,_selectChildren:!1,_serializeFields:{name:null,applyMatrix:null,matrix:new p,pivot:null,locked:!1,visible:!0,blendMode:"normal",opacity:1,guide:!1,selected:!1,clipMask:!1,data:{}},initialize:function(){},_initialize:function(t,e){var r=t&&n.isPlainObject(t),s=r&&t.internal===!0,a=this._matrix=new p,o=r&&t.project||i.project;return s||(this._id=u.get()),this._applyMatrix=this._canApplyMatrix&&i.settings.applyMatrix,e&&a.translate(e),a._owner=this,this._style=new V(o._currentStyle,this,o),this._project||(s||r&&t.insert===!1?this._setProject(o):r&&t.parent?this.setParent(t.parent):(o._activeLayer||new b).addChild(this)),r&&t!==w.NO_INSERT&&this._set(t,{insert:!0,project:!0,parent:!0},!0),r},_events:n.each(["onMouseDown","onMouseUp","onMouseDrag","onClick","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave"],function(t){this[t]={install:function(t){this.getView()._installEvent(t)},uninstall:function(t){this.getView()._uninstallEvent(t)}}},{onFrame:{install:function(){this.getView()._animateItem(this,!0)},uninstall:function(){this.getView()._animateItem(this,!1)}},onLoad:{}}),_serialize:function(t,e){function i(i){for(var a in i){var o=s[a];n.equals(o,"leading"===a?1.2*i.fontSize:i[a])||(r[a]=n.serialize(o,t,"data"!==a,e))}}var r={},s=this;return i(this._serializeFields),this instanceof x||i(this._style._defaults),[this._class,r]},_changed:function(e){var n=this._parentSymbol,i=this._parent||n,r=this._project;if(8&e&&(this._bounds=this._position=this._decomposed=this._globalMatrix=this._currentPath=t),i&&40&e&&w._clearBoundsCache(i),2&e&&w._clearBoundsCache(this),r&&(1&e&&(r._needsUpdate=!0),r._changes)){var s=r._changesById[this._id];s?s.flags|=e:(s={item:this,flags:e},r._changesById[this._id]=s,r._changes.push(s))}n&&n._changed(e)},set:function(t){return t&&this._set(t),this},getId:function(){return this._id},getName:function(){return this._name},setName:function(e,n){if(this._name&&this._removeNamed(),e===+e+"")throw new Error("Names consisting only of numbers are not supported.");var i=this._parent;if(e&&i){for(var r=i._children,s=i._namedChildren,a=e,o=1;n&&r[e];)e=a+" "+o++;(s[e]=s[e]||[]).push(this),r[e]=this}this._name=e||t,this._changed(128)},getStyle:function(){return this._style},setStyle:function(t){this.getStyle().set(t)}},n.each(["locked","visible","blendMode","opacity","guide"],function(t){var e=n.capitalize(t),t="_"+t;this["get"+e]=function(){return this[t]},this["set"+e]=function(e){e!=this[t]&&(this[t]=e,this._changed("_locked"===t?128:129))}},{}),{beans:!0,_locked:!1,_visible:!0,_blendMode:"normal",_opacity:1,_guide:!1,isSelected:function(){if(this._selectChildren)for(var t=this._children,e=0,n=t.length;n>e;e++)if(t[e].isSelected())return!0;return this._selected},setSelected:function(t,e){if(!e&&this._selectChildren)for(var n=this._children,i=0,r=n.length;r>i;i++)n[i].setSelected(t);(t=!!t)^this._selected&&(this._selected=t,this._project._updateSelection(this),this._changed(129))},_selected:!1,isFullySelected:function(){var t=this._children;if(t&&this._selected){for(var e=0,n=t.length;n>e;e++)if(!t[e].isFullySelected())return!1;return!0}return this._selected},setFullySelected:function(t){var e=this._children;if(e)for(var n=0,i=e.length;i>n;n++)e[n].setFullySelected(t);this.setSelected(t,!0)},isClipMask:function(){return this._clipMask},setClipMask:function(t){this._clipMask!=(t=!!t)&&(this._clipMask=t,t&&(this.setFillColor(null),this.setStrokeColor(null)),this._changed(129),this._parent&&this._parent._changed(1024))},_clipMask:!1,getData:function(){return this._data||(this._data={}),this._data},setData:function(t){this._data=t},getPosition:function(t){var e=this._position,n=t?l:c;if(!e){var i=this._pivot;e=this._position=i?this._matrix._transformPoint(i):this.getBounds().getCenter(!0)}return new n(e.x,e.y,this,"setPosition")},setPosition:function(){this.translate(l.read(arguments).subtract(this.getPosition(!0)))},getPivot:function(t){var e=this._pivot;if(e){var n=t?l:c;e=new n(e.x,e.y,this,"setPivot")}return e},setPivot:function(){this._pivot=l.read(arguments,0,{clone:!0,readNull:!0}),this._position=t},_pivot:null},n.each(["bounds","strokeBounds","handleBounds","roughBounds","internalBounds","internalRoughBounds"],function(t){var e="get"+n.capitalize(t),i=t.match(/^internal(.*)$/),r=i?"get"+i[1]:null;this[e]=function(n){var i=this._boundsGetter,s=!r&&("string"==typeof i?i:i&&i[e])||e,a=this._getCachedBounds(s,n,this,r);return"bounds"===t?new _(a.x,a.y,a.width,a.height,this,"setBounds"):a}},{beans:!0,_getBounds:function(t,e,n){var i=this._children;if(!i||0==i.length)return new g;w._updateBoundsCache(this,n);for(var r=1/0,s=-r,a=r,o=s,h=0,u=i.length;u>h;h++){var l=i[h];if(l._visible&&!l.isEmpty()){var c=l._getCachedBounds(t,e&&e.chain(l._matrix),n);r=Math.min(c.x,r),a=Math.min(c.y,a),s=Math.max(c.x+c.width,s),o=Math.max(c.y+c.height,o)}}return isFinite(r)?new g(r,a,s-r,o-a):new g},setBounds:function(){var t=g.read(arguments),e=this.getBounds(),n=new p,i=t.getCenter();n.translate(i),(t.width!=e.width||t.height!=e.height)&&n.scale(0!=e.width?t.width/e.width:1,0!=e.height?t.height/e.height:1),i=e.getCenter(),n.translate(-i.x,-i.y),this.transform(n)},_getCachedBounds:function(t,e,n,i){e=e&&e.orNullIfIdentity();var r=i?null:this._matrix.orNullIfIdentity(),s=(!e||e.equals(r))&&t;if(w._updateBoundsCache(this._parent||this._parentSymbol,n),s&&this._bounds&&this._bounds[s])return this._bounds[s].clone();var a=this._getBounds(i||t,e||r,n);if(s){this._bounds||(this._bounds={});var o=this._bounds[s]=a.clone();o._internal=!!i}return a},statics:{_updateBoundsCache:function(t,e){if(t){var n=e._id,i=t._boundsCache=t._boundsCache||{ids:{},list:[]};i.ids[n]||(i.list.push(e),i.ids[n]=e)}},_clearBoundsCache:function(e){var n=e._boundsCache;if(n){e._bounds=e._position=e._boundsCache=t;for(var i=0,r=n.list,s=r.length;s>i;i++){var a=r[i];a!==e&&(a._bounds=a._position=t,a._boundsCache&&w._clearBoundsCache(a))}}}}}),{beans:!0,_decompose:function(){return this._decomposed=this._matrix.decompose()},getRotation:function(){var t=this._decomposed||this._decompose();return t&&t.rotation},setRotation:function(t){var e=this.getRotation();if(null!=e&&null!=t){var n=this._decomposed;this.rotate(t-e),n.rotation=t,this._decomposed=n}},getScaling:function(t){var e=this._decomposed||this._decompose(),n=e&&e.scaling,i=t?l:c;return n&&new i(n.x,n.y,this,"setScaling")},setScaling:function(){var t=this.getScaling();if(t){var e=l.read(arguments,0,{clone:!0}),n=this._decomposed;this.scale(e.x/t.x,e.y/t.y),n.scaling=e,this._decomposed=n}},getMatrix:function(){return this._matrix},setMatrix:function(){var t=this._matrix;t.initialize.apply(t,arguments),this._applyMatrix?this.transform(null,!0):this._changed(9)},getGlobalMatrix:function(t){var e=this._globalMatrix,n=this._project._updateVersion;if(e&&e._updateVersion!==n&&(e=null),!e){e=this._globalMatrix=this._matrix.clone();var i=this._parent;i&&e.preConcatenate(i.getGlobalMatrix(!0)),e._updateVersion=n}return t?e:e.clone()},getApplyMatrix:function(){return this._applyMatrix},setApplyMatrix:function(t){(this._applyMatrix=this._canApplyMatrix&&!!t)&&this.transform(null,!0)},getTransformContent:"#getApplyMatrix",setTransformContent:"#setApplyMatrix"},{getProject:function(){return this._project},_setProject:function(t,e){if(this._project!==t){this._project&&this._installEvents(!1),this._project=t;for(var n=this._children,i=0,r=n&&n.length;r>i;i++)n[i]._setProject(t);e=!0}e&&this._installEvents(!0)},getView:function(){return this._project.getView()},_installEvents:function ut(t){ut.base.call(this,t);for(var e=this._children,n=0,i=e&&e.length;i>n;n++)e[n]._installEvents(t)},getLayer:function(){for(var t=this;t=t._parent;)if(t instanceof b)return t;return null},getParent:function(){return this._parent},setParent:function(t){return t.addChild(this)},getChildren:function(){return this._children},setChildren:function(t){this.removeChildren(),this.addChildren(t)},getFirstChild:function(){return this._children&&this._children[0]||null},getLastChild:function(){return this._children&&this._children[this._children.length-1]||null},getNextSibling:function(){return this._parent&&this._parent._children[this._index+1]||null},getPreviousSibling:function(){return this._parent&&this._parent._children[this._index-1]||null},getIndex:function(){return this._index},equals:function(t){return t===this||t&&this._class===t._class&&this._style.equals(t._style)&&this._matrix.equals(t._matrix)&&this._locked===t._locked&&this._visible===t._visible&&this._blendMode===t._blendMode&&this._opacity===t._opacity&&this._clipMask===t._clipMask&&this._guide===t._guide&&this._equals(t)||!1},_equals:function(t){return n.equals(this._children,t._children)},clone:function(t){return this._clone(new this.constructor(w.NO_INSERT),t)},_clone:function(e,i,r){var s=["_locked","_visible","_blendMode","_opacity","_clipMask","_guide"],a=this._children;e.setStyle(this._style);for(var o=0,h=a&&a.length;h>o;o++)e.addChild(a[o].clone(!1),!0);for(var o=0,h=s.length;h>o;o++){var u=s[o];this.hasOwnProperty(u)&&(e[u]=this[u])}return r!==!1&&e._matrix.initialize(this._matrix),e.setApplyMatrix(this._applyMatrix),e.setPivot(this._pivot),e.setSelected(this._selected),e._data=this._data?n.clone(this._data):null,(i||i===t)&&e.insertAbove(this),this._name&&e.setName(this._name,!0),e},copyTo:function(t){return t.addChild(this.clone(!1))},rasterize:function(t){var e=this.getStrokeBounds(),i=(t||this.getView().getResolution())/72,r=e.getTopLeft().floor(),s=e.getBottomRight().ceil(),a=new d(s.subtract(r)),o=K.getCanvas(a.multiply(i)),h=o.getContext("2d"),u=(new p).scale(i).translate(r.negate());h.save(),u.applyToContext(h),this.draw(h,new n({matrices:[u]})),h.restore();var l=new S(w.NO_INSERT);return l.setCanvas(o),l.transform((new p).translate(r.add(a.divide(2))).scale(1/i)),l.insertAbove(this),l},contains:function(){return!!this._contains(this._matrix._inverseTransform(l.read(arguments)))},_contains:function(t){if(this._children){for(var e=this._children.length-1;e>=0;e--)if(this._children[e].contains(t))return!0;return!1}return t.isInside(this.getInternalBounds())},isInside:function(){return g.read(arguments).contains(this.getBounds())},_asPathItem:function(){return new T.Rectangle({rectangle:this.getInternalBounds(),matrix:this._matrix,insert:!1})},intersects:function(t,e){return t instanceof w?this._asPathItem().getIntersections(t._asPathItem(),null,e||t._matrix,!0).length>0:!1},hitTest:function(){return this._hitTest(l.read(arguments),k.getOptions(n.read(arguments)))},_hitTest:function(t,e){function i(e,i){var r=f["get"+i]();return t.subtract(r).divide(h).length<=1?new k(e,c,{name:n.hyphenate(i),point:r}):void 0}if(this._locked||!this._visible||this._guide&&!e.guides||this.isEmpty())return null;var r=this._matrix,s=e._totalMatrix,a=this.getView(),o=e._totalMatrix=s?s.chain(r):this.getGlobalMatrix().preConcatenate(a._matrix),h=e._tolerancePadding=new d(T._getPenPadding(1,o.inverted())).multiply(Math.max(e.tolerance,1e-6));if(t=r._inverseTransform(t),!this._children&&!this.getInternalRoughBounds().expand(h.multiply(2))._containsPoint(t))return null;var u,l=!(e.guides&&!this._guide||e.selected&&!this._selected||e.type&&e.type!==n.hyphenate(this._class)||e["class"]&&!(this instanceof e["class"])),c=this;if(l&&(e.center||e.bounds)&&this._parent){var f=this.getInternalBounds();if(e.center&&(u=i("center","Center")),!u&&e.bounds)for(var g=["TopLeft","TopRight","BottomLeft","BottomRight","LeftCenter","TopCenter","RightCenter","BottomCenter"],_=0;8>_&&!u;_++)u=i("bounds",g[_])}var p=!u&&this._children;if(p)for(var v=this._getChildHitTestOptions(e),_=p.length-1;_>=0&&!u;_--)u=p[_]._hitTest(t,v);return!u&&l&&(u=this._hitTestSelf(t,e)),u&&u.point&&(u.point=r.transform(u.point)),e._totalMatrix=s,u},_getChildHitTestOptions:function(t){return t},_hitTestSelf:function(t,e){return e.fill&&this.hasFill()&&this._contains(t)?new k("fill",this):void 0},matches:function(t,e){function i(t,e){for(var r in t)if(t.hasOwnProperty(r)){var s=t[r],a=e[r];if(n.isPlainObject(s)&&n.isPlainObject(a)){if(!i(s,a))return!1}else if(!n.equals(s,a))return!1}return!0}var r=typeof t;if("object"===r){for(var s in t)if(t.hasOwnProperty(s)&&!this.matches(s,t[s]))return!1}else{if("function"===r)return t(this);var a=/^(empty|editable)$/.test(t)?this["is"+n.capitalize(t)]():"type"===t?n.hyphenate(this._class):this[t];if(/^(constructor|class)$/.test(t)){if(!(this instanceof e))return!1}else if(e instanceof RegExp){if(!e.test(a))return!1}else if("function"==typeof e){if(!e(a))return!1}else if(n.isPlainObject(e)){if(!i(e,a))return!1}else if(!n.equals(a,e))return!1}return!0},getItems:function(t){return w._getItems(this._children,t,this._matrix)},getItem:function(t){return w._getItems(this._children,t,this._matrix,null,!0)[0]||null},statics:{_getItems:function lt(t,e,i,r,s){if(!r&&"object"==typeof e){var a=e.overlapping,o=e.inside,h=a||o,u=h&&g.read([h]);r={items:[],inside:!!o,overlapping:!!a,rect:u,path:a&&new T.Rectangle({rectangle:u,insert:!1})},h&&(e=n.set({},e,{inside:!0,overlapping:!0}))}var l=r&&r.items,u=r&&r.rect;i=u&&(i||new p);for(var c=0,d=t&&t.length;d>c;c++){var f=t[c],_=i&&i.chain(f._matrix),v=!0;if(u){var h=f.getBounds(_);if(!u.intersects(h))continue;r.inside&&u.contains(h)||r.overlapping&&(h.contains(u)||r.path.intersects(f,_))||(v=!1)}if(v&&f.matches(e)&&(l.push(f),s))break;if(lt(f._children,e,_,r,s),s&&l.length>0)break}return l}}},{importJSON:function(t){var e=n.importJSON(t,this);return e!==this?this.addChild(e):e},addChild:function(e,n){return this.insertChild(t,e,n)},insertChild:function(t,e,n){var i=e?this.insertChildren(t,[e],n):null;return i&&i[0]},addChildren:function(t,e){return this.insertChildren(this._children.length,t,e)},insertChildren:function(t,e,i,r){var s=this._children;if(s&&e&&e.length>0){e=Array.prototype.slice.apply(e);for(var a=e.length-1;a>=0;a--){var o=e[a];if(!r||o instanceof r){var h=o._parent===this&&o._index<t;o._remove(!1,!0)&&h&&t--}else e.splice(a,1)}n.splice(s,e,t,0);for(var u=this._project,l=u&&u._changes,a=0,c=e.length;c>a;a++){var o=e[a];o._parent=this,o._setProject(this._project,!0),o._name&&o.setName(o._name),l&&this._changed(5)}this._changed(11)}else e=null;return e},_insertSibling:function(t,e,n){return this._parent?this._parent.insertChild(t,e,n):null},insertAbove:function(t,e){return t._insertSibling(t._index+1,this,e)},insertBelow:function(t,e){return t._insertSibling(t._index,this,e)},sendToBack:function(){return(this._parent||this instanceof b&&this._project).insertChild(0,this)},bringToFront:function(){return(this._parent||this instanceof b&&this._project).addChild(this)},appendTop:"#addChild",appendBottom:function(t){return this.insertChild(0,t)},moveAbove:"#insertAbove",moveBelow:"#insertBelow",reduce:function(){if(this._children&&1===this._children.length){var t=this._children[0].reduce();return t.insertAbove(this),t.setStyle(this._style),this.remove(),t}return this},_removeNamed:function(){var t=this._parent;if(t){var e=t._children,n=t._namedChildren,i=this._name,r=n[i],s=r?r.indexOf(this):-1;-1!==s&&(e[i]==this&&delete e[i],r.splice(s,1),r.length?e[i]=r[r.length-1]:delete n[i])}},_remove:function(t,e){var i=this._parent;if(i){if(this._name&&this._removeNamed(),null!=this._index&&n.splice(i._children,null,this._index,1),this._installEvents(!1),t){var r=this._project;r&&r._changes&&this._changed(5)}return e&&i._changed(11),this._parent=null,!0}return!1},remove:function(){return this._remove(!0,!0)},replaceWith:function(t){var e=t&&t.insertBelow(this);return e&&this.remove(),e},removeChildren:function(t,e){if(!this._children)return null;t=t||0,e=n.pick(e,this._children.length);for(var i=n.splice(this._children,null,t,e-t),r=i.length-1;r>=0;r--)i[r]._remove(!0,!1);return i.length>0&&this._changed(11),i},clear:"#removeChildren",reverseChildren:function(){if(this._children){this._children.reverse();for(var t=0,e=this._children.length;e>t;t++)this._children[t]._index=t;this._changed(11)}},isEmpty:function(){return!this._children||0===this._children.length},isEditable:function(){for(var t=this;t;){if(!t._visible||t._locked)return!1;t=t._parent}return!0},hasFill:function(){return this.getStyle().hasFill()},hasStroke:function(){return this.getStyle().hasStroke()},hasShadow:function(){return this.getStyle().hasShadow()},_getOrder:function(t){function e(t){var e=[];do e.unshift(t);while(t=t._parent);return e}for(var n=e(this),i=e(t),r=0,s=Math.min(n.length,i.length);s>r;r++)if(n[r]!=i[r])return n[r]._index<i[r]._index?1:-1;return 0},hasChildren:function(){return this._children&&this._children.length>0},isInserted:function(){return this._parent?this._parent.isInserted():!1},isAbove:function(t){return-1===this._getOrder(t)},isBelow:function(t){return 1===this._getOrder(t)},isParent:function(t){return this._parent===t},isChild:function(t){return t&&t._parent===this},isDescendant:function(t){for(var e=this;e=e._parent;)if(e==t)return!0;return!1},isAncestor:function(t){return t?t.isDescendant(this):!1},isSibling:function(t){return this._parent===t._parent},isGroupedWith:function(t){for(var e=this._parent;e;){if(e._parent&&/^(Group|Layer|CompoundPath)$/.test(e._class)&&t.isDescendant(e))return!0;e=e._parent}return!1},translate:function(){var t=new p;return this.transform(t.translate.apply(t,arguments))},rotate:function(t){return this.transform((new p).rotate(t,l.read(arguments,1,{readNull:!0})||this.getPosition(!0)))}},n.each(["scale","shear","skew"],function(t){this[t]=function(){var e=l.read(arguments),n=l.read(arguments,0,{readNull:!0});return this.transform((new p)[t](e,n||this.getPosition(!0)))}},{}),{transform:function(t,e,n,i){t&&t.isIdentity()&&(t=null);var r=this._matrix,s=(e||this._applyMatrix)&&(!r.isIdentity()||t||e&&n&&this._children);if(!t&&!s)return this;if(t&&r.preConcatenate(t),s=s&&this._transformContent(r,n,i)){var a=this._pivot,o=this._style,h=o.getFillColor(!0),u=o.getStrokeColor(!0);a&&r._transformPoint(a,a,!0),h&&h.transform(r),u&&u.transform(r),r.reset(!0),i&&this._canApplyMatrix&&(this._applyMatrix=!0)}var l=this._bounds,c=this._position;this._changed(9);var d=l&&t&&t.decompose();if(d&&!d.shearing&&d.rotation%90===0){for(var f in l){var g=l[f];(s||!g._internal)&&t._transformBounds(g,g)}var _=this._boundsGetter,g=l[_&&_.getBounds||_||"getBounds"];g&&(this._position=g.getCenter(!0)),this._bounds=l}else t&&c&&(this._position=t._transformPoint(c,c));return this},_transformContent:function(t,e,n){var i=this._children;if(i){for(var r=0,s=i.length;s>r;r++)i[r].transform(t,!0,e,n);return!0}},globalToLocal:function(){return this.getGlobalMatrix(!0)._inverseTransform(l.read(arguments))},localToGlobal:function(){return this.getGlobalMatrix(!0)._transformPoint(l.read(arguments))},parentToLocal:function(){return this._matrix._inverseTransform(l.read(arguments))},localToParent:function(){return this._matrix._transformPoint(l.read(arguments))},fitBounds:function(t,e){t=g.read(arguments);var n=this.getBounds(),i=n.height/n.width,r=t.height/t.width,s=(e?i>r:r>i)?t.width/n.width:t.height/n.height,a=new g(new l,new d(n.width*s,n.height*s));a.setCenter(t.getCenter()),this.setBounds(a)},_setStyles:function(t){var e=this._style,n=e.getFillColor(),r=e.getStrokeColor(),s=e.getShadowColor();if(n&&(t.fillStyle=n.toCanvasStyle(t)),r){var a=e.getStrokeWidth();if(a>0){t.strokeStyle=r.toCanvasStyle(t),t.lineWidth=a;var o=e.getStrokeJoin(),h=e.getStrokeCap(),u=e.getMiterLimit();if(o&&(t.lineJoin=o),h&&(t.lineCap=h),u&&(t.miterLimit=u),i.support.nativeDash){var l=e.getDashArray(),c=e.getDashOffset();l&&l.length&&("setLineDash"in t?(t.setLineDash(l),t.lineDashOffset=c):(t.mozDash=l,t.mozDashOffset=c))}}}if(s){var d=e.getShadowBlur();if(d>0){t.shadowColor=s.toCanvasStyle(t),t.shadowBlur=d;var f=this.getShadowOffset();t.shadowOffsetX=f.x,t.shadowOffsetY=f.y}}},draw:function(t,e,n){function i(t){return a?a.chain(t):t}var r=this._updateVersion=this._project._updateVersion;if(this._visible&&0!==this._opacity){var s=e.matrices,a=e.viewMatrix,o=this._matrix,h=s[s.length-1].chain(o);if(h.isInvertible()){s.push(h),e.updateMatrix&&(h._updateVersion=r,this._globalMatrix=h);var u,l,c,d=this._blendMode,f=this._opacity,g="normal"===d,_=tt.nativeModes[d],p=g&&1===f||e.dontStart||e.clip||(_||g&&1>f)&&this._canComposite(),v=e.pixelRatio||1;if(!p){var m=this.getStrokeBounds(i(h));if(!m.width||!m.height)return;c=e.offset,l=e.offset=m.getTopLeft().floor(),u=t,t=K.getContext(m.getSize().ceil().add(1).multiply(v)),1!==v&&t.scale(v,v)}t.save();var y=n?n.chain(o):!this.getStrokeScaling(!0)&&i(h),w=!p&&e.clipItem,x=!y||w;if(p?(t.globalAlpha=f,_&&(t.globalCompositeOperation=d)):x&&t.translate(-l.x,-l.y),x&&(p?o:i(h)).applyToContext(t),w&&e.clipItem.draw(t,e.extend({clip:!0})),y){t.setTransform(v,0,0,v,0,0);var b=e.offset;b&&t.translate(-b.x,-b.y)}this._draw(t,e,y),t.restore(),s.pop(),e.clip&&!e.dontFinish&&t.clip(),p||(tt.process(d,t,u,f,l.subtract(c).multiply(v)),K.release(t),e.offset=c)}}},_isUpdated:function(t){var e=this._parent;if(e instanceof E)return e._isUpdated(t);var n=this._updateVersion===t;return!n&&e&&e._visible&&e._isUpdated(t)&&(this._updateVersion=t,n=!0),n},_drawSelection:function(t,e,n,i,r){if((this._drawSelected||this._boundsSelected)&&this._isUpdated(r)){var s=this.getSelectedColor(!0)||this.getLayer().getSelectedColor(!0),a=e.chain(this.getGlobalMatrix(!0));if(t.strokeStyle=t.fillStyle=s?s.toCanvasStyle(t):"#009dec",this._drawSelected&&this._drawSelected(t,a,i),this._boundsSelected){var o=n/2,h=a._transformCorners(this.getInternalBounds());t.beginPath();for(var u=0;8>u;u++)t[0===u?"moveTo":"lineTo"](h[u],h[++u]);t.closePath(),t.stroke();for(var u=0;8>u;u++)t.fillRect(h[u]-o,h[++u]-o,n,n)}}},_canComposite:function(){return!1}},n.each(["down","drag","up","move"],function(t){this["removeOn"+n.capitalize(t)]=function(){var e={};return e[t]=!0,this.removeOn(e)}},{removeOn:function(t){for(var e in t)if(t[e]){var n="mouse"+e,i=this._project,r=i._removeSets=i._removeSets||{};r[n]=r[n]||{},r[n][this._id]=this}return this}})),x=w.extend({_class:"Group",_selectChildren:!0,_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||this.addChildren(Array.isArray(t)?t:arguments)},_changed:function ct(e){ct.base.call(this,e),1026&e&&(this._clipItem=t)},_getClipItem:function(){var e=this._clipItem;if(e===t){e=null;for(var n=0,i=this._children.length;i>n;n++){var r=this._children[n];if(r._clipMask){e=r;break}}this._clipItem=e}return e},isClipped:function(){return!!this._getClipItem()},setClipped:function(t){var e=this.getFirstChild();e&&e.setClipMask(t)},_draw:function(t,e){var n=e.clip,i=!n&&this._getClipItem(),r=!0;if(e=e.extend({clipItem:i,clip:!1}),n?this._currentPath?(t.currentPath=this._currentPath,r=!1):(t.beginPath(),e.dontStart=e.dontFinish=!0):i&&i.draw(t,e.extend({clip:!0})),r)for(var s=0,a=this._children.length;a>s;s++){var o=this._children[s];o!==i&&o.draw(t,e)}n&&(this._currentPath=t.currentPath)}}),b=x.extend({_class:"Layer",initialize:function(e){var i=n.isPlainObject(e)?new n(e):{children:Array.isArray(e)?e:arguments},r=i.insert;i.insert=!1,x.call(this,i),(r||r===t)&&(this._project.addChild(this),this.activate())},_remove:function dt(t,e){if(this._parent)return dt.base.call(this,t,e);if(null!=this._index){var i=this._project;
return i._activeLayer===this&&(i._activeLayer=this.getNextSibling()||this.getPreviousSibling()),n.splice(i.layers,null,this._index,1),this._installEvents(!1),t&&i._changes&&this._changed(5),e&&(i._needsUpdate=!0),!0}return!1},getNextSibling:function ft(){return this._parent?ft.base.call(this):this._project.layers[this._index+1]||null},getPreviousSibling:function gt(){return this._parent?gt.base.call(this):this._project.layers[this._index-1]||null},isInserted:function _t(){return this._parent?_t.base.call(this):null!=this._index},activate:function(){this._project._activeLayer=this},_insertSibling:function pt(t,e,n){return this._parent?pt.base.call(this,t,e,n):this._project.insertChild(t,e,n)}}),C=w.extend({_class:"Shape",_applyMatrix:!1,_canApplyMatrix:!1,_boundsSelected:!0,_serializeFields:{type:null,size:null,radius:null},initialize:function(t){this._initialize(t)},_equals:function(t){return this._type===t._type&&this._size.equals(t._size)&&n.equals(this._radius,t._radius)},clone:function(t){var e=new C(w.NO_INSERT);return e.setType(this._type),e.setSize(this._size),e.setRadius(this._radius),this._clone(e,t)},getType:function(){return this._type},setType:function(t){this._type=t},getShape:"#getType",setShape:"#setType",getSize:function(){var t=this._size;return new f(t.width,t.height,this,"setSize")},setSize:function(){var t=d.read(arguments);if(this._size){if(!this._size.equals(t)){var e=this._type,n=t.width,i=t.height;if("rectangle"===e){var r=d.min(this._radius,t.divide(2));this._radius.set(r.width,r.height)}else"circle"===e?(n=i=(n+i)/2,this._radius=n/2):"ellipse"===e&&this._radius.set(n/2,i/2);this._size.set(n,i),this._changed(9)}}else this._size=t.clone()},getRadius:function(){var t=this._radius;return"circle"===this._type?t:new f(t.width,t.height,this,"setRadius")},setRadius:function(t){var e=this._type;if("circle"===e){if(t===this._radius)return;var n=2*t;this._radius=t,this._size.set(n,n)}else if(t=d.read(arguments),this._radius){if(this._radius.equals(t))return;if(this._radius.set(t.width,t.height),"rectangle"===e){var n=d.max(this._size,t.multiply(2));this._size.set(n.width,n.height)}else"ellipse"===e&&this._size.set(2*t.width,2*t.height)}else this._radius=t.clone();this._changed(9)},isEmpty:function(){return!1},toPath:function(t){var e=this._clone(new(T[n.capitalize(this._type)])({center:new l,size:this._size,radius:this._radius,insert:!1}),t);return i.settings.applyMatrix&&e.setApplyMatrix(!0),e},_draw:function(t,e,n){var i=this._style,r=i.hasFill(),s=i.hasStroke(),a=e.dontFinish||e.clip,o=!n;if(r||s||a){var h=this._type,u=this._radius,l="circle"===h;if(e.dontStart||t.beginPath(),o&&l)t.arc(0,0,u,0,2*Math.PI,!0);else{var c=l?u:u.width,d=l?u:u.height,f=this._size,g=f.width,_=f.height;if(o&&"rectangle"===h&&0===c&&0===d)t.rect(-g/2,-_/2,g,_);else{var p=g/2,v=_/2,m=.44771525016920644,y=c*m,w=d*m,x=[-p,-v+d,-p,-v+w,-p+y,-v,-p+c,-v,p-c,-v,p-y,-v,p,-v+w,p,-v+d,p,v-d,p,v-w,p-y,v,p-c,v,-p+c,v,-p+y,v,-p,v-w,-p,v-d];n&&n.transform(x,x,32),t.moveTo(x[0],x[1]),t.bezierCurveTo(x[2],x[3],x[4],x[5],x[6],x[7]),p!==c&&t.lineTo(x[8],x[9]),t.bezierCurveTo(x[10],x[11],x[12],x[13],x[14],x[15]),v!==d&&t.lineTo(x[16],x[17]),t.bezierCurveTo(x[18],x[19],x[20],x[21],x[22],x[23]),p!==c&&t.lineTo(x[24],x[25]),t.bezierCurveTo(x[26],x[27],x[28],x[29],x[30],x[31])}}t.closePath()}a||!r&&!s||(this._setStyles(t),r&&(t.fill(i.getWindingRule()),t.shadowColor="rgba(0,0,0,0)"),s&&t.stroke())},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_getBounds:function(t,e){var n=new g(this._size).setCenter(0,0);return"getBounds"!==t&&this.hasStroke()&&(n=n.expand(this.getStrokeWidth())),e?e._transformBounds(n):n}},new function(){function t(t,e,n){var i=t._radius;if(!i.isZero())for(var r=t._size.divide(2),s=0;4>s;s++){var a=new l(1&s?1:-1,s>1?1:-1),o=a.multiply(r),h=o.subtract(a.multiply(i)),u=new g(o,h);if((n?u.expand(n):u).contains(e))return h}}function e(t,e){var n=t.getAngleInRadians(),i=2*e.width,r=2*e.height,s=i*Math.sin(n),a=r*Math.cos(n);return i*r/(2*Math.sqrt(s*s+a*a))}return{_contains:function n(e){if("rectangle"===this._type){var i=t(this,e);return i?e.subtract(i).divide(this._radius).getLength()<=1:n.base.call(this,e)}return e.divide(this.size).getLength()<=.5},_hitTestSelf:function i(n,r){var s=!1;if(this.hasStroke()){var a=this._type,o=this._radius,h=this.getStrokeWidth()+2*r.tolerance;if("rectangle"===a){var u=t(this,n,h);if(u){var l=n.subtract(u);s=2*Math.abs(l.getLength()-e(l,o))<=h}else{var c=new g(this._size).setCenter(0,0),d=c.expand(h),f=c.expand(-h);s=d._containsPoint(n)&&!f._containsPoint(n)}}else"ellipse"===a&&(o=e(n,o)),s=2*Math.abs(n.getLength()-o)<=h}return s?new k("stroke",this):i.base.apply(this,arguments)}}},{statics:new function(){function t(t,e,i,r,s){var a=new C(n.getNamed(s));return a._type=t,a._size=i,a._radius=r,a.translate(e)}return{Circle:function(){var e=l.readNamed(arguments,"center"),i=n.readNamed(arguments,"radius");return t("circle",e,new d(2*i),i,arguments)},Rectangle:function(){var e=g.readNamed(arguments,"rectangle"),n=d.min(d.readNamed(arguments,"radius"),e.getSize(!0).divide(2));return t("rectangle",e.getCenter(!0),e.getSize(!0),n,arguments)},Ellipse:function(){var e=C._readEllipse(arguments),n=e.radius;return t("ellipse",e.center,n.multiply(2),n,arguments)},_readEllipse:function(t){var e,i;if(n.hasNamed(t,"radius"))e=l.readNamed(t,"center"),i=d.readNamed(t,"radius");else{var r=g.readNamed(t,"rectangle");e=r.getCenter(!0),i=r.getSize(!0).divide(2)}return{center:e,radius:i}}}}}),S=w.extend({_class:"Raster",_applyMatrix:!1,_canApplyMatrix:!1,_boundsGetter:"getBounds",_boundsSelected:!0,_serializeFields:{crossOrigin:null,source:null},initialize:function(e,n){this._initialize(e,n!==t&&l.read(arguments,1))||("string"==typeof e?this.setSource(e):this.setImage(e)),this._size||(this._size=new d,this._loaded=!1)},_equals:function(t){return this.getSource()===t.getSource()},clone:function(t){var e=new S(w.NO_INSERT),n=this._image,i=this._canvas;if(n)e.setImage(n);else if(i){var r=K.getCanvas(this._size);r.getContext("2d").drawImage(i,0,0),e.setImage(r)}return e._crossOrigin=this._crossOrigin,this._clone(e,t)},getSize:function(){var t=this._size;return new f(t?t.width:0,t?t.height:0,this,"setSize")},setSize:function(){var t=d.read(arguments);if(!t.equals(this._size))if(t.width>0&&t.height>0){var e=this.getElement();this.setImage(K.getCanvas(t)),e&&this.getContext(!0).drawImage(e,0,0,t.width,t.height)}else this._canvas&&K.release(this._canvas),this._size=t.clone()},getWidth:function(){return this._size?this._size.width:0},setWidth:function(t){this.setSize(t,this.getHeight())},getHeight:function(){return this._size?this._size.height:0},setHeight:function(t){this.setSize(this.getWidth(),t)},isEmpty:function(){var t=this._size;return!t||0===t.width&&0===t.height},getResolution:function(){var t=this._matrix,e=new l(0,0).transform(t),n=new l(1,0).transform(t).subtract(e),i=new l(0,1).transform(t).subtract(e);return new d(72/n.getLength(),72/i.getLength())},getPpi:"#getResolution",getImage:function(){return this._image},setImage:function(t){this._canvas&&K.release(this._canvas),t&&t.getContext?(this._image=null,this._canvas=t,this._loaded=!0):(this._image=t,this._canvas=null,this._loaded=t&&t.complete),this._size=new d(t?t.naturalWidth||t.width:0,t?t.naturalHeight||t.height:0),this._context=null,this._changed(521)},getCanvas:function(){if(!this._canvas){var t=K.getContext(this._size);try{this._image&&t.drawImage(this._image,0,0),this._canvas=t.canvas}catch(e){K.release(t)}}return this._canvas},setCanvas:"#setImage",getContext:function(t){return this._context||(this._context=this.getCanvas().getContext("2d")),t&&(this._image=null,this._changed(513)),this._context},setContext:function(t){this._context=t},getSource:function(){return this._image&&this._image.src||this.toDataURL()},setSource:function(t){function e(){var t=r.getView();t&&(i=t._scope,r.setImage(n),r.emit("load"),t.update())}var n,r=this,s=this._crossOrigin;n=document.getElementById(t)||new Image,s&&(n.crossOrigin=s),n.naturalWidth&&n.naturalHeight?setTimeout(e,0):(H.add(n,{load:e}),n.src||(n.src=t)),this.setImage(n)},getCrossOrigin:function(){return this._image&&this._image.crossOrigin||this._crossOrigin||""},setCrossOrigin:function(t){this._crossOrigin=t,this._image&&(this._image.crossOrigin=t)},getElement:function(){return this._canvas||this._loaded&&this._image}},{beans:!1,getSubCanvas:function(){var t=g.read(arguments),e=K.getContext(t.getSize());return e.drawImage(this.getCanvas(),t.x,t.y,t.width,t.height,0,0,t.width,t.height),e.canvas},getSubRaster:function(){var t=g.read(arguments),e=new S(w.NO_INSERT);return e.setImage(this.getSubCanvas(t)),e.translate(t.getCenter().subtract(this.getSize().divide(2))),e._matrix.preConcatenate(this._matrix),e.insertAbove(this),e},toDataURL:function(){var t=this._image&&this._image.src;if(/^data:/.test(t))return t;var e=this.getCanvas();return e?e.toDataURL.apply(e,arguments):null},drawImage:function(t){var e=l.read(arguments,1);this.getContext(!0).drawImage(t,e.x,e.y)},getAverageColor:function(t){var e,i;t?t instanceof O?(i=t,e=t.getBounds()):t.width?e=new g(t):t.x&&(e=new g(t.x-.5,t.y-.5,1,1)):e=this.getBounds();var r=32,s=Math.min(e.width,r),a=Math.min(e.height,r),o=S._sampleContext;o?o.clearRect(0,0,r+1,r+1):o=S._sampleContext=K.getContext(new d(r)),o.save();var h=(new p).scale(s/e.width,a/e.height).translate(-e.x,-e.y);h.applyToContext(o),i&&i.draw(o,new n({clip:!0,matrices:[h]})),this._matrix.applyToContext(o);var u=this.getElement(),l=this._size;u&&o.drawImage(u,-l.width/2,-l.height/2),o.restore();for(var c=o.getImageData(.5,.5,Math.ceil(s),Math.ceil(a)).data,f=[0,0,0],_=0,v=0,m=c.length;m>v;v+=4){var y=c[v+3];_+=y,y/=255,f[0]+=c[v]*y,f[1]+=c[v+1]*y,f[2]+=c[v+2]*y}for(var v=0;3>v;v++)f[v]/=_;return _?R.read(f):null},getPixel:function(){var t=l.read(arguments),e=this.getContext().getImageData(t.x,t.y,1,1).data;return new R("rgb",[e[0]/255,e[1]/255,e[2]/255],e[3]/255)},setPixel:function(){var t=l.read(arguments),e=R.read(arguments),n=e._convert("rgb"),i=e._alpha,r=this.getContext(!0),s=r.createImageData(1,1),a=s.data;a[0]=255*n[0],a[1]=255*n[1],a[2]=255*n[2],a[3]=null!=i?255*i:255,r.putImageData(s,t.x,t.y)},createImageData:function(){var t=d.read(arguments);return this.getContext().createImageData(t.width,t.height)},getImageData:function(){var t=g.read(arguments);return t.isEmpty()&&(t=new g(this._size)),this.getContext().getImageData(t.x,t.y,t.width,t.height)},setImageData:function(t){var e=l.read(arguments,1);this.getContext(!0).putImageData(t,e.x,e.y)},_getBounds:function(t,e){var n=new g(this._size).setCenter(0,0);return e?e._transformBounds(n):n},_hitTestSelf:function(t){if(this._contains(t)){var e=this;return new k("pixel",e,{offset:t.add(e._size.divide(2)).round(),color:{get:function(){return e.getPixel(this.offset)}}})}},_draw:function(t){var e=this.getElement();e&&(t.globalAlpha=this._opacity,t.drawImage(e,-this._size.width/2,-this._size.height/2))},_canComposite:function(){return!0}}),P=w.extend({_class:"PlacedSymbol",_applyMatrix:!1,_canApplyMatrix:!1,_boundsGetter:{getBounds:"getStrokeBounds"},_boundsSelected:!0,_serializeFields:{symbol:null},initialize:function(e,n){this._initialize(e,n!==t&&l.read(arguments,1))||this.setSymbol(e instanceof y?e:new y(e))},_equals:function(t){return this._symbol===t._symbol},getSymbol:function(){return this._symbol},setSymbol:function(t){this._symbol=t,this._changed(9)},clone:function(t){var e=new P(w.NO_INSERT);return e.setSymbol(this._symbol),this._clone(e,t)},isEmpty:function(){return this._symbol._definition.isEmpty()},_getBounds:function(t,e,n){var i=this.symbol._definition;return i._getCachedBounds(t,e&&e.chain(i._matrix),n)},_hitTestSelf:function(t,e){var n=this._symbol._definition._hitTest(t,e);return n&&(n.item=this),n},_draw:function(t,e){this.symbol._definition.draw(t,e)}}),k=n.extend({_class:"HitResult",initialize:function(t,e,n){this.type=t,this.item=e,n&&(n.enumerable=!0,this.inject(n))},statics:{getOptions:function(t){return new n({type:null,tolerance:i.settings.hitTolerance,fill:!t,stroke:!t,segments:!t,handles:!1,ends:!1,center:!1,bounds:!1,guides:!1,selected:!1},t)}}}),M=n.extend({_class:"Segment",beans:!0,initialize:function(e,n,i,r,s,a){var o,h,u,l=arguments.length;0===l||(1===l?"point"in e?(o=e.point,h=e.handleIn,u=e.handleOut):o=e:2===l&&"number"==typeof e?o=arguments:3>=l?(o=e,h=n,u=i):(o=e!==t?[e,n]:null,h=i!==t?[i,r]:null,u=s!==t?[s,a]:null)),new I(o,this,"_point"),new I(h,this,"_handleIn"),new I(u,this,"_handleOut")},_serialize:function(t){return n.serialize(this.hasHandles()?[this._point,this._handleIn,this._handleOut]:this._point,t,!0)},_changed:function(t){var e=this._path;if(e){var n,i=e._curves,r=this._index;i&&(t&&t!==this._point&&t!==this._handleIn||!(n=r>0?i[r-1]:e._closed?i[i.length-1]:null)||n._changed(),t&&t!==this._point&&t!==this._handleOut||!(n=i[r])||n._changed()),e._changed(25)}},getPoint:function(){return this._point},setPoint:function(){var t=l.read(arguments);this._point.set(t.x,t.y)},getHandleIn:function(){return this._handleIn},setHandleIn:function(){var t=l.read(arguments);this._handleIn.set(t.x,t.y)},getHandleOut:function(){return this._handleOut},setHandleOut:function(){var t=l.read(arguments);this._handleOut.set(t.x,t.y)},hasHandles:function(){return!this._handleIn.isZero()||!this._handleOut.isZero()},clearHandles:function(){this._handleIn.set(0,0),this._handleOut.set(0,0)},_selectionState:0,isSelected:function(t){var e=this._selectionState;return t?t===this._point?!!(4&e):t===this._handleIn?!!(1&e):t===this._handleOut?!!(2&e):!1:!!(7&e)},setSelected:function(t,e){var n=this._path,t=!!t,i=this._selectionState,r=i,s=e?e===this._point?4:e===this._handleIn?1:e===this._handleOut?2:0:7;t?i|=s:i&=~s,this._selectionState=i,n&&i!==r&&(n._updateSelection(this,r,i),n._changed(129))},getIndex:function(){return this._index!==t?this._index:null},getPath:function(){return this._path||null},getCurve:function(){var t=this._path,e=this._index;return t?(e>0&&!t._closed&&e===t._segments.length-1&&e--,t.getCurves()[e]||null):null},getLocation:function(){var t=this.getCurve();return t?new z(t,this===t._segment1?0:1):null},getNext:function(){var t=this._path&&this._path._segments;return t&&(t[this._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._segments;return t&&(t[this._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return 0===this._index},isLast:function(){var t=this._path;return t&&this._index===t._segments.length-1||!1},reverse:function(){var t=this._handleIn,e=this._handleOut,n=t._x,i=t._y;t.set(e._x,e._y),e.set(n,i)},reversed:function(){return new M(this._point,this._handleOut,this._handleIn)},remove:function(){return this._path?!!this._path.removeSegment(this._index):!1},clone:function(){return new M(this._point,this._handleIn,this._handleOut)},equals:function(t){return t===this||t&&this._class===t._class&&this._point.equals(t._point)&&this._handleIn.equals(t._handleIn)&&this._handleOut.equals(t._handleOut)||!1},toString:function(){var t=["point: "+this._point];return this._handleIn.isZero()||t.push("handleIn: "+this._handleIn),this._handleOut.isZero()||t.push("handleOut: "+this._handleOut),"{ "+t.join(", ")+" }"},transform:function(t){this._transformCoordinates(t,new Array(6),!0),this._changed()},_transformCoordinates:function(t,e,n){var i=this._point,r=n&&this._handleIn.isZero()?null:this._handleIn,s=n&&this._handleOut.isZero()?null:this._handleOut,a=i._x,o=i._y,h=2;return e[0]=a,e[1]=o,r&&(e[h++]=r._x+a,e[h++]=r._y+o),s&&(e[h++]=s._x+a,e[h++]=s._y+o),t&&(t._transformCoordinates(e,e,h/2),a=e[0],o=e[1],n?(i._x=a,i._y=o,h=2,r&&(r._x=e[h++]-a,r._y=e[h++]-o),s&&(s._x=e[h++]-a,s._y=e[h++]-o)):(r||(e[h++]=a,e[h++]=o),s||(e[h++]=a,e[h++]=o))),e}}),I=l.extend({initialize:function(e,n,i){var r,s,a;if(e)if((r=e[0])!==t)s=e[1];else{var o=e;(r=o.x)===t&&(o=l.read(arguments),r=o.x),s=o.y,a=o.selected}else r=s=0;this._x=r,this._y=s,this._owner=n,n[i]=this,a&&this.setSelected(!0)},set:function(t,e){return this._x=t,this._y=e,this._owner._changed(this),this},_serialize:function(t){var e=t.formatter,n=e.number(this._x),i=e.number(this._y);return this.isSelected()?{x:n,y:i,selected:!0}:[n,i]},getX:function(){return this._x},setX:function(t){this._x=t,this._owner._changed(this)},getY:function(){return this._y},setY:function(t){this._y=t,this._owner._changed(this)},isZero:function(){return h.isZero(this._x)&&h.isZero(this._y)},setSelected:function(t){this._owner.setSelected(t,this)},isSelected:function(){return this._owner.isSelected(this)}}),A=n.extend({_class:"Curve",initialize:function(t,e,n,i,r,s,a,o){var h,u,l,c,d,f,g=arguments.length;3===g?(this._path=t,h=e,u=n):0===g?(h=new M,u=new M):1===g?"segment1"in t?(h=new M(t.segment1),u=new M(t.segment2)):"point1"in t?(l=t.point1,d=t.handle1,f=t.handle2,c=t.point2):Array.isArray(t)&&(l=[t[0],t[1]],c=[t[6],t[7]],d=[t[2]-t[0],t[3]-t[1]],f=[t[4]-t[6],t[5]-t[7]]):2===g?(h=new M(t),u=new M(e)):4===g?(l=t,d=e,f=n,c=i):8===g&&(l=[t,e],c=[a,o],d=[n-t,i-e],f=[r-a,s-o]),this._segment1=h||new M(l,null,d),this._segment2=u||new M(c,f,null)},_serialize:function(t){return n.serialize(this.hasHandles()?[this.getPoint1(),this.getHandle1(),this.getHandle2(),this.getPoint2()]:[this.getPoint1(),this.getPoint2()],t,!0)},_changed:function(){this._length=this._bounds=t},clone:function(){return new A(this._segment1,this._segment2)},toString:function(){var t=["point1: "+this._segment1._point];return this._segment1._handleOut.isZero()||t.push("handle1: "+this._segment1._handleOut),this._segment2._handleIn.isZero()||t.push("handle2: "+this._segment2._handleIn),t.push("point2: "+this._segment2._point),"{ "+t.join(", ")+" }"},remove:function(){var t=!1;if(this._path){var e=this._segment2,n=e._handleOut;t=e.remove(),t&&this._segment1._handleOut.set(n.x,n.y)}return t},getPoint1:function(){return this._segment1._point},setPoint1:function(){var t=l.read(arguments);this._segment1._point.set(t.x,t.y)},getPoint2:function(){return this._segment2._point},setPoint2:function(){var t=l.read(arguments);this._segment2._point.set(t.x,t.y)},getHandle1:function(){return this._segment1._handleOut},setHandle1:function(){var t=l.read(arguments);this._segment1._handleOut.set(t.x,t.y)},getHandle2:function(){return this._segment2._handleIn},setHandle2:function(){var t=l.read(arguments);this._segment2._handleIn.set(t.x,t.y)},getSegment1:function(){return this._segment1},getSegment2:function(){return this._segment2},getPath:function(){return this._path},getIndex:function(){return this._segment1._index},getNext:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index+1]||this._path._closed&&t[0])||null},getPrevious:function(){var t=this._path&&this._path._curves;return t&&(t[this._segment1._index-1]||this._path._closed&&t[t.length-1])||null},isFirst:function(){return 0===this._segment1._index},isLast:function(){var t=this._path;return t&&this._segment1._index===t._curves.length-1||!1},isSelected:function(){return this.getPoint1().isSelected()&&this.getHandle2().isSelected()&&this.getHandle2().isSelected()&&this.getPoint2().isSelected()},setSelected:function(t){this.getPoint1().setSelected(t),this.getHandle1().setSelected(t),this.getHandle2().setSelected(t),this.getPoint2().setSelected(t)},getValues:function(t){return A.getValues(this._segment1,this._segment2,t)},getPoints:function(){for(var t=this.getValues(),e=[],n=0;8>n;n+=2)e.push(new l(t[n],t[n+1]));return e},getLength:function(){return null==this._length&&(this._length=A.getLength(this.getValues(),0,1)),this._length},getArea:function(){return A.getArea(this.getValues())},getLine:function(){return new v(this._segment1._point,this._segment2._point)},getPart:function(t,e){return new A(A.getPart(this.getValues(),t,e))},getPartLength:function(t,e){return A.getLength(this.getValues(),t,e)},getIntersections:function(t){return A._getIntersections(this.getValues(),t&&t!==this?t.getValues():null,this,t,[],{})},_getParameter:function(e,n){return n?e:e&&e.curve===this?e.parameter:e===t&&n===t?.5:this.getParameterAt(e,0)},divide:function(t,e,n){var i=this._getParameter(t,e),r=4e-7,s=1-r,a=null;if(i>=r&&s>=i){var o=A.subdivide(this.getValues(),i),h=o[0],u=o[1],c=n||this.hasHandles(),d=this._segment1,f=this._segment2,g=this._path;c&&(d._handleOut.set(h[2]-h[0],h[3]-h[1]),f._handleIn.set(u[4]-u[6],u[5]-u[7]));var _=h[6],p=h[7],v=new M(new l(_,p),c&&new l(h[4]-_,h[5]-p),c&&new l(u[2]-_,u[3]-p));g?(g.insert(d._index+1,v),a=this.getNext()):(this._segment2=v,a=new A(v,f))}return a},split:function(t,e){return this._path?this._path.split(this._segment1._index,this._getParameter(t,e)):null},reversed:function(){return new A(this._segment2.reversed(),this._segment1.reversed())},clearHandles:function(){this._segment1._handleOut.set(0,0),this._segment2._handleIn.set(0,0)},statics:{getValues:function(t,e,n){var i=t._point,r=t._handleOut,s=e._handleIn,a=e._point,o=[i._x,i._y,i._x+r._x,i._y+r._y,a._x+s._x,a._y+s._y,a._x,a._y];return n&&n._transformCoordinates(o,o,4),o},subdivide:function(e,n){var i=e[0],r=e[1],s=e[2],a=e[3],o=e[4],h=e[5],u=e[6],l=e[7];n===t&&(n=.5);var c=1-n,d=c*i+n*s,f=c*r+n*a,g=c*s+n*o,_=c*a+n*h,p=c*o+n*u,v=c*h+n*l,m=c*d+n*g,y=c*f+n*_,w=c*g+n*p,x=c*_+n*v,b=c*m+n*w,C=c*y+n*x;return[[i,r,d,f,m,y,b,C],[b,C,w,x,p,v,u,l]]},solveCubic:function(t,e,n,i,r,s){var a=t[e],o=t[e+2],u=t[e+4],l=t[e+6],c=3*(o-a),d=3*(u-o)-c,f=l-a-c-d;return h.solveCubic(f,d,c,a-n,i,r,s)},getParameterOf:function(t,e){var n=new l(t[0],t[1]),i=new l(t[6],t[7]),r=1e-12,s=e.isClose(n,r)?0:e.isClose(i,r)?1:null;if(null!==s)return s;for(var a=[e.x,e.y],o=[],h=2e-7,u=0;2>u;u++)for(var c=A.solveCubic(t,u,a[u],o,0,1),d=0;c>d;d++)if(s=o[d],e.isClose(A.getPoint(t,s),h))return s;return e.isClose(n,h)?0:e.isClose(i,h)?1:null},getNearestParameter:function(t,e){function n(n){if(n>=0&&1>=n){var i=e.getDistance(A.getPoint(t,n),!0);if(f>i)return f=i,g=n,!0}}if(A.isStraight(t)){var i=t[0],r=t[1],s=t[6],a=t[7],o=s-i,h=a-r,u=o*o+h*h;if(0===u)return 0;var c=((e.x-i)*o+(e.y-r)*h)/u;return 1e-12>c?0:c>.999999999999?1:A.getParameterOf(t,new l(i+c*o,r+c*h))}for(var d=100,f=1/0,g=0,_=0;d>=_;_++)n(_/d);for(var p=1/(2*d);p>4e-7;)n(g-p)||n(g+p)||(p/=2);return g},getPart:function(t,e,n){var i=e>n;if(i){var r=e;e=n,n=r}return e>0&&(t=A.subdivide(t,e)[1]),1>n&&(t=A.subdivide(t,(n-e)/(1-e))[0]),i?[t[6],t[7],t[4],t[5],t[2],t[3],t[0],t[1]]:t},hasHandles:function(t){var e=h.isZero;return!(e(t[0]-t[2])&&e(t[1]-t[3])&&e(t[4]-t[6])&&e(t[5]-t[7]))},isFlatEnough:function(t,e){var n=t[0],i=t[1],r=t[2],s=t[3],a=t[4],o=t[5],h=t[6],u=t[7],l=3*r-2*n-h,c=3*s-2*i-u,d=3*a-2*h-n,f=3*o-2*u-i;return Math.max(l*l,d*d)+Math.max(c*c,f*f)<10*e*e},getArea:function(t){var e=t[0],n=t[1],i=t[6],r=t[7],s=(t[2]+e)/2,a=(t[3]+n)/2,o=(t[4]+t[6])/2,h=(t[5]+t[7])/2;return 6*((e-s)*(a+n)+(s-o)*(h+a)+(o-i)*(r+h))/10},getBounds:function(t){for(var e=t.slice(0,2),n=e.slice(),i=[0,0],r=0;2>r;r++)A._addBounds(t[r],t[r+2],t[r+4],t[r+6],r,0,e,n,i);return new g(e[0],e[1],n[0]-e[0],n[1]-e[1])},_addBounds:function(t,e,n,i,r,s,a,o,u){function l(t,e){var n=t-e,i=t+e;n<a[r]&&(a[r]=n),i>o[r]&&(o[r]=i)}var c=3*(e-n)-t+i,d=2*(t+n)-4*e,f=e-t,g=h.solveQuadratic(c,d,f,u),_=4e-7,p=1-_;l(i,0);for(var v=0;g>v;v++){var m=u[v],y=1-m;m>_&&p>m&&l(y*y*y*t+3*y*y*m*e+3*y*m*m*n+m*m*m*i,s)}}}},n.each(["getBounds","getStrokeBounds","getHandleBounds","getRoughBounds"],function(t){this[t]=function(){this._bounds||(this._bounds={});var e=this._bounds[t];if(!e){var n=this._path;e=this._bounds[t]=T[t]([this._segment1,this._segment2],!1,n&&n.getStyle())}return e.clone()}},{}),n.each({isStraight:function(t,e,n){if(e.isZero()&&n.isZero())return!0;if(t.isZero())return!1;if(e.isCollinear(t)&&n.isCollinear(t)){var i=t.dot(t),r=t.dot(e)/i,s=t.dot(n)/i;return r>=0&&1>=r&&0>=s&&s>=-1}return!1},isLinear:function(t,e,n){var i=t.divide(3);return e.equals(i)&&n.negate().equals(i)}},function(t,e){this[e]=function(){var e=this._segment1,n=this._segment2;return t(n._point.subtract(e._point),e._handleOut,n._handleIn)},this.statics[e]=function(e){var n=e[0],i=e[1],r=e[6],s=e[7];return t(new l(r-n,s-i),new l(e[2]-n,e[3]-i),new l(e[4]-r,e[5]-s))}},{statics:{},hasHandles:function(){return!this._segment1._handleOut.isZero()||!this._segment2._handleIn.isZero()},isCollinear:function(t){return t&&this.isStraight()&&t.isStraight()&&this.getLine().isCollinear(t.getLine())},isHorizontal:function(){return this.isStraight()&&Math.abs(this.getTangentAt(.5,!0).y)<1e-7},isVertical:function(){return this.isStraight()&&Math.abs(this.getTangentAt(.5,!0).x)<1e-7}}),{beans:!1,getParameterAt:function(t,e){return A.getParameterAt(this.getValues(),t,e)},getParameterOf:function(){return A.getParameterOf(this.getValues(),l.read(arguments))},getLocationAt:function(t,e){var n=e?t:this.getParameterAt(t);return null!=n&&n>=0&&1>=n?new z(this,n):null},getLocationOf:function(){return this.getLocationAt(this.getParameterOf(l.read(arguments)),!0)},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getNearestLocation:function(){var t=l.read(arguments),e=this.getValues(),n=A.getNearestParameter(e,t),i=A.getPoint(e,n);return new z(this,n,i,null,t.getDistance(i))},getNearestPoint:function(){return this.getNearestLocation.apply(this,arguments).getPoint()}},new function(){var t=["getPoint","getTangent","getNormal","getWeightedTangent","getWeightedNormal","getCurvature"];return n.each(t,function(t){this[t+"At"]=function(e,n){var i=this.getValues();return A[t](i,n?e:A.getParameterAt(i,e,0))}},{statics:{evaluateMethods:t}})},new function(){function e(t){var e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],h=t[7],u=9*(i-s)+3*(o-e),l=6*(e+s)-12*i,c=3*(i-e),d=9*(r-a)+3*(h-n),f=6*(n+a)-12*r,g=3*(r-n);return function(t){var e=(u*t+l)*t+c,n=(d*t+f)*t+g;return Math.sqrt(e*e+n*n)}}function n(t,e){return Math.max(2,Math.min(16,Math.ceil(32*Math.abs(e-t))))}function i(t,e,n,i){if(null==e||0>e||e>1)return null;var r,s,a=t[0],o=t[1],h=t[2],u=t[3],c=t[4],d=t[5],f=t[6],g=t[7],_=4e-7,p=1-_;if(0===n&&(_>e||e>p)){var v=_>e;r=v?a:f,s=v?o:g}else{var m=3*(h-a),y=3*(c-h)-m,w=f-a-m-y,x=3*(u-o),b=3*(d-u)-x,C=g-o-x-b;if(0===n)r=((w*e+y)*e+m)*e+a,s=((C*e+b)*e+x)*e+o;else{if(_>e?(r=m,s=x):e>p?(r=3*(f-c),s=3*(g-d)):(r=(3*w*e+2*y)*e+m,s=(3*C*e+2*b)*e+x),i){0===r&&0===s&&(_>e||e>p)&&(r=c-h,s=d-u);var S=Math.sqrt(r*r+s*s);S&&(r/=S,s/=S)}if(3===n){var P=6*w*e+2*y,k=6*C*e+2*b,M=Math.pow(r*r+s*s,1.5);r=0!==M?(r*k-s*P)/M:0,s=0}}}return 2===n?new l(s,-r):new l(r,s)}return{statics:{getLength:function(i,r,s){if(r===t&&(r=0),s===t&&(s=1),0===r&&1===s&&A.isStraight(i)){var a=i[6]-i[0],o=i[7]-i[1];return Math.sqrt(a*a+o*o)}var u=e(i);return h.integrate(u,r,s,n(r,s))},getParameterAt:function(i,r,s){function a(t){return _+=h.integrate(d,s,t,n(s,t)),s=t,_-r}if(s===t&&(s=0>r?1:0),0===r)return s;var o=Math.abs,u=r>0,l=u?s:0,c=u?1:s,d=e(i),f=h.integrate(d,l,c,n(l,c));if(o(r-f)<1e-12)return u?c:l;if(o(r)>f)return null;var g=r/f,_=0;return h.findRoot(a,d,s+g,l,c,32,1e-12)},getPoint:function(t,e){return i(t,e,0,!1)},getTangent:function(t,e){return i(t,e,1,!0)},getWeightedTangent:function(t,e){return i(t,e,1,!1)},getNormal:function(t,e){return i(t,e,2,!0)},getWeightedNormal:function(t,e){return i(t,e,2,!1)},getCurvature:function(t,e){return i(t,e,3,!1).x}}}},new function(){function t(t,e,n,i,r,s,a,o,h,u,l){var c=e.startConnected,d=e.endConnected,f=4e-7,g=1-f;if(null==r&&(r=A.getParameterOf(n,s)),null!==r&&r>=(c?f:0)&&(d?g:1)>=r&&(null==h&&(h=A.getParameterOf(a,u)),null!==h&&h>=(d?f:0)&&(c?g:1)>=h)){var _=e.renormalize;if(_){var p=_(r,h);r=p[0],h=p[1]}var v=new z(i,r,s||A.getPoint(n,r),l),m=new z(o,h,u||A.getPoint(a,h),l),y=v.getPath()===m.getPath()&&v.getIndex()>m.getIndex(),w=y?m:v,x=e.include;v._intersection=m,m._intersection=v,(!x||x(w))&&z.insert(t,w,!0)}}function e(r,s,a,o,h,u,l,c,d,f,g,_,p){if(!(++p>=24)){var m,y,w=s[0],x=s[1],b=s[6],C=s[7],S=v.getSignedDistance,P=S(w,x,b,C,s[2],s[3]),k=S(w,x,b,C,s[4],s[5]),M=P*k>0?.75:4/9,I=M*Math.min(0,P,k),z=M*Math.max(0,P,k),O=S(w,x,b,C,r[0],r[1]),T=S(w,x,b,C,r[2],r[3]),E=S(w,x,b,C,r[4],r[5]),N=S(w,x,b,C,r[6],r[7]),L=n(O,T,E,N),j=L[0],D=L[1];if(null!=(m=i(j,D,I,z))&&null!=(y=i(j.reverse(),D.reverse(),I,z))){r=A.getPart(r,m,y);var R=y-m,B=l+(c-l)*m,F=l+(c-l)*y;if(g>.5&&R>.5)if(F-B>f-d){var V=A.subdivide(r,.5),q=B+(F-B)/2;e(s,V[0],o,a,h,u,d,f,B,q,R,!_,p),e(s,V[1],o,a,h,u,d,f,q,F,R,!_,p)}else{var V=A.subdivide(s,.5),q=d+(f-d)/2;e(V[0],r,o,a,h,u,d,q,B,F,R,!_,p),e(V[1],r,o,a,h,u,q,f,B,F,R,!_,p)}else if(Math.max(f-d,F-B)<1e-7){var H=B+(F-B)/2,Z=d+(f-d)/2;r=a.getValues(),s=o.getValues(),t(h,u,_?s:r,_?o:a,_?Z:H,null,_?r:s,_?a:o,_?H:Z,null)}else R>1e-12&&e(s,r,o,a,h,u,d,f,B,F,R,!_,p)}}}function n(t,e,n,i){var r,s=[0,t],a=[1/3,e],o=[2/3,n],h=[1,i],u=e-(2*t+i)/3,l=n-(t+2*i)/3;if(0>u*l)r=[[s,a,h],[s,o,h]];else{var c=u/l;r=[c>=2?[s,a,h]:.5>=c?[s,o,h]:[s,a,o,h],[s,h]]}return 0>(u||l)?r.reverse():r}function i(t,e,n,i){return t[0][1]<n?r(t,!0,n):e[0][1]>i?r(e,!1,i):t[0][0]}function r(t,e,n){for(var i=t[0][0],r=t[0][1],s=1,a=t.length;a>s;s++){var o=t[s][0],h=t[s][1];if(e?h>=n:n>=h)return h===n?o:i+(n-r)*(o-i)/(h-r);i=o,r=h}return null}function s(e,n,i,r,s,a){for(var o=A.isStraight(e),u=o?n:e,l=o?e:n,c=l[0],d=l[1],f=l[6],g=l[7],_=f-c,p=g-d,v=Math.atan2(-p,_),m=Math.sin(v),y=Math.cos(v),w=[],x=0;8>x;x+=2){var b=u[x]-c,C=u[x+1]-d;w.push(b*y-C*m,b*m+C*y)}for(var S=[],P=A.solveCubic(w,1,0,S,0,1),x=0;P>x;x++){var k=S[x],M=A.getPoint(u,k),I=A.getParameterOf(l,M);if(null!==I){var z=A.getPoint(l,I),O=o?I:k,T=o?k:I;(!a.endConnected||T>h.CURVETIME_EPSILON)&&t(s,a,e,i,O,o?z:M,n,r,T,o?M:z)}}}function a(e,n,i,r,s,a){var o=v.intersect(e[0],e[1],e[6],e[7],n[0],n[1],n[6],n[7]);o&&t(s,a,e,i,null,o,n,r,null,o)}return{statics:{_getIntersections:function(n,i,r,o,h,u){if(!i)return A._getSelfIntersection(n,r,h,u);var c=n[0],d=n[1],f=n[6],g=n[7],_=i[0],p=i[1],v=i[6],m=i[7],y=(3*n[2]+c)/4,w=(3*n[3]+d)/4,x=(3*n[4]+f)/4,b=(3*n[5]+g)/4,C=(3*i[2]+_)/4,S=(3*i[3]+p)/4,P=(3*i[4]+v)/4,k=(3*i[5]+m)/4,M=Math.min,I=Math.max;if(!(I(c,y,x,f)>=M(_,C,P,v)&&M(c,y,x,f)<=I(_,C,P,v)&&I(d,w,b,g)>=M(p,S,k,m)&&M(d,w,b,g)<=I(p,S,k,m)))return h;if(!u.startConnected&&!u.endConnected){var z=A.getOverlaps(n,i);if(z){for(var O=0;2>O;O++){var T=z[O];t(h,u,n,r,T[0],null,i,o,T[1],null,!0)}return h}}var E=A.isStraight(n),N=A.isStraight(i),L=E&&N,j=1e-12,D=h.length;if((L?a:E||N?s:e)(n,i,r,o,h,u,0,1,0,1,0,!1,0),L&&h.length>D)return h;var R=new l(c,d),B=new l(f,g),F=new l(_,p),V=new l(v,m);return R.isClose(F,j)&&t(h,u,n,r,0,R,i,o,0,F),!u.startConnected&&R.isClose(V,j)&&t(h,u,n,r,0,R,i,o,1,V),!u.endConnected&&B.isClose(F,j)&&t(h,u,n,r,1,B,i,o,0,F),B.isClose(V,j)&&t(h,u,n,r,1,B,i,o,1,V),h},_getSelfIntersection:function(t,e,n,i){var r=t[0],s=t[1],a=t[2],o=t[3],u=t[4],c=t[5],d=t[6],f=t[7],g=new v(r,s,d,f,!1),_=g.getSide(new l(a,o),!0),p=g.getSide(new l(u,c),!0);if(_===p){var m=(r-u)*(o-f)+(a-d)*(c-s);if(m*_>0)return n}var y=d-3*u+3*a-r,w=u-2*a+r,x=a-r,b=f-3*c+3*o-s,C=c-2*o+s,S=o-s,P=b*x-y*S,k=b*w-y*C,M=C*x-w*S;if(0>P*P-4*k*M){var I,z=[],O=h.solveCubic(y*y+b*b,3*(y*w+b*C),2*(w*w+C*C)+y*x+b*S,w*x+C*S,z,0,1);if(O>0){for(var T=0,E=0;O>T;T++){var N=Math.abs(e.getCurvatureAt(z[T],!0));N>E&&(E=N,I=z[T])}var L=A.subdivide(t,I);i.endConnected=!0,i.renormalize=function(t,e){return[t*I,e*(1-I)+I]},A._getIntersections(L[0],L[1],e,e,n,i)}}return n},getOverlaps:function(t,e){function n(t){var e=t[6]-t[0],n=t[7]-t[1];return e*e+n*n}var i=Math.abs,r=4e-7,s=2e-7,a=A.isStraight(t),o=A.isStraight(e),h=a&&o;if(h){var u=n(t)<n(e),c=u?e:t,d=u?t:e,f=new v(c[0],c[1],c[6],c[7]);if(f.getDistance(new l(d[0],d[1]))>s||f.getDistance(new l(d[6],d[7]))>s)return null}else if(a^o)return null;for(var g=[t,e],_=[],p=0,m=0;2>p&&_.length<2;p+=0===m?0:1,m=1^m){var y=A.getParameterOf(g[1^p],new l(g[p][0===m?0:6],g[p][0===m?1:7]));if(null!=y){var w=0===p?[m,y]:[y,m];(0===_.length||i(w[0]-_[0][0])>r&&i(w[1]-_[0][1])>r)&&_.push(w)}if(1===p&&0===_.length)break}if(2!==_.length)_=null;else if(!h){var x=A.getPart(t,_[0][0],_[1][0]),b=A.getPart(e,_[0][1],_[1][1]);
(i(b[2]-x[2])>s||i(b[3]-x[3])>s||i(b[4]-x[4])>s||i(b[5]-x[5])>s)&&(_=null)}return _}}}}),z=n.extend({_class:"CurveLocation",beans:!0,initialize:function vt(t,e,n,i,r){if(e>.9999996){var s=t.getNext();s&&(e=0,t=s)}this._id=u.get(vt),this._setCurve(t),this._parameter=e,this._point=n||t.getPointAt(e,!0),this._overlap=i,this._distance=r,this._intersection=this._next=this._prev=null},_setCurve:function(t){var e=t._path;this._version=e?e._version:0,this._curve=t,this._segment=null,this._segment1=t._segment1,this._segment2=t._segment2},_setSegment:function(t){this._setCurve(t.getCurve()),this._segment=t,this._parameter=t===this._segment1?0:1,this._point=t._point.clone()},getSegment:function(){var t=this.getCurve(),e=this._segment;if(!e){var n=this.getParameter();0===n?e=t._segment1:1===n?e=t._segment2:null!=n&&(e=t.getPartLength(0,n)<t.getPartLength(n,1)?t._segment1:t._segment2),this._segment=e}return e},getCurve:function(){function t(t){var e=t&&t.getCurve();return e&&null!=(i._parameter=e.getParameterOf(i._point))?(i._setCurve(e),i._segment=t,e):void 0}var e=this._curve,n=e&&e._path,i=this;return n&&n._version!==this._version&&(e=this._parameter=this._curve=this._offset=null),e||t(this._segment)||t(this._segment1)||t(this._segment2.getPrevious())},getPath:function(){var t=this.getCurve();return t&&t._path},getIndex:function(){var t=this.getCurve();return t&&t.getIndex()},getParameter:function(){var t=this.getCurve(),e=this._parameter;return t&&null==e?this._parameter=t.getParameterOf(this._point):e},getPoint:function(){return this._point},getOffset:function(){var t=this._offset;if(null==t){t=0;var e=this.getPath(),n=this.getIndex();if(e&&null!=n)for(var i=e.getCurves(),r=0;n>r;r++)t+=i[r].getLength();this._offset=t+=this.getCurveOffset()}return t},getCurveOffset:function(){var t=this.getCurve(),e=this.getParameter();return null!=e&&t&&t.getPartLength(0,e)},getIntersection:function(){return this._intersection},getDistance:function(){return this._distance},divide:function(){var t=this.getCurve(),e=null;return t&&(e=t.divide(this.getParameter(),!0),e&&this._setSegment(e._segment1)),e},split:function(){var t=this.getCurve();return t?t.split(this.getParameter(),!0):null},equals:function(t,e){var n=this===t,i=2e-7;if(!n&&t instanceof z&&this.getPath()===t.getPath()&&this.getPoint().isClose(t.getPoint(),i)){var r=this.getCurve(),s=t.getCurve(),a=Math.abs,o=a((r.isLast()&&s.isFirst()?-1:r.getIndex())+this.getParameter()-((s.isLast()&&r.isFirst()?-1:s.getIndex())+t.getParameter()));n=(4e-7>o||(o=a(this.getOffset()-t.getOffset()))<i||a(this.getPath().getLength()-o)<i)&&(e||!this._intersection&&!t._intersection||this._intersection&&this._intersection.equals(t._intersection,!0))}return n},toString:function(){var t=[],e=this.getPoint(),n=o.instance;e&&t.push("point: "+e);var i=this.getIndex();null!=i&&t.push("index: "+i);var r=this.getParameter();return null!=r&&t.push("parameter: "+n.number(r)),null!=this._distance&&t.push("distance: "+n.number(this._distance)),"{ "+t.join(", ")+" }"},isTouching:function(){var t=this._intersection;if(t&&this.getTangent().isCollinear(t.getTangent())){var e=this.getCurve(),n=t.getCurve();return!(e.isStraight()&&n.isStraight()&&e.getLine().intersect(n.getLine()))}return!1},isCrossing:function(){function t(t,e,n){return n>e?t>e&&n>t:t>e&&l>=t||t>=-l&&n>t}var e=this._intersection;if(!e)return!1;var n=this.getParameter(),i=e.getParameter(),r=4e-7,s=1-r;if(n>=r&&s>=n||i>=r&&s>=i)return!this.isTouching();var a=this.getCurve(),o=a.getPrevious(),h=e.getCurve(),u=h.getPrevious(),l=Math.PI;if(!o||!u)return!1;var c=o.getTangentAt(s,!0).negate().getAngleInRadians(),d=a.getTangentAt(r,!0).getAngleInRadians(),f=u.getTangentAt(s,!0).negate().getAngleInRadians(),g=h.getTangentAt(r,!0).getAngleInRadians();return t(f,c,d)^t(g,c,d)&&t(f,d,c)^t(g,d,c)},isOverlap:function(){return!!this._overlap}},n.each(A.evaluateMethods,function(t){var e=t+"At";this[t]=function(){var t=this.getParameter(),n=this.getCurve();return null!=t&&n&&n[e](t,!0)}},{preserve:!0}),new function(){function t(t,e,n){function i(n,i){for(var s=n+i;s>=-1&&r>=s;s+=i){var a=t[(s%r+r)%r];if(!e.getPoint().isClose(a.getPoint(),2e-7))break;if(e.equals(a))return a}return null}for(var r=t.length,s=0,a=r-1;a>=s;){var o,h=s+a>>>1,u=t[h];if(n&&(o=e.equals(u)?u:i(h,-1)||i(h,1)))return e._overlap&&(o._overlap=o._intersection._overlap=!0),o;var l=e.getPath(),c=u.getPath(),d=l===c?e.getIndex()+e.getParameter()-(u.getIndex()+u.getParameter()):l._id-c._id;0>d?a=h-1:s=h+1}return t.splice(s,0,e),e}return{statics:{insert:t,expand:function(e){for(var n=e.slice(),i=0,r=e.length;r>i;i++)t(n,e[i]._intersection,!1);return n}}}}),O=w.extend({_class:"PathItem",initialize:function(){},getIntersections:function(t,e,n,i){var r=this===t||!t,s=this._matrix.orNullIfIdentity(),a=r?s:(n||t._matrix).orNullIfIdentity();if(!r&&!this.getBounds(s).touches(t.getBounds(a)))return[];for(var o,t,h=this.getCurves(),u=r?h:t.getCurves(),l=h.length,c=r?l:u.length,d=[],f=[],g=0;c>g;g++)d[g]=u[g].getValues(a);for(var g=0;l>g;g++){var _=h[g],p=r?d[g]:_.getValues(s),v=_.getPath();v!==t&&(t=v,o=[],f.push(o)),r&&A._getSelfIntersection(p,_,o,{include:e,startConnected:1===l&&_.getPoint1().equals(_.getPoint2())});for(var m=r?g+1:0;c>m;m++){if(i&&o.length)return o;var y=u[m];A._getIntersections(p,d[m],_,y,o,{include:e,startConnected:r&&_.getPrevious()===y,endConnected:r&&_.getNext()===y})}}o=[];for(var g=0,w=f.length;w>g;g++)o.push.apply(o,f[g]);return o},getCrossings:function(t){return this.getIntersections(t,function(t){return t.isCrossing()})},_asPathItem:function(){return this},setPathData:function(t){function e(t,e){var n=+i[t];return o&&(n+=h[e]),n}function n(t){return new l(e(t,"x"),e(t+1,"y"))}var i,r,s,a=t.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/gi),o=!1,h=new l,u=new l;this.clear();for(var c=0,f=a&&a.length;f>c;c++){var g=a[c],_=g[0],p=_.toLowerCase();i=g.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g);var v=i&&i.length;switch(o=_===p,"z"!==r||/[mz]/.test(p)||this.moveTo(h=u),p){case"m":case"l":for(var m="m"===p,y=0;v>y;y+=2)this[0===y&&m?"moveTo":"lineTo"](h=n(y));s=h,m&&(u=h);break;case"h":case"v":for(var w="h"===p?"x":"y",y=0;v>y;y++)h[w]=e(y,w),this.lineTo(h);s=h;break;case"c":for(var y=0;v>y;y+=6)this.cubicCurveTo(n(y),s=n(y+2),h=n(y+4));break;case"s":for(var y=0;v>y;y+=4)this.cubicCurveTo(/[cs]/.test(r)?h.multiply(2).subtract(s):h,s=n(y),h=n(y+2)),r=p;break;case"q":for(var y=0;v>y;y+=4)this.quadraticCurveTo(s=n(y),h=n(y+2));break;case"t":for(var y=0;v>y;y+=2)this.quadraticCurveTo(s=/[qt]/.test(r)?h.multiply(2).subtract(s):h,h=n(y)),r=p;break;case"a":for(var y=0;v>y;y+=7)this.arcTo(h=n(y+5),new d(+i[y],+i[y+1]),+i[y+2],+i[y+4],+i[y+3]);break;case"z":this.closePath(!0)}r=p}},_canComposite:function(){return!(this.hasFill()&&this.hasStroke())},_contains:function(t){var e=this._getWinding(t,!1,!0);return!!("evenodd"===this.getWindingRule()?1&e:e)}}),T=O.extend({_class:"Path",_serializeFields:{segments:[],closed:!1},initialize:function(e){this._closed=!1,this._segments=[],this._version=0;var n=Array.isArray(e)?"object"==typeof e[0]?e:arguments:!e||e.size!==t||e.x===t&&e.point===t?null:arguments;n&&n.length>0?this.setSegments(n):(this._curves=t,this._selectedSegmentState=0,n||"string"!=typeof e||(this.setPathData(e),e=null)),this._initialize(!n&&e)},_equals:function(t){return this._closed===t._closed&&n.equals(this._segments,t._segments)},clone:function(e){var n=new T(w.NO_INSERT);return n.setSegments(this._segments),n._closed=this._closed,this._clockwise!==t&&(n._clockwise=this._clockwise),this._clone(n,e)},_changed:function mt(e){if(mt.base.call(this,e),8&e){var n=this._parent;if(n&&(n._currentPath=t),this._length=this._area=this._clockwise=this._monoCurves=t,16&e)this._version++;else if(this._curves)for(var i=0,r=this._curves.length;r>i;i++)this._curves[i]._changed()}else 32&e&&(this._bounds=t)},getStyle:function(){var t=this._parent;return(t instanceof E?t:this)._style},getSegments:function(){return this._segments},setSegments:function(e){var n=this.isFullySelected();this._segments.length=0,this._selectedSegmentState=0,this._curves=t,e&&e.length>0&&this._add(M.readAll(e)),n&&this.setFullySelected(!0)},getFirstSegment:function(){return this._segments[0]},getLastSegment:function(){return this._segments[this._segments.length-1]},getCurves:function(){var t=this._curves,e=this._segments;if(!t){var n=this._countCurves();t=this._curves=new Array(n);for(var i=0;n>i;i++)t[i]=new A(this,e[i],e[i+1]||e[0])}return t},getFirstCurve:function(){return this.getCurves()[0]},getLastCurve:function(){var t=this.getCurves();return t[t.length-1]},isClosed:function(){return this._closed},setClosed:function(t){if(this._closed!=(t=!!t)){if(this._closed=t,this._curves){var e=this._curves.length=this._countCurves();t&&(this._curves[e-1]=new A(this,this._segments[e-1],this._segments[0]))}this._changed(25)}}},{beans:!0,getPathData:function(t,e){function n(e,n){e._transformCoordinates(t,_,!1),i=_[0],r=_[1],p?(v.push("M"+g.pair(i,r)),p=!1):(h=_[2],u=_[3],h===i&&u===r&&l===s&&c===a?n||v.push("l"+g.pair(i-s,r-a)):v.push("c"+g.pair(l-s,c-a)+" "+g.pair(h-s,u-a)+" "+g.pair(i-s,r-a))),s=i,a=r,l=_[4],c=_[5]}var i,r,s,a,h,u,l,c,d=this._segments,f=d.length,g=new o(e),_=new Array(6),p=!0,v=[];if(0===f)return"";for(var m=0;f>m;m++)n(d[m]);return this._closed&&f>0&&(n(d[0],!0),v.push("z")),v.join("")}},{isEmpty:function(){return 0===this._segments.length},_transformContent:function(t){for(var e=new Array(6),n=0,i=this._segments.length;i>n;n++)this._segments[n]._transformCoordinates(t,e,!0);return!0},_add:function(t,e){for(var n=this._segments,i=this._curves,r=t.length,s=null==e,e=s?n.length:e,a=0;r>a;a++){var o=t[a];o._path&&(o=t[a]=o.clone()),o._path=this,o._index=e+a,o._selectionState&&this._updateSelection(o,0,o._selectionState)}if(s)n.push.apply(n,t);else{n.splice.apply(n,[e,0].concat(t));for(var a=e+r,h=n.length;h>a;a++)n[a]._index=a}if(i){var u=this._countCurves(),l=e+r-1===u?e-1:e,c=l,d=Math.min(l+r,u);t._curves&&(i.splice.apply(i,[l,0].concat(t._curves)),c+=t._curves.length);for(var a=c;d>a;a++)i.splice(a,0,new A(this,null,null));this._adjustCurves(l,d)}return this._changed(25),t},_adjustCurves:function(t,e){for(var n,i=this._segments,r=this._curves,s=t;e>s;s++)n=r[s],n._path=this,n._segment1=i[s],n._segment2=i[s+1]||i[0],n._changed();(n=r[this._closed&&0===t?i.length-1:t-1])&&(n._segment2=i[t]||i[0],n._changed()),(n=r[e])&&(n._segment1=i[e],n._changed())},_countCurves:function(){var t=this._segments.length;return!this._closed&&t>0?t-1:t},add:function(t){return arguments.length>1&&"number"!=typeof t?this._add(M.readAll(arguments)):this._add([M.read(arguments)])[0]},insert:function(t,e){return arguments.length>2&&"number"!=typeof e?this._add(M.readAll(arguments,1),t):this._add([M.read(arguments,1)],t)[0]},addSegment:function(){return this._add([M.read(arguments)])[0]},insertSegment:function(t){return this._add([M.read(arguments,1)],t)[0]},addSegments:function(t){return this._add(M.readAll(t))},insertSegments:function(t,e){return this._add(M.readAll(e),t)},removeSegment:function(t){return this.removeSegments(t,t+1)[0]||null},removeSegments:function(t,e,i){t=t||0,e=n.pick(e,this._segments.length);var r=this._segments,s=this._curves,a=r.length,o=r.splice(t,e-t),h=o.length;if(!h)return o;for(var u=0;h>u;u++){var l=o[u];l._selectionState&&this._updateSelection(l,l._selectionState,0),l._index=l._path=null}for(var u=t,c=r.length;c>u;u++)r[u]._index=u;if(s){var d=t>0&&e===a+(this._closed?1:0)?t-1:t,s=s.splice(d,h);i&&(o._curves=s.slice(1)),this._adjustCurves(d,d)}return this._changed(25),o},clear:"#removeSegments",hasHandles:function(){for(var t=this._segments,e=0,n=t.length;n>e;e++)if(t[e].hasHandles())return!0;return!1},clearHandles:function(){for(var t=this._segments,e=0,n=t.length;n>e;e++)t[e].clearHandles()},getLength:function(){if(null==this._length){for(var t=this.getCurves(),e=0,n=0,i=t.length;i>n;n++)e+=t[n].getLength();this._length=e}return this._length},getArea:function(){if(null==this._area){for(var t=this._segments,e=t.length,n=e-1,i=0,r=0,s=this._closed?e:n;s>r;r++)i+=A.getArea(A.getValues(t[r],t[n>r?r+1:0]));this._area=i}return this._area},isClockwise:function(){return this._clockwise!==t?this._clockwise:this.getArea()>=0},setClockwise:function(t){this.isClockwise()!=(t=!!t)&&this.reverse(),this._clockwise=t},isFullySelected:function(){var t=this._segments.length;return this._selected&&t>0&&this._selectedSegmentState===7*t},setFullySelected:function(t){t&&this._selectSegments(!0),this.setSelected(t)},setSelected:function yt(t){t||this._selectSegments(!1),yt.base.call(this,t)},_selectSegments:function(t){var e=this._segments.length;this._selectedSegmentState=t?7*e:0;for(var n=0;e>n;n++)this._segments[n]._selectionState=t?7:0},_updateSelection:function(t,e,n){t._selectionState=n;var i=this._selectedSegmentState+=n-e;i>0&&this.setSelected(!0)},flatten:function(t){for(var e=new N(this,64,.1),n=0,i=e.length/Math.ceil(e.length/t),r=e.length+(this._closed?-i:i)/2,s=[];r>=n;)s.push(new M(e.getPointAt(n))),n+=i;this.setSegments(s)},reduce:function(){for(var t=this.getCurves(),e=t.length-1;e>=0;e--){var n=t[e];n.hasHandles()||0!==n.getLength()&&!n.isCollinear(n.getNext())||n.remove()}return this},simplify:function(t){if(this._segments.length>2){var e=new L(this,t||2.5);this.setSegments(e.fit())}},split:function(t,e){if(null===e)return null;if(1===arguments.length){var n=t;if("number"==typeof n&&(n=this.getLocationAt(n)),!n)return null;t=n.index,e=n.parameter}var i=4e-7,r=1-i;e>=r&&(t++,e--);var s=this.getCurves();if(t>=0&&t<s.length){e>=i&&s[t++].divide(e,!0);var a,o=this.removeSegments(t,this._segments.length,!0);return this._closed?(this.setClosed(!1),a=this):(a=new T(w.NO_INSERT),a.insertAbove(this,!0),this._clone(a)),a._add(o,0),this.addSegment(o[0]),a}return null},reverse:function(){this._segments.reverse();for(var e=0,n=this._segments.length;n>e;e++){var i=this._segments[e],r=i._handleIn;i._handleIn=i._handleOut,i._handleOut=r,i._index=e}this._curves=null,this._clockwise!==t&&(this._clockwise=!this._clockwise),this._changed(9)},join:function(t){if(t){var e=t._segments,n=this.getLastSegment(),i=t.getLastSegment();if(!i)return this;n&&n._point.equals(i._point)&&t.reverse();var r=t.getFirstSegment();if(n&&n._point.equals(r._point))n.setHandleOut(r._handleOut),this._add(e.slice(1));else{var s=this.getFirstSegment();s&&s._point.equals(r._point)&&t.reverse(),i=t.getLastSegment(),s&&s._point.equals(i._point)?(s.setHandleIn(i._handleIn),this._add(e.slice(0,e.length-1),0)):this._add(e.slice())}t._closed&&this._add([e[0]]),t.remove()}var a=this.getFirstSegment(),o=this.getLastSegment();return a!==o&&a._point.equals(o._point)&&(a.setHandleIn(o._handleIn),o.remove(),this.setClosed(!0)),this},toShape:function(t){function e(t,e){var n=l[t],i=n.getNext(),r=l[e],s=r.getNext();return n._handleOut.isZero()&&i._handleIn.isZero()&&r._handleOut.isZero()&&s._handleIn.isZero()&&i._point.subtract(n._point).isCollinear(s._point.subtract(r._point))}function n(t){var e=l[t],n=e.getPrevious(),i=e.getNext();return n._handleOut.isZero()&&e._handleIn.isZero()&&e._handleOut.isZero()&&i._handleIn.isZero()&&e._point.subtract(n._point).isOrthogonal(i._point.subtract(e._point))}function i(t){var e=l[t],n=e.getNext(),i=e._handleOut,r=n._handleIn,s=.5522847498307936;if(i.isOrthogonal(r)){var a=e._point,o=n._point,u=new v(a,i,!0).intersect(new v(o,r,!0),!0);return u&&h.isZero(i.getLength()/u.subtract(a).getLength()-s)&&h.isZero(r.getLength()/u.subtract(o).getLength()-s)}return!1}function r(t,e){return l[t]._point.getDistance(l[e]._point)}if(!this._closed)return null;var s,a,o,u,l=this._segments;if(!this.hasHandles()&&4===l.length&&e(0,2)&&e(1,3)&&n(1)?(s=C.Rectangle,a=new d(r(0,3),r(0,1)),u=l[1]._point.add(l[2]._point).divide(2)):8===l.length&&i(0)&&i(2)&&i(4)&&i(6)&&e(1,5)&&e(3,7)?(s=C.Rectangle,a=new d(r(1,6),r(0,3)),o=a.subtract(new d(r(0,7),r(1,2))).divide(2),u=l[3]._point.add(l[4]._point).divide(2)):4===l.length&&i(0)&&i(1)&&i(2)&&i(3)&&(h.isZero(r(0,2)-r(1,3))?(s=C.Circle,o=r(0,2)/2):(s=C.Ellipse,o=new d(r(2,0)/2,r(3,1)/2)),u=l[1]._point),s){var c=this.getPosition(!0),f=this._clone(new s({center:c,size:a,radius:o,insert:!1}),t,!1);return f.rotate(u.subtract(c).getAngle()+90),f}return null},_hitTestSelf:function(t,e){function n(e,n){return t.subtract(e).divide(n).length<=1}function i(t,i,r){if(!e.selected||i.isSelected()){var s=t._point;if(i!==s&&(i=i.add(s)),n(i,w))return new k(r,g,{segment:t,point:i})}}function r(t,n){return(n||e.segments)&&i(t,t._point,"segment")||!n&&e.handles&&(i(t,t._handleIn,"handle-in")||i(t,t._handleOut,"handle-out"))}function s(t){c.add(t)}function a(e){if(("round"!==o||"round"!==h)&&(c=new T({internal:!0,closed:!0}),m||e._index>0&&e._index<v-1?"round"!==o&&(e._handleIn.isZero()||e._handleOut.isZero())&&T._addBevelJoin(e,o,S,u,s,!0):"round"!==h&&T._addSquareCap(e,h,S,s,!0),!c.isEmpty())){var i;return c.contains(t)||(i=c.getNearestLocation(t))&&n(i.getPoint(),y)}return n(e._point,w)}var o,h,u,c,d,f,g=this,_=this.getStyle(),p=this._segments,v=p.length,m=this._closed,y=e._tolerancePadding,w=y,x=e.stroke&&_.hasStroke(),b=e.fill&&_.hasFill(),C=e.curves,S=x?_.getStrokeWidth()/2:b&&e.tolerance>0||C?0:null;if(null!==S&&(S>0?(o=_.getStrokeJoin(),h=_.getStrokeCap(),u=S*_.getMiterLimit(),w=y.add(new l(S,S))):o=h="round"),!e.ends||e.segments||m){if(e.segments||e.handles)for(var P=0;v>P;P++)if(f=r(p[P]))return f}else if(f=r(p[0],!0)||r(p[v-1],!0))return f;if(null!==S){if(d=this.getNearestLocation(t)){var M=d.getParameter();0===M||1===M&&v>1?a(d.getSegment())||(d=null):n(d.getPoint(),w)||(d=null)}if(!d&&"miter"===o&&v>1)for(var P=0;v>P;P++){var I=p[P];if(t.getDistance(I._point)<=u&&a(I)){d=I.getLocation();break}}}return!d&&b&&this._contains(t)||d&&!x&&!C?new k("fill",this):d?new k(x?"stroke":"curve",this,{location:d,point:d.getPoint()}):null}},n.each(A.evaluateMethods,function(t){this[t+"At"]=function(e,n){var i=this.getLocationAt(e,n);return i&&i[t]()}},{beans:!1,getLocationOf:function(){for(var t=l.read(arguments),e=this.getCurves(),n=0,i=e.length;i>n;n++){var r=e[n].getLocationOf(t);if(r)return r}return null},getOffsetOf:function(){var t=this.getLocationOf.apply(this,arguments);return t?t.getOffset():null},getLocationAt:function(t,e){var n=this.getCurves(),i=0;if(e){var r=~~t,s=n[r];return s?s.getLocationAt(t-r,!0):null}for(var a=0,o=n.length;o>a;a++){var h=i,s=n[a];if(i+=s.getLength(),i>t)return s.getLocationAt(t-h)}return n.length>0&&t<=this.getLength()?new z(n[n.length-1],1):null},getNearestLocation:function(){for(var t=l.read(arguments),e=this.getCurves(),n=1/0,i=null,r=0,s=e.length;s>r;r++){var a=e[r].getNearestLocation(t);a._distance<n&&(n=a._distance,i=a)}return i},getNearestPoint:function(){return this.getNearestLocation.apply(this,arguments).getPoint()}}),new function(){function t(t,e,n,i){function r(e){var n=a[e],i=a[e+1];(c!=n||d!=i)&&(t.beginPath(),t.moveTo(c,d),t.lineTo(n,i),t.stroke(),t.beginPath(),t.arc(n,i,s,0,2*Math.PI,!0),t.fill())}for(var s=i/2,a=new Array(6),o=0,h=e.length;h>o;o++){var u=e[o];u._transformCoordinates(n,a,!1);var l=u._selectionState,c=a[0],d=a[1];if(1&l&&r(2),2&l&&r(4),t.fillRect(c-s,d-s,i,i),!(4&l)){var f=t.fillStyle;t.fillStyle="#ffffff",t.fillRect(c-s+1,d-s+1,i-2,i-2),t.fillStyle=f}}}function e(t,e,n){function i(e){if(n)e._transformCoordinates(n,g,!1),r=g[0],s=g[1];else{var i=e._point;r=i._x,s=i._y}if(_)t.moveTo(r,s),_=!1;else{if(n)h=g[2],u=g[3];else{var d=e._handleIn;h=r+d._x,u=s+d._y}h===r&&u===s&&l===a&&c===o?t.lineTo(r,s):t.bezierCurveTo(l,c,h,u,r,s)}if(a=r,o=s,n)l=g[4],c=g[5];else{var d=e._handleOut;l=a+d._x,c=o+d._y}}for(var r,s,a,o,h,u,l,c,d=e._segments,f=d.length,g=new Array(6),_=!0,p=0;f>p;p++)i(d[p]);e._closed&&f>0&&i(d[0])}return{_draw:function(t,n,r){function s(t){return c[(t%d+d)%d]}var a=n.dontStart,o=n.dontFinish||n.clip,h=this.getStyle(),u=h.hasFill(),l=h.hasStroke(),c=h.getDashArray(),d=!i.support.nativeDash&&l&&c&&c.length;if(a||t.beginPath(),!a&&this._currentPath?t.currentPath=this._currentPath:(u||l&&!d||o)&&(e(t,this,r),this._closed&&t.closePath(),a||(this._currentPath=t.currentPath)),!o&&(u||l)&&(this._setStyles(t),u&&(t.fill(h.getWindingRule()),t.shadowColor="rgba(0,0,0,0)"),l)){if(d){a||t.beginPath();var f,g=new N(this,32,.25,r),_=g.length,p=-h.getDashOffset(),v=0;for(p%=_;p>0;)p-=s(v--)+s(v--);for(;_>p;)f=p+s(v++),(p>0||f>0)&&g.drawPart(t,Math.max(p,0),Math.max(f,0)),p=f+s(v++)}t.stroke()}},_drawSelected:function(n,r){n.beginPath(),e(n,this,r),n.stroke(),t(n,this._segments,r,i.settings.handleSize)}}},new function(){function t(t){var e=t.length,n=[],i=[],r=2;n[0]=t[0]/r;for(var s=1;e>s;s++)i[s]=1/r,r=(e-1>s?4:2)-i[s],n[s]=(t[s]-n[s-1])/r;for(var s=1;e>s;s++)n[e-s-1]-=i[e-s]*n[e-s];return n}return{smooth:function(){var e=this._segments,n=e.length,i=this._closed,r=n,s=0;if(!(2>=n)){i&&(s=Math.min(n,4),r+=2*Math.min(n,s));for(var a=[],o=0;n>o;o++)a[o+s]=e[o]._point;if(i)for(var o=0;s>o;o++)a[o]=e[o+n-s]._point,a[o+n+s]=e[o]._point;else r--;for(var h=[],o=1;r-1>o;o++)h[o]=4*a[o]._x+2*a[o+1]._x;h[0]=a[0]._x+2*a[1]._x,h[r-1]=3*a[r-1]._x;for(var u=t(h),o=1;r-1>o;o++)h[o]=4*a[o]._y+2*a[o+1]._y;h[0]=a[0]._y+2*a[1]._y,h[r-1]=3*a[r-1]._y;var c=t(h);if(i){for(var o=0,d=n;s>o;o++,d++){var f=o/s,g=1-f,_=o+s,p=d+s;u[d]=u[o]*f+u[d]*g,c[d]=c[o]*f+c[d]*g,u[p]=u[_]*g+u[p]*f,c[p]=c[_]*g+c[p]*f}r--}for(var v=null,o=s;r-s>=o;o++){var m=e[o-s];v&&m.setHandleIn(v.subtract(m._point)),r>o&&(m.setHandleOut(new l(u[o],c[o]).subtract(m._point)),v=r-1>o?new l(2*a[o+1]._x-u[o+1],2*a[o+1]._y-c[o+1]):new l((a[r]._x+u[r-1])/2,(a[r]._y+c[r-1])/2))}if(i&&v){var m=this._segments[0];m.setHandleIn(v.subtract(m._point))}}}}},new function(){function t(t){var e=t._segments;if(0===e.length)throw new Error("Use a moveTo() command first");return e[e.length-1]}return{moveTo:function(){var t=this._segments;1===t.length&&this.removeSegment(0),t.length||this._add([new M(l.read(arguments))])},moveBy:function(){throw new Error("moveBy() is unsupported on Path items.")},lineTo:function(){this._add([new M(l.read(arguments))])},cubicCurveTo:function(){var e=l.read(arguments),n=l.read(arguments),i=l.read(arguments),r=t(this);r.setHandleOut(e.subtract(r._point)),this._add([new M(i,n.subtract(i))])},quadraticCurveTo:function(){var e=l.read(arguments),n=l.read(arguments),i=t(this)._point;this.cubicCurveTo(e.add(i.subtract(e).multiply(1/3)),e.add(n.subtract(e).multiply(1/3)),n)},curveTo:function(){var e=l.read(arguments),i=l.read(arguments),r=n.pick(n.read(arguments),.5),s=1-r,a=t(this)._point,o=e.subtract(a.multiply(s*s)).subtract(i.multiply(r*r)).divide(2*r*s);if(o.isNaN())throw new Error("Cannot put a curve through points with parameter = "+r);this.quadraticCurveTo(o,i)},arcTo:function(){var e,i,r,s,a,o=t(this),h=o._point,u=l.read(arguments),c=n.peek(arguments),f=n.pick(c,!0);if("boolean"==typeof f)var g=h.add(u).divide(2),e=g.add(g.subtract(h).rotate(f?-90:90));else if(n.remain(arguments)<=2)e=u,u=l.read(arguments);else{var _=d.read(arguments);if(_.isZero())return this.lineTo(u);var m=n.read(arguments),f=!!n.read(arguments),y=!!n.read(arguments),g=h.add(u).divide(2),w=h.subtract(g).rotate(-m),x=w.x,b=w.y,C=Math.abs,S=C(_.width),P=C(_.height),k=S*S,I=P*P,A=x*x,z=b*b,O=Math.sqrt(A/k+z/I);if(O>1&&(S*=O,P*=O,k=S*S,I=P*P),O=(k*I-k*z-I*A)/(k*z+I*A),C(O)<1e-12&&(O=0),0>O)throw new Error("Cannot create an arc with the given arguments");i=new l(S*b/P,-P*x/S).multiply((y===f?-1:1)*Math.sqrt(O)).rotate(m).add(g),a=(new p).translate(i).rotate(m).scale(S,P),s=a._inverseTransform(h),r=s.getDirectedAngle(a._inverseTransform(u)),!f&&r>0?r-=360:f&&0>r&&(r+=360)}if(e){var T=new v(h.add(e).divide(2),e.subtract(h).rotate(90),!0),E=new v(e.add(u).divide(2),u.subtract(e).rotate(90),!0),N=new v(h,u),L=N.getSide(e);if(i=T.intersect(E,!0),!i){if(!L)return this.lineTo(u);throw new Error("Cannot create an arc with the given arguments")}s=h.subtract(i),r=s.getDirectedAngle(u.subtract(i));var j=N.getSide(i);0===j?r=L*Math.abs(r):L===j&&(r+=0>r?360:-360)}for(var D=Math.abs(r),R=D>=360?4:Math.ceil(D/90),B=r/R,F=B*Math.PI/360,V=4/3*Math.sin(F)/(1+Math.cos(F)),q=[],H=0;R>=H;H++){var w=u,Z=null;if(R>H&&(Z=s.rotate(90).multiply(V),a?(w=a._transformPoint(s),Z=a._transformPoint(s.add(Z)).subtract(w)):w=i.add(s)),0===H)o.setHandleOut(Z);else{var U=s.rotate(-90).multiply(V);a&&(U=a._transformPoint(s.add(U)).subtract(w)),q.push(new M(w,U,Z))}s=s.rotate(B)}this._add(q)},lineBy:function(){var e=l.read(arguments),n=t(this)._point;this.lineTo(n.add(e))},curveBy:function(){var e=l.read(arguments),i=l.read(arguments),r=n.read(arguments),s=t(this)._point;this.curveTo(s.add(e),s.add(i),r)},cubicCurveBy:function(){var e=l.read(arguments),n=l.read(arguments),i=l.read(arguments),r=t(this)._point;this.cubicCurveTo(r.add(e),r.add(n),r.add(i))},quadraticCurveBy:function(){var e=l.read(arguments),n=l.read(arguments),i=t(this)._point;this.quadraticCurveTo(i.add(e),i.add(n))},arcBy:function(){var e=t(this)._point,i=e.add(l.read(arguments)),r=n.pick(n.peek(arguments),!0);"boolean"==typeof r?this.arcTo(i,r):this.arcTo(i,e.add(l.read(arguments)))},closePath:function(t){this.setClosed(!0),t&&this.join()}}},{_getBounds:function(t,e){return T[t](this._segments,this._closed,this.getStyle(),e)},statics:{getBounds:function(t,e,n,i,r){function s(t){t._transformCoordinates(i,o,!1);for(var e=0;2>e;e++)A._addBounds(h[e],h[e+4],o[e+2],o[e],e,r?r[e]:0,u,l,c);var n=h;h=o,o=n}var a=t[0];if(!a)return new g;for(var o=new Array(6),h=a._transformCoordinates(i,new Array(6),!1),u=h.slice(0,2),l=u.slice(),c=new Array(2),d=1,f=t.length;f>d;d++)s(t[d]);return e&&s(a),new g(u[0],u[1],l[0]-u[0],l[1]-u[1])},getStrokeBounds:function(t,e,n,i){function r(t){c=c.include(i?i._transformPoint(t,t):t)}function s(t){c=c.unite(v.setCenter(i?i._transformPoint(t._point):t._point))}function a(t,e){var n=t._handleIn,i=t._handleOut;"round"===e||!n.isZero()&&!i.isZero()&&n.isCollinear(i)?s(t):T._addBevelJoin(t,e,u,p,r)}function o(t,e){"round"===e?s(t):T._addSquareCap(t,e,u,r)}if(!n.hasStroke())return T.getBounds(t,e,n,i);for(var h=t.length-(e?0:1),u=n.getStrokeWidth()/2,l=T._getPenPadding(u,i),c=T.getBounds(t,e,n,i,l),f=n.getStrokeJoin(),_=n.getStrokeCap(),p=u*n.getMiterLimit(),v=new g(new d(l).multiply(2)),m=1;h>m;m++)a(t[m],f);return e?a(t[0],f):h>0&&(o(t[0],_),o(t[t.length-1],_)),c},_getPenPadding:function(t,e){if(!e)return[t,t];var n=e.shiftless(),i=n.transform(new l(t,0)),r=n.transform(new l(0,t)),s=i.getAngleInRadians(),a=i.getLength(),o=r.getLength(),h=Math.sin(s),u=Math.cos(s),c=Math.tan(s),d=-Math.atan(o*c/a),f=Math.atan(o/(c*a));return[Math.abs(a*Math.cos(d)*u-o*Math.sin(d)*h),Math.abs(o*Math.sin(f)*u+a*Math.cos(f)*h)]},_addBevelJoin:function(t,e,n,i,r,s){var a=t.getCurve(),o=a.getPrevious(),h=a.getPointAt(0,!0),u=o.getNormalAt(1,!0),c=a.getNormalAt(0,!0),d=u.getDirectedAngle(c)<0?-n:n;if(u.setLength(d),c.setLength(d),s&&(r(h),r(h.add(u))),"miter"===e){var f=new v(h.add(u),new l(-u.y,u.x),!0).intersect(new v(h.add(c),new l(-c.y,c.x),!0),!0);if(f&&h.getDistance(f)<=i&&(r(f),!s))return}s||r(h.add(u)),r(h.add(c))},_addSquareCap:function(t,e,n,i,r){var s=t._point,a=t.getLocation(),o=a.getNormal().multiply(n);r&&(i(s.subtract(o)),i(s.add(o))),"square"===e&&(s=s.add(o.rotate(0===a.getParameter()?-90:90))),i(s.add(o)),i(s.subtract(o))},getHandleBounds:function(t,e,n,i,r,s){for(var a=new Array(6),o=1/0,h=-o,u=o,l=h,c=0,d=t.length;d>c;c++){var f=t[c];f._transformCoordinates(i,a,!1);for(var _=0;6>_;_+=2){var p=0===_?s:r,v=p?p[0]:0,m=p?p[1]:0,y=a[_],w=a[_+1],x=y-v,b=y+v,C=w-m,S=w+m;o>x&&(o=x),b>h&&(h=b),u>C&&(u=C),S>l&&(l=S)}}return new g(o,u,h-o,l-u)},getRoughBounds:function(t,e,n,i){var r=n.hasStroke()?n.getStrokeWidth()/2:0,s=r;return r>0&&("miter"===n.getStrokeJoin()&&(s=r*n.getMiterLimit()),"square"===n.getStrokeCap()&&(s=Math.max(s,r*Math.sqrt(2)))),T.getHandleBounds(t,e,n,i,T._getPenPadding(r,i),T._getPenPadding(s,i))}}});T.inject({statics:new function(){function t(t,e,i){var r=n.getNamed(i),s=new T(r&&r.insert===!1&&w.NO_INSERT);return s._add(t),s._closed=e,s.set(r)}function e(e,n,i){for(var s=new Array(4),a=0;4>a;a++){var o=r[a];s[a]=new M(o._point.multiply(n).add(e),o._handleIn.multiply(n),o._handleOut.multiply(n))}return t(s,!0,i)}var i=.5522847498307936,r=[new M([-1,0],[0,i],[0,-i]),new M([0,-1],[-i,0],[i,0]),new M([1,0],[0,-i],[0,i]),new M([0,1],[i,0],[-i,0])];return{Line:function(){return t([new M(l.readNamed(arguments,"from")),new M(l.readNamed(arguments,"to"))],!1,arguments)},Circle:function(){var t=l.readNamed(arguments,"center"),i=n.readNamed(arguments,"radius");return e(t,new d(i),arguments)},Rectangle:function(){var e,n=g.readNamed(arguments,"rectangle"),r=d.readNamed(arguments,"radius",0,{readNull:!0}),s=n.getBottomLeft(!0),a=n.getTopLeft(!0),o=n.getTopRight(!0),h=n.getBottomRight(!0);if(!r||r.isZero())e=[new M(s),new M(a),new M(o),new M(h)];else{r=d.min(r,n.getSize(!0).divide(2));var u=r.width,l=r.height,c=u*i,f=l*i;e=[new M(s.add(u,0),null,[-c,0]),new M(s.subtract(0,l),[0,f]),new M(a.add(0,l),null,[0,-f]),new M(a.add(u,0),[-c,0],null),new M(o.subtract(u,0),null,[c,0]),new M(o.add(0,l),[0,-f],null),new M(h.subtract(0,l),null,[0,f]),new M(h.subtract(u,0),[c,0])]}return t(e,!0,arguments)},RoundRectangle:"#Rectangle",Ellipse:function(){var t=C._readEllipse(arguments);return e(t.center,t.radius,arguments)},Oval:"#Ellipse",Arc:function(){var t=l.readNamed(arguments,"from"),e=l.readNamed(arguments,"through"),i=l.readNamed(arguments,"to"),r=n.getNamed(arguments),s=new T(r&&r.insert===!1&&w.NO_INSERT);return s.moveTo(t),s.arcTo(e,i),s.set(r)},RegularPolygon:function(){for(var e=l.readNamed(arguments,"center"),i=n.readNamed(arguments,"sides"),r=n.readNamed(arguments,"radius"),s=360/i,a=!(i%3),o=new l(0,a?-r:r),h=a?-1:.5,u=new Array(i),c=0;i>c;c++)u[c]=new M(e.add(o.rotate((c+h)*s)));return t(u,!0,arguments)},Star:function(){for(var e=l.readNamed(arguments,"center"),i=2*n.readNamed(arguments,"points"),r=n.readNamed(arguments,"radius1"),s=n.readNamed(arguments,"radius2"),a=360/i,o=new l(0,-1),h=new Array(i),u=0;i>u;u++)h[u]=new M(e.add(o.rotate(a*u).multiply(u%2?s:r)));return t(h,!0,arguments)}}}});var E=O.extend({_class:"CompoundPath",_serializeFields:{children:[]},initialize:function(t){this._children=[],this._namedChildren={},this._initialize(t)||("string"==typeof t?this.setPathData(t):this.addChildren(Array.isArray(t)?t:arguments))},insertChildren:function wt(e,n,i){for(var r=n.length-1;r>=0;r--){var s=n[r];s instanceof E&&(n.splice.apply(n,[r,1].concat(s.removeChildren())),s.remove())}n=wt.base.call(this,e,n,i,T);for(var r=0,a=!i&&n&&n.length;a>r;r++){var s=n[r];s._clockwise===t&&s.setClockwise(0===s._index)}return n},reverse:function(){for(var t=this._children,e=0,n=t.length;n>e;e++)t[e].reverse()},smooth:function(){for(var t=0,e=this._children.length;e>t;t++)this._children[t].smooth()},reduce:function xt(){for(var t=this._children,e=t.length-1;e>=0;e--){var n=t[e].reduce();n.isEmpty()&&t.splice(e,1)}if(0===t.length){var n=new T(w.NO_INSERT);return n.insertAbove(this),n.setStyle(this._style),this.remove(),n}return xt.base.call(this)},isClockwise:function(){var t=this.getFirstChild();return t&&t.isClockwise()},setClockwise:function(t){this.isClockwise()!==!!t&&this.reverse()},getFirstSegment:function(){var t=this.getFirstChild();return t&&t.getFirstSegment()},getLastSegment:function(){var t=this.getLastChild();return t&&t.getLastSegment()},getCurves:function(){for(var t=this._children,e=[],n=0,i=t.length;i>n;n++)e.push.apply(e,t[n].getCurves());return e},getFirstCurve:function(){var t=this.getFirstChild();return t&&t.getFirstCurve()},getLastCurve:function(){var t=this.getLastChild();return t&&t.getFirstCurve()},getArea:function(){for(var t=this._children,e=0,n=0,i=t.length;i>n;n++)e+=t[n].getArea();return e}},{beans:!0,getPathData:function(t,e){for(var n=this._children,i=[],r=0,s=n.length;s>r;r++){var a=n[r],o=a._matrix;i.push(a.getPathData(t&&!o.isIdentity()?t.chain(o):t,e))}return i.join(" ")}},{_getChildHitTestOptions:function(t){return t["class"]===T||"path"===t.type?t:new n(t,{fill:!1});
},_draw:function(t,e,n){var i=this._children;if(0!==i.length){if(this._currentPath)t.currentPath=this._currentPath;else{e=e.extend({dontStart:!0,dontFinish:!0}),t.beginPath();for(var r=0,s=i.length;s>r;r++)i[r].draw(t,e,n);this._currentPath=t.currentPath}if(!e.clip){this._setStyles(t);var a=this._style;a.hasFill()&&(t.fill(a.getWindingRule()),t.shadowColor="rgba(0,0,0,0)"),a.hasStroke()&&t.stroke()}}},_drawSelected:function(t,e,n){for(var i=this._children,r=0,s=i.length;s>r;r++){var a=i[r],o=a._matrix;n[a._id]||a._drawSelected(t,o.isIdentity()?e:e.chain(o))}}},new function(){function t(t,e){var n=t._children;if(e&&0===n.length)throw new Error("Use a moveTo() command first");return n[n.length-1]}var e={moveTo:function(){var e=t(this),n=e&&e.isEmpty()?e:new T(w.NO_INSERT);n!==e&&this.addChild(n),n.moveTo.apply(n,arguments)},moveBy:function(){var e=t(this,!0),n=e&&e.getLastSegment(),i=l.read(arguments);this.moveTo(n?i.add(n._point):i)},closePath:function(e){t(this,!0).closePath(e)}};return n.each(["lineTo","cubicCurveTo","quadraticCurveTo","curveTo","arcTo","lineBy","cubicCurveBy","quadraticCurveBy","curveBy","arcBy"],function(n){e[n]=function(){var e=t(this,!0);e[n].apply(e,arguments)}}),e});O.inject(new function(){function t(t,e){var n=t.clone(!1).reduce().transform(null,!0,!0);return e?n.resolveCrossings().reorient():n}function e(t,e,n,i,r){var s=new t(w.NO_INSERT);return s.addChildren(e,!0),r&&(s=s.reduce()),s.insertAbove(i&&n.isSibling(i)&&n.getIndex()<i.getIndex()?i:n),s.setStyle(n._style),s}function n(n,r,a){function h(t){for(var e=0,n=t.length;n>e;e++){var i=t[e];f.push.apply(f,i._segments),g.push.apply(g,i._getMonoCurves())}}if(!n._children&&!n._closed)return i(n,r,a);var l=t(n,!0),c=r&&n!==r&&t(r,!0);c&&/^(subtract|exclude)$/.test(a)^c.isClockwise()!==l.isClockwise()&&c.reverse();var d=z.expand(l.getIntersections(c,function(t){return c&&t.isOverlap()||t.isCrossing()}));s(d);var f=[],g=[];h(l._children||[l]),c&&h(c._children||[c]);for(var _=0,p=d.length;p>_;_++)o(d[_]._segment,l,c,g,a);for(var _=0,p=f.length;p>_;_++){var v=f[_];null==v._winding&&o(v,l,c,g,a)}return e(E,u(f,a),n,r,!0)}function i(n,i,r){function s(t){return o.contains(t.getPointAt(t.getLength()/2))^u?(l.unshift(t),!0):void 0}if(!i||!i._children&&!i._closed||!/^(subtract|intersect)$/.test(r))return null;for(var a=t(n,!1),o=t(i,!1),h=a.getIntersections(o,function(t){return t.isOverlap()||t.isCrossing()}),u="subtract"===r,l=[],c=h.length-1;c>=0;c--){var d=h[c].split();d&&(s(d)&&d.getFirstSegment().setHandleIn(0,0),a.getLastSegment().setHandleOut(0,0))}return s(a),e(x,l,n,i)}function r(t,e){for(var n=t;n;){if(n===e)return;n=n._prev}for(;t._next&&t._next!==e;)t=t._next;if(!t._next){for(;e._prev;)e=e._prev;t._next=e,e._prev=t}}function s(t){for(var e,n,i=4e-7,s=1-i,a=!1,o=[],h=t.length-1;h>=0;h--){var u=t[h],l=u._curve,c=u._parameter,d=c;l!==e?a=!l.hasHandles():n>0&&(c/=n);var f;i>c?f=l._segment1:c>s?f=l._segment2:(f=l.divide(c,!0,!0)._segment1,a&&o.push(f)),u._setSegment(f);var g=f._intersection,_=u._intersection;if(g){r(g,_);for(var p=g;p;)r(p._intersection,g),p=p._next}else f._intersection=_;e=l,n=d}for(var h=0,v=o.length;v>h;h++)o[h].clearHandles()}function a(t,e,n,i){var r=2e-7,s=4e-7,o=1-s,u=t.x,c=t.y,d=0,f=0,g=[],_=Math.abs;if(n){for(var p=-(1/0),v=1/0,m=c-r,y=c+r,w=0,x=e.length;x>w;w++){var b=e[w].values;if(A.solveCubic(b,0,u,g,0,1)>0)for(var C=g.length-1;C>=0;C--){var S=A.getPoint(b,g[C]).y;m>S&&S>p?p=S:S>y&&v>S&&(v=S)}}p=(p+c)/2,v=(v+c)/2,p>-(1/0)&&(d=a(new l(u,p),e,!1,i)),1/0>v&&(f=a(new l(u,v),e,!1,i))}else for(var P,k,M=u-r,I=u+r,z=!1,w=0,x=e.length;x>w;w++){var O=e[w],b=O.values,T=O.winding;if(T&&(1===T&&c>=b[1]&&c<=b[7]||c>=b[7]&&c<=b[1])&&1===A.solveCubic(b,1,c,g,0,1)){var E=g[0];if(!(E>o&&z&&O.next!==e[w+1]||s>E&&k>o&&O.previous===P)){var N=A.getPoint(b,E).x,L=A.getTangent(b,E).y,j=!1;h.isZero(L)&&!A.isStraight(b)||s>E&&L*A.getTangent(O.previous.values,1).y<0||E>o&&L*A.getTangent(O.next.values,0).y<0?i&&N>=M&&I>=N&&(++d,++f,j=!0):M>=N?(d+=T,j=!0):N>=I&&(f+=T,j=!0),O.previous!==e[w-1]&&(z=s>E&&j)}P=O,k=E}}return Math.max(_(d),_(f))}function o(t,e,n,i,r){var s=2e-7,o=[],h=t,u=0,l=0;do{var c=t.getCurve(),d=c.getLength();o.push({segment:t,curve:c,length:d}),u+=d,t=t.getNext()}while(t&&!t._intersection&&t!==h);for(var f=0;3>f;f++)for(var d=u*(f+1)/4,g=0,_=o.length;_>g;g++){var p=o[g],v=p.length;if(v>=d){(s>d||s>v-d)&&(d=v/2);var c=p.curve,m=c._path,y=m._parent,w=c.getPointAt(d),x=c.isHorizontal();y instanceof E&&(m=y),l+="subtract"===r&&n&&(m===e&&n._getWinding(w,x)||m===n&&!e._getWinding(w,x))?0:a(w,i,x);break}d-=v}for(var b=Math.round(l/3),C=o.length-1;C>=0;C--)o[C].segment._winding=b}function u(t,e){function n(t,e){if(t._visited)return!1;if(!l)return!0;var n=t._winding,i=t._intersection;return i&&e&&d&&i.isOverlap()&&(n=d[n]||n),l(n)}function i(t){return t===a||t===o}function r(t,e){if(!t._next)return t;for(;t;){var r=t._segment,s=r.getNext(),a=s._intersection;if(i(s)||!r._visited&&!s._visited&&(!l||(!e||n(r))&&(!(e&&a&&a.isOverlap())&&n(s)||!e&&a&&n(a._segment))))return t;t=t._next}return null}function s(t,e){for(;t;){var n=t._segment;if(i(n))return n;t=t[e?"_next":"_prev"]}}for(var a,o,u=[],l=c[e],d={unite:{1:2},intersect:{2:1}}[e],f=0,g=t.length;g>f;f++){var _=t[f],p=null,v=!1;if(n(_,!0)){for(a=o=null;!v;){var m=_._intersection,y=p&&_._handleIn;m=m&&(r(m,!0)||r(m,!1))||m;var x=m&&m._segment;if(x&&n(x)&&(_=x),_._visited){if(v=i(_),!v&&m){var b=s(m,!0)||s(m,!1);b&&(_=b,v=!0)}break}p||(p=new T(w.NO_INSERT),a=_,o=x),p.add(new M(_._point,y,_._handleOut)),_._visited=!0,_=_.getNext(),v=i(_)}v?(p.firstSegment.setHandleIn(_._handleIn),p.setClosed(!0)):p&&(console.error("Boolean operation resulted in open path","segments =",p._segments.length,"length =",p.getLength()),p=null),p&&(p._segments.length>8||!h.isZero(p.getArea()))&&(u.push(p),p=null)}}return u}var c={unite:function(t){return 1===t||0===t},intersect:function(t){return 2===t},subtract:function(t){return 1===t},exclude:function(t){return 1===t}};return{_getWinding:function(t,e,n){return a(t,this._getMonoCurves(),e,n)},unite:function(t){return n(this,t,"unite")},intersect:function(t){return n(this,t,"intersect")},subtract:function(t){return n(this,t,"subtract")},exclude:function(t){return n(this,t,"exclude")},divide:function(t){return e(x,[this.subtract(t),this.intersect(t)],this,t,!0)},resolveCrossings:function(){var t=this.getCrossings();if(!t.length)return this;s(z.expand(t));for(var n=this._children||[this],i=[],r=0,a=n.length;a>r;r++)i.push.apply(i,n[r]._segments);return e(E,u(i),this,null,!1)}}}),T.inject({_getMonoCurves:function(){function t(t){var e=t[1],r=t[7],s={values:t,winding:e===r?0:e>r?-1:1,previous:n,next:null};n&&(n.next=s),i.push(s),n=s}function e(e){if(0!==A.getLength(e)){var n=e[1],i=e[3],r=e[5],s=e[7];if(A.isStraight(e))t(e);else{var a=3*(i-r)-n+s,o=2*(n+r)-4*i,u=i-n,l=4e-7,c=1-l,d=[],f=h.solveQuadratic(a,o,u,d,l,c);if(0===f)t(e);else{d.sort();var g=d[0],_=A.subdivide(e,g);t(_[0]),f>1&&(g=(d[1]-g)/(1-g),_=A.subdivide(_[1],g),t(_[0])),t(_[1])}}}}var n,i=this._monoCurves;if(!i){i=this._monoCurves=[];for(var r=this.getCurves(),s=this._segments,a=0,o=r.length;o>a;a++)e(r[a].getValues());if(!this._closed&&s.length>1){var u=s[s.length-1]._point,l=s[0]._point,c=u._x,d=u._y,f=l._x,g=l._y;e([c,d,c,d,f,g,f,g])}if(i.length>0){var _=i[0],p=i[i.length-1];_.previous=p,p.next=_}}return i},getInteriorPoint:function(){var t=this.getBounds(),e=t.getCenter(!0);if(!this.contains(e)){for(var n=this._getMonoCurves(),i=[],r=e.y,s=[],a=0,o=n.length;o>a;a++){var h=n[a].values;if((1===n[a].winding&&r>=h[1]&&r<=h[7]||r>=h[7]&&r<=h[1])&&A.solveCubic(h,1,r,i,0,1)>0)for(var u=i.length-1;u>=0;u--)s.push(A.getPoint(h,i[u]).x);if(s.length>1)break}e.x=(s[0]+s[1])/2}return e},reorient:function(){return this.setClockwise(!0),this}}),E.inject({_getMonoCurves:function(){for(var t=this._children,e=[],n=0,i=t.length;i>n;n++)e.push.apply(e,t[n]._getMonoCurves());return e},reorient:function(){var t=this.removeChildren().sort(function(t,e){return e.getBounds().getArea()-t.getBounds().getArea()});if(t.length>0){this.addChildren(t);for(var e=t[0].isClockwise(),n=1,i=t.length;i>n;n++){for(var r=t[n].getInteriorPoint(),s=0,a=n-1;a>=0;a--)t[a].contains(r)&&s++;t[n].setClockwise(s%2===0&&e)}}return this}});var N=n.extend({_class:"PathIterator",initialize:function(t,e,n,i){function r(t,e){var n=A.getValues(t,e,i);o.push(n),s(n,t._index,0,1)}function s(t,e,i,r){if(r-i>l&&!A.isFlatEnough(t,n||.25)){var a=A.subdivide(t,.5),o=(i+r)/2;s(a[0],e,i,o),s(a[1],e,o,r)}else{var c=t[6]-t[0],d=t[7]-t[1],f=Math.sqrt(c*c+d*d);f>1e-6&&(u+=f,h.push({offset:u,value:r,index:e}))}}for(var a,o=[],h=[],u=0,l=1/(e||32),c=t._segments,d=c[0],f=1,g=c.length;g>f;f++)a=c[f],r(d,a),d=a;t._closed&&r(a,c[0]),this.curves=o,this.parts=h,this.length=u,this.index=0},getParameterAt:function(t){for(var e,n=this.index;e=n,!(0==n||this.parts[--n].offset<t););for(var i=this.parts.length;i>e;e++){var r=this.parts[e];if(r.offset>=t){this.index=e;var s=this.parts[e-1],a=s&&s.index==r.index?s.value:0,o=s?s.offset:0;return{value:a+(r.value-a)*(t-o)/(r.offset-o),index:r.index}}}var r=this.parts[this.parts.length-1];return{value:1,index:r.index}},drawPart:function(t,e,n){e=this.getParameterAt(e),n=this.getParameterAt(n);for(var i=e.index;i<=n.index;i++){var r=A.getPart(this.curves[i],i==e.index?e.value:0,i==n.index?n.value:1);i==e.index&&t.moveTo(r[0],r[1]),t.bezierCurveTo.apply(t,r.slice(2))}}},n.each(A.evaluateMethods,function(t){this[t+"At"]=function(e,n){var i=this.getParameterAt(e);return A[t](this.curves[i.index],i.value,n)}},{})),L=n.extend({initialize:function(t,e){for(var n,i=this.points=[],r=t._segments,s=0,a=r.length;a>s;s++){var o=r[s].point.clone();n&&n.equals(o)||(i.push(o),n=o)}t._closed&&(this.closed=!0,i.unshift(i[i.length-1]),i.push(i[1])),this.error=e},fit:function(){var t=this.points,e=t.length,n=this.segments=e>0?[new M(t[0])]:[];return e>1&&this.fitCubic(0,e-1,t[1].subtract(t[0]).normalize(),t[e-2].subtract(t[e-1]).normalize()),this.closed&&(n.shift(),n.pop()),n},fitCubic:function(t,e,n,i){if(e-t==1){var r=this.points[t],s=this.points[e],a=r.getDistance(s)/3;return void this.addCurve([r,r.add(n.normalize(a)),s.add(i.normalize(a)),s])}for(var o,h=this.chordLengthParameterize(t,e),u=Math.max(this.error,this.error*this.error),l=!0,c=0;4>=c;c++){var d=this.generateBezier(t,e,h,n,i),f=this.findMaxError(t,e,d,h);if(f.error<this.error&&l)return void this.addCurve(d);if(o=f.index,f.error>=u)break;l=this.reparameterize(t,e,h,d),u=f.error}var g=this.points[o-1].subtract(this.points[o]),_=this.points[o].subtract(this.points[o+1]),p=g.add(_).divide(2).normalize();this.fitCubic(t,o,n,p),this.fitCubic(o,e,p.negate(),i)},addCurve:function(t){var e=this.segments[this.segments.length-1];e.setHandleOut(t[1].subtract(t[0])),this.segments.push(new M(t[3],t[2].subtract(t[3])))},generateBezier:function(t,e,n,i,r){for(var s=1e-12,a=this.points[t],o=this.points[e],h=[[0,0],[0,0]],u=[0,0],l=0,c=e-t+1;c>l;l++){var d=n[l],f=1-d,g=3*d*f,_=f*f*f,p=g*f,v=g*d,m=d*d*d,y=i.normalize(p),w=r.normalize(v),x=this.points[t+l].subtract(a.multiply(_+p)).subtract(o.multiply(v+m));h[0][0]+=y.dot(y),h[0][1]+=y.dot(w),h[1][0]=h[0][1],h[1][1]+=w.dot(w),u[0]+=y.dot(x),u[1]+=w.dot(x)}var b,C,S=h[0][0]*h[1][1]-h[1][0]*h[0][1];if(Math.abs(S)>s){var P=h[0][0]*u[1]-h[1][0]*u[0],k=u[0]*h[1][1]-u[1]*h[0][1];b=k/S,C=P/S}else{var M=h[0][0]+h[0][1],I=h[1][0]+h[1][1];b=C=Math.abs(M)>s?u[0]/M:Math.abs(I)>s?u[1]/I:0}var A,z,O=o.getDistance(a),T=s*O;if(T>b||T>C)b=C=O/3;else{var E=o.subtract(a);A=i.normalize(b),z=r.normalize(C),A.dot(E)-z.dot(E)>O*O&&(b=C=O/3,A=z=null)}return[a,a.add(A||i.normalize(b)),o.add(z||r.normalize(C)),o]},reparameterize:function(t,e,n,i){for(var r=t;e>=r;r++)n[r-t]=this.findRoot(i,this.points[r],n[r-t]);for(var r=1,s=n.length;s>r;r++)if(n[r]<=n[r-1])return!1;return!0},findRoot:function(t,e,n){for(var i=[],r=[],s=0;2>=s;s++)i[s]=t[s+1].subtract(t[s]).multiply(3);for(var s=0;1>=s;s++)r[s]=i[s+1].subtract(i[s]).multiply(2);var a=this.evaluate(3,t,n),o=this.evaluate(2,i,n),h=this.evaluate(1,r,n),u=a.subtract(e),l=o.dot(o)+u.dot(h);return Math.abs(l)<1e-6?n:n-u.dot(o)/l},evaluate:function(t,e,n){for(var i=e.slice(),r=1;t>=r;r++)for(var s=0;t-r>=s;s++)i[s]=i[s].multiply(1-n).add(i[s+1].multiply(n));return i[0]},chordLengthParameterize:function(t,e){for(var n=[0],i=t+1;e>=i;i++)n[i-t]=n[i-t-1]+this.points[i].getDistance(this.points[i-1]);for(var i=1,r=e-t;r>=i;i++)n[i]/=n[r];return n},findMaxError:function(t,e,n,i){for(var r=Math.floor((e-t+1)/2),s=0,a=t+1;e>a;a++){var o=this.evaluate(3,n,i[a-t]),h=o.subtract(this.points[a]),u=h.x*h.x+h.y*h.y;u>=s&&(s=u,r=a)}return{error:s,index:r}}}),j=w.extend({_class:"TextItem",_boundsSelected:!0,_applyMatrix:!1,_canApplyMatrix:!1,_serializeFields:{content:null},_boundsGetter:"getBounds",initialize:function(e){this._content="",this._lines=[];var i=e&&n.isPlainObject(e)&&e.x===t&&e.y===t;this._initialize(i&&e,!i&&l.read(arguments))},_equals:function(t){return this._content===t._content},_clone:function bt(t,e,n){return t.setContent(this._content),bt.base.call(this,t,e,n)},getContent:function(){return this._content},setContent:function(t){this._content=""+t,this._lines=this._content.split(/\r\n|\n|\r/gm),this._changed(265)},isEmpty:function(){return!this._content},getCharacterStyle:"#getStyle",setCharacterStyle:"#setStyle",getParagraphStyle:"#getStyle",setParagraphStyle:"#setStyle"}),D=j.extend({_class:"PointText",initialize:function(){j.apply(this,arguments)},clone:function(t){return this._clone(new D(w.NO_INSERT),t)},getPoint:function(){var t=this._matrix.getTranslation();return new c(t.x,t.y,this,"setPoint")},setPoint:function(){var t=l.read(arguments);this.translate(t.subtract(this._matrix.getTranslation()))},_draw:function(t){if(this._content){this._setStyles(t);var e=this._style,n=this._lines,i=e.getLeading(),r=t.shadowColor;t.font=e.getFontStyle(),t.textAlign=e.getJustification();for(var s=0,a=n.length;a>s;s++){t.shadowColor=r;var o=n[s];e.hasFill()&&(t.fillText(o,0,0),t.shadowColor="rgba(0,0,0,0)"),e.hasStroke()&&t.strokeText(o,0,0),t.translate(0,i)}}},_getBounds:function(t,e){var n=this._style,i=this._lines,r=i.length,s=n.getJustification(),a=n.getLeading(),o=this.getView().getTextWidth(n.getFontStyle(),i),h=0;"left"!==s&&(h-=o/("center"===s?2:1));var u=new g(h,r?-.75*a:0,o,r*a);return e?e._transformBounds(u,u):u}}),R=n.extend(new function(){function t(t){var n,i=t.match(/^#(\w{1,2})(\w{1,2})(\w{1,2})$/);if(i){n=[0,0,0];for(var r=0;3>r;r++){var a=i[r+1];n[r]=parseInt(1==a.length?a+a:a,16)/255}}else if(i=t.match(/^rgba?\((.*)\)$/)){n=i[1].split(",");for(var r=0,o=n.length;o>r;r++){var a=+n[r];n[r]=3>r?a/255:a}}else{var h=s[t];if(!h){e||(e=K.getContext(1,1),e.globalCompositeOperation="copy"),e.fillStyle="rgba(0,0,0,0)",e.fillStyle=t,e.fillRect(0,0,1,1);var u=e.getImageData(0,0,1,1).data;h=s[t]=[u[0]/255,u[1]/255,u[2]/255]}n=h.slice()}return n}var e,i={gray:["gray"],rgb:["red","green","blue"],hsb:["hue","saturation","brightness"],hsl:["hue","saturation","lightness"],gradient:["gradient","origin","destination","highlight"]},r={},s={},a=[[0,3,1],[2,0,1],[1,0,3],[1,2,0],[3,1,0],[0,1,2]],h={"rgb-hsb":function(t,e,n){var i=Math.max(t,e,n),r=Math.min(t,e,n),s=i-r,a=0===s?0:60*(i==t?(e-n)/s+(n>e?6:0):i==e?(n-t)/s+2:(t-e)/s+4);return[a,0===i?0:s/i,i]},"hsb-rgb":function(t,e,n){t=(t/60%6+6)%6;var i=Math.floor(t),r=t-i,i=a[i],s=[n,n*(1-e),n*(1-e*r),n*(1-e*(1-r))];return[s[i[0]],s[i[1]],s[i[2]]]},"rgb-hsl":function(t,e,n){var i=Math.max(t,e,n),r=Math.min(t,e,n),s=i-r,a=0===s,o=a?0:60*(i==t?(e-n)/s+(n>e?6:0):i==e?(n-t)/s+2:(t-e)/s+4),h=(i+r)/2,u=a?0:.5>h?s/(i+r):s/(2-i-r);return[o,u,h]},"hsl-rgb":function(t,e,n){if(t=(t/360%1+1)%1,0===e)return[n,n,n];for(var i=[t+1/3,t,t-1/3],r=.5>n?n*(1+e):n+e-n*e,s=2*n-r,a=[],o=0;3>o;o++){var h=i[o];0>h&&(h+=1),h>1&&(h-=1),a[o]=1>6*h?s+6*(r-s)*h:1>2*h?r:2>3*h?s+(r-s)*(2/3-h)*6:s}return a},"rgb-gray":function(t,e,n){return[.2989*t+.587*e+.114*n]},"gray-rgb":function(t){return[t,t,t]},"gray-hsb":function(t){return[0,0,t]},"gray-hsl":function(t){return[0,0,t]},"gradient-rgb":function(){return[]},"rgb-gradient":function(){return[]}};return n.each(i,function(t,e){r[e]=[],n.each(t,function(t,s){var a=n.capitalize(t),o=/^(hue|saturation)$/.test(t),h=r[e][s]="gradient"===t?function(t){var e=this._components[0];return t=B.read(Array.isArray(t)?t:arguments,0,{readNull:!0}),e!==t&&(e&&e._removeOwner(this),t&&t._addOwner(this)),t}:"gradient"===e?function(){return l.read(arguments,0,{readNull:"highlight"===t,clone:!0})}:function(t){return null==t||isNaN(t)?0:t};this["get"+a]=function(){return this._type===e||o&&/^hs[bl]$/.test(this._type)?this._components[s]:this._convert(e)[s]},this["set"+a]=function(t){this._type===e||o&&/^hs[bl]$/.test(this._type)||(this._components=this._convert(e),this._properties=i[e],this._type=e),this._components[s]=h.call(this,t),this._changed()}},this)},{_class:"Color",_readIndex:!0,initialize:function c(e){var n,s,a,o,h=Array.prototype.slice,l=arguments,d=0;Array.isArray(e)&&(l=e,e=l[0]);var f=null!=e&&typeof e;if("string"===f&&e in i&&(n=e,e=l[1],Array.isArray(e)?(s=e,a=l[2]):(this.__read&&(d=1),l=h.call(l,1),f=typeof e)),!s){if(o="number"===f?l:"object"===f&&null!=e.length?e:null){n||(n=o.length>=3?"rgb":"gray");var g=i[n].length;a=o[g],this.__read&&(d+=o===arguments?g+(null!=a?1:0):1),o.length>g&&(o=h.call(o,0,g))}else if("string"===f)n="rgb",s=t(e),4===s.length&&(a=s[3],s.length--);else if("object"===f)if(e.constructor===c){if(n=e._type,s=e._components.slice(),a=e._alpha,"gradient"===n)for(var _=1,p=s.length;p>_;_++){var v=s[_];v&&(s[_]=v.clone())}}else if(e.constructor===B)n="gradient",o=l;else{n="hue"in e?"lightness"in e?"hsl":"hsb":"gradient"in e||"stops"in e||"radial"in e?"gradient":"gray"in e?"gray":"rgb";var m=i[n],y=r[n];this._components=s=[];for(var _=0,p=m.length;p>_;_++){var w=e[m[_]];null==w&&0===_&&"gradient"===n&&"stops"in e&&(w={stops:e.stops,radial:e.radial}),w=y[_].call(this,w),null!=w&&(s[_]=w)}a=e.alpha}this.__read&&n&&(d=1)}if(this._type=n||"rgb",this._id=u.get(c),!s){this._components=s=[];for(var y=r[this._type],_=0,p=y.length;p>_;_++){var w=y[_].call(this,o&&o[_]);null!=w&&(s[_]=w)}}this._components=s,this._properties=i[this._type],this._alpha=a,this.__read&&(this.__read=d)},_serialize:function(t,e){var i=this.getComponents();return n.serialize(/^(gray|rgb)$/.test(this._type)?i:[this._type].concat(i),t,!0,e)},_changed:function(){this._canvasStyle=null,this._owner&&this._owner._changed(65)},_convert:function(t){var e;return this._type===t?this._components.slice():(e=h[this._type+"-"+t])?e.apply(this,this._components):h["rgb-"+t].apply(this,h[this._type+"-rgb"].apply(this,this._components))},convert:function(t){return new R(t,this._convert(t),this._alpha)},getType:function(){return this._type},setType:function(t){this._components=this._convert(t),this._properties=i[t],this._type=t},getComponents:function(){var t=this._components.slice();return null!=this._alpha&&t.push(this._alpha),t},getAlpha:function(){return null!=this._alpha?this._alpha:1},setAlpha:function(t){this._alpha=null==t?null:Math.min(Math.max(t,0),1),this._changed()},hasAlpha:function(){return null!=this._alpha},equals:function(t){var e=n.isPlainValue(t,!0)?R.read(arguments):t;return e===this||e&&this._class===e._class&&this._type===e._type&&this._alpha===e._alpha&&n.equals(this._components,e._components)||!1},toString:function(){for(var t=this._properties,e=[],n="gradient"===this._type,i=o.instance,r=0,s=t.length;s>r;r++){var a=this._components[r];null!=a&&e.push(t[r]+": "+(n?a:i.number(a)))}return null!=this._alpha&&e.push("alpha: "+i.number(this._alpha)),"{ "+e.join(", ")+" }"},toCSS:function(t){function e(t){return Math.round(255*(0>t?0:t>1?1:t))}var n=this._convert("rgb"),i=t||null==this._alpha?1:this._alpha;return n=[e(n[0]),e(n[1]),e(n[2])],1>i&&n.push(0>i?0:i),t?"#"+((1<<24)+(n[0]<<16)+(n[1]<<8)+n[2]).toString(16).slice(1):(4==n.length?"rgba(":"rgb(")+n.join(",")+")"},toCanvasStyle:function(t){if(this._canvasStyle)return this._canvasStyle;if("gradient"!==this._type)return this._canvasStyle=this.toCSS();var e,n=this._components,i=n[0],r=i._stops,s=n[1],a=n[2];if(i._radial){var o=a.getDistance(s),h=n[3];if(h){var u=h.subtract(s);u.getLength()>o&&(h=s.add(u.normalize(o-.1)))}var l=h||s;e=t.createRadialGradient(l.x,l.y,0,s.x,s.y,o)}else e=t.createLinearGradient(s.x,s.y,a.x,a.y);for(var c=0,d=r.length;d>c;c++){var f=r[c];e.addColorStop(f._rampPoint,f._color.toCanvasStyle())}return this._canvasStyle=e},transform:function(t){if("gradient"===this._type){for(var e=this._components,n=1,i=e.length;i>n;n++){var r=e[n];t._transformPoint(r,r,!0)}this._changed()}},statics:{_types:i,random:function(){var t=Math.random;return new R(t(),t(),t())}}})},new function(){var t={add:function(t,e){return t+e},subtract:function(t,e){return t-e},multiply:function(t,e){return t*e},divide:function(t,e){return t/e}};return n.each(t,function(t,e){this[e]=function(e){e=R.read(arguments);for(var n=this._type,i=this._components,r=e._convert(n),s=0,a=i.length;a>s;s++)r[s]=t(i[s],r[s]);return new R(n,r,null!=this._alpha?t(this._alpha,e.getAlpha()):null)}},{})}),B=n.extend({_class:"Gradient",initialize:function(t,e){this._id=u.get(),t&&this._set(t)&&(t=e=null),this._stops||this.setStops(t||["white","black"]),null==this._radial&&this.setRadial("string"==typeof e&&"radial"===e||e||!1)},_serialize:function(t,e){return e.add(this,function(){return n.serialize([this._stops,this._radial],t,!0,e)})},_changed:function(){for(var t=0,e=this._owners&&this._owners.length;e>t;t++)this._owners[t]._changed()},_addOwner:function(t){this._owners||(this._owners=[]),this._owners.push(t)},_removeOwner:function(e){var n=this._owners?this._owners.indexOf(e):-1;-1!=n&&(this._owners.splice(n,1),0===this._owners.length&&(this._owners=t))},clone:function(){for(var t=[],e=0,n=this._stops.length;n>e;e++)t[e]=this._stops[e].clone();return new B(t,this._radial)},getStops:function(){return this._stops},setStops:function(e){if(this.stops)for(var n=0,i=this._stops.length;i>n;n++)this._stops[n]._owner=t;if(e.length<2)throw new Error("Gradient stop list needs to contain at least two stops.");this._stops=F.readAll(e,0,{clone:!0});for(var n=0,i=this._stops.length;i>n;n++){var r=this._stops[n];r._owner=this,r._defaultRamp&&r.setRampPoint(n/(i-1))}this._changed()},getRadial:function(){return this._radial},setRadial:function(t){this._radial=t,this._changed()},equals:function(t){if(t===this)return!0;if(t&&this._class===t._class&&this._stops.length===t._stops.length){for(var e=0,n=this._stops.length;n>e;e++)if(!this._stops[e].equals(t._stops[e]))return!1;return!0}return!1}}),F=n.extend({_class:"GradientStop",initialize:function(e,n){if(e){var i,r;n===t&&Array.isArray(e)?(i=e[0],r=e[1]):e.color?(i=e.color,r=e.rampPoint):(i=e,r=n),this.setColor(i),this.setRampPoint(r)}},clone:function(){return new F(this._color.clone(),this._rampPoint)},_serialize:function(t,e){return n.serialize([this._color,this._rampPoint],t,!0,e)},_changed:function(){this._owner&&this._owner._changed(65)},getRampPoint:function(){return this._rampPoint},setRampPoint:function(t){this._defaultRamp=null==t,this._rampPoint=t||0,this._changed()},getColor:function(){return this._color},setColor:function(t){this._color=R.read(arguments),this._color===t&&(this._color=t.clone()),this._color._owner=this,this._changed()},equals:function(t){return t===this||t&&this._class===t._class&&this._color.equals(t._color)&&this._rampPoint==t._rampPoint||!1}}),V=n.extend(new function(){var e={fillColor:t,strokeColor:t,strokeWidth:1,strokeCap:"butt",strokeJoin:"miter",strokeScaling:!0,miterLimit:10,dashOffset:0,dashArray:[],windingRule:"nonzero",shadowColor:t,shadowBlur:0,shadowOffset:new l,selectedColor:t,fontFamily:"sans-serif",fontWeight:"normal",fontSize:12,font:"sans-serif",leading:null,justification:"left"},i={strokeWidth:97,strokeCap:97,strokeJoin:97,strokeScaling:105,miterLimit:97,fontFamily:9,fontWeight:9,fontSize:9,font:9,leading:9,justification:9},r={beans:!0},s={_defaults:e,_textDefaults:new n(e,{fillColor:new R}),beans:!0};return n.each(e,function(e,a){var o=/Color$/.test(a),h="shadowOffset"===a,u=n.capitalize(a),c=i[a],d="set"+u,f="get"+u;s[d]=function(e){var n=this._owner,i=n&&n._children;if(i&&i.length>0&&!(n instanceof E))for(var r=0,s=i.length;s>r;r++)i[r]._style[d](e);else{var h=this._values[a];h!==e&&(o&&(h&&(h._owner=t),e&&e.constructor===R&&(e._owner&&(e=e.clone()),e._owner=n)),this._values[a]=e,n&&n._changed(c||65))}},s[f]=function(e){var i,r=this._owner,s=r&&r._children;if(!s||0===s.length||e||r instanceof E){var i=this._values[a];if(i===t)i=this._defaults[a],i&&i.clone&&(i=i.clone());else{var u=o?R:h?l:null;!u||i&&i.constructor===u||(this._values[a]=i=u.read([i],0,{readNull:!0,clone:!0}),i&&o&&(i._owner=r))}return i}for(var c=0,d=s.length;d>c;c++){var g=s[c]._style[f]();if(0===c)i=g;else if(!n.equals(i,g))return t}return i},r[f]=function(t){return this._style[f](t)},r[d]=function(t){this._style[d](t)}}),w.inject(r),s},{_class:"Style",initialize:function(t,e,n){this._values={},this._owner=e,this._project=e&&e._project||n||i.project,e instanceof j&&(this._defaults=this._textDefaults),t&&this.set(t)},set:function(t){var e=t instanceof V,n=e?t._values:t;if(n)for(var i in n)if(i in this._defaults){var r=n[i];this[i]=r&&e&&r.clone?r.clone():r}},equals:function(t){return t===this||t&&this._class===t._class&&n.equals(this._values,t._values)||!1},hasFill:function(){return!!this.getFillColor()},hasStroke:function(){return!!this.getStrokeColor()&&this.getStrokeWidth()>0},hasShadow:function(){return!!this.getShadowColor()&&this.getShadowBlur()>0},getView:function(){return this._project.getView()},getFontStyle:function(){var t=this.getFontSize();return this.getFontWeight()+" "+t+(/[a-z]/i.test(t+"")?" ":"px ")+this.getFontFamily()},getFont:"#getFontFamily",setFont:"#setFontFamily",getLeading:function Ct(){var t=Ct.base.call(this),e=this.getFontSize();return/pt|em|%|px/.test(e)&&(e=this.getView().getPixelSize(e)),null!=t?t:1.2*e}}),q=new function(){function t(t,e,n,i){for(var r=["","webkit","moz","Moz","ms","o"],s=e[0].toUpperCase()+e.substring(1),a=0;6>a;a++){var o=r[a],h=o?o+s:e;if(h in t){if(!n)return t[h];t[h]=i;break}}}return{getStyles:function(t){var e=t&&9!==t.nodeType?t.ownerDocument:t,n=e&&e.defaultView;return n&&n.getComputedStyle(t,"")},getBounds:function(t,e){var n,i=t.ownerDocument,r=i.body,s=i.documentElement;try{n=t.getBoundingClientRect()}catch(a){n={left:0,top:0,width:0,height:0}}var o=n.left-(s.clientLeft||r.clientLeft||0),h=n.top-(s.clientTop||r.clientTop||0);if(!e){var u=i.defaultView;o+=u.pageXOffset||s.scrollLeft||r.scrollLeft,h+=u.pageYOffset||s.scrollTop||r.scrollTop}return new g(o,h,n.width,n.height)},getViewportBounds:function(t){var e=t.ownerDocument,n=e.defaultView,i=e.documentElement;return new g(0,0,n.innerWidth||i.clientWidth,n.innerHeight||i.clientHeight)},getOffset:function(t,e){return q.getBounds(t,e).getPoint()},getSize:function(t){return q.getBounds(t,!0).getSize()},isInvisible:function(t){return q.getSize(t).equals(new d(0,0))},isInView:function(t){return!q.isInvisible(t)&&q.getViewportBounds(t).intersects(q.getBounds(t,!0))},getPrefixed:function(e,n){return t(e,n)},setPrefixed:function(e,n,i){if("object"==typeof n)for(var r in n)t(e,r,!0,n[r]);else t(e,n,!0,i)}}},H={add:function(t,e){for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;a>s;s++)t.addEventListener(r[s],i,!1)},remove:function(t,e){for(var n in e)for(var i=e[n],r=n.split(/[\s,]+/g),s=0,a=r.length;a>s;s++)t.removeEventListener(r[s],i,!1)},getPoint:function(t){var e=t.targetTouches?t.targetTouches.length?t.targetTouches[0]:t.changedTouches[0]:t;return new l(e.pageX||e.clientX+document.documentElement.scrollLeft,e.pageY||e.clientY+document.documentElement.scrollTop)},getTarget:function(t){return t.target||t.srcElement},getRelatedTarget:function(t){return t.relatedTarget||t.toElement},getOffset:function(t,e){return H.getPoint(t).subtract(q.getOffset(e||H.getTarget(t)))},stop:function(t){t.stopPropagation(),t.preventDefault()}};H.requestAnimationFrame=new function(){function t(){for(var e=r.length-1;e>=0;e--){var o=r[e],h=o[0],u=o[1];(!u||("true"==s.getAttribute(u,"keepalive")||a)&&q.isInView(u))&&(r.splice(e,1),h())}n&&(r.length?n(t):i=!1)}var e,n=q.getPrefixed(window,"requestAnimationFrame"),i=!1,r=[],a=!0;return H.add(window,{focus:function(){a=!0},blur:function(){a=!1}}),function(s,a){r.push([s,a]),n?i||(n(t),i=!0):e||(e=setInterval(t,1e3/60))}};var Z=n.extend(r,{_class:"View",initialize:function St(t,e){function n(t){return e[t]||parseInt(e.getAttribute(t),10)}function i(){var t=q.getSize(e);return t.isNaN()||t.isZero()?new d(n("width"),n("height")):t}this._project=t,this._scope=t._scope,this._element=e;var r;this._pixelRatio||(this._pixelRatio=window.devicePixelRatio||1),this._id=e.getAttribute("id"),null==this._id&&e.setAttribute("id",this._id="view-"+St._id++),H.add(e,this._viewEvents);var a="none";if(q.setPrefixed(e.style,{userSelect:a,touchAction:a,touchCallout:a,contentZooming:a,userDrag:a,tapHighlightColor:"rgba(0,0,0,0)"}),s.hasAttribute(e,"resize")){var o=this;H.add(window,this._windowEvents={resize:function(){o.setViewSize(i())}})}if(this._setViewSize(r=i()),s.hasAttribute(e,"stats")&&"undefined"!=typeof Stats){this._stats=new Stats;var h=this._stats.domElement,u=h.style,l=q.getOffset(e);u.position="absolute",u.left=l.x+"px",u.top=l.y+"px",document.body.appendChild(h)}St._views.push(this),St._viewsById[this._id]=this,this._viewSize=r,(this._matrix=new p)._owner=this,this._zoom=1,St._focused||(St._focused=this),this._frameItems={},this._frameItemCount=0},remove:function(){return this._project?(Z._focused===this&&(Z._focused=null),Z._views.splice(Z._views.indexOf(this),1),delete Z._viewsById[this._id],this._project._view===this&&(this._project._view=null),H.remove(this._element,this._viewEvents),H.remove(window,this._windowEvents),this._element=this._project=null,this.off("frame"),this._animate=!1,this._frameItems={},!0):!1},_events:n.each(["onResize","onMouseDown","onMouseUp","onMouseMove"],function(t){this[t]={install:function(t){this._installEvent(t)},uninstall:function(t){this._uninstallEvent(t)}}},{onFrame:{install:function(){this.play()},uninstall:function(){this.pause()}}}),_animate:!1,_time:0,_count:0,_requestFrame:function(){var t=this;H.requestAnimationFrame(function(){t._requested=!1,t._animate&&(t._requestFrame(),t._handleFrame())},this._element),this._requested=!0},_handleFrame:function(){i=this._scope;var t=Date.now()/1e3,e=this._before?t-this._before:0;this._before=t,this._handlingFrame=!0,this.emit("frame",new n({delta:e,time:this._time+=e,count:this._count++})),this._stats&&this._stats.update(),this._handlingFrame=!1,this.update()},_animateItem:function(t,e){var n=this._frameItems;e?(n[t._id]={item:t,time:0,count:0},1===++this._frameItemCount&&this.on("frame",this._handleFrameItems)):(delete n[t._id],0===--this._frameItemCount&&this.off("frame",this._handleFrameItems))},_handleFrameItems:function(t){for(var e in this._frameItems){var i=this._frameItems[e];i.item.emit("frame",new n(t,{time:i.time+=t.delta,count:i.count++}))}},_update:function(){this._project._needsUpdate=!0,this._handlingFrame||(this._animate?this._handleFrame():this.update())},_changed:function(t){1&t&&(this._project._needsUpdate=!0)},_transform:function(t){this._matrix.concatenate(t),this._bounds=null,this._update()},getElement:function(){return this._element},getPixelRatio:function(){return this._pixelRatio},getResolution:function(){return 72*this._pixelRatio},getViewSize:function(){var t=this._viewSize;return new f(t.width,t.height,this,"setViewSize")},setViewSize:function(){var t=d.read(arguments),e=t.subtract(this._viewSize);e.isZero()||(this._viewSize.set(t.width,t.height),this._setViewSize(t),this._bounds=null,this.emit("resize",{size:t,delta:e}),this._update())},_setViewSize:function(t){var e=this._element;e.width=t.width,e.height=t.height},getBounds:function(){return this._bounds||(this._bounds=this._matrix.inverted()._transformBounds(new g(new l,this._viewSize))),
this._bounds},getSize:function(){return this.getBounds().getSize()},getCenter:function(){return this.getBounds().getCenter()},setCenter:function(){var t=l.read(arguments);this.scrollBy(t.subtract(this.getCenter()))},getZoom:function(){return this._zoom},setZoom:function(t){this._transform((new p).scale(t/this._zoom,this.getCenter())),this._zoom=t},isVisible:function(){return q.isInView(this._element)},scrollBy:function(){this._transform((new p).translate(l.read(arguments).negate()))},play:function(){this._animate=!0,this._requested||this._requestFrame()},pause:function(){this._animate=!1},draw:function(){this.update()},projectToView:function(){return this._matrix._transformPoint(l.read(arguments))},viewToProject:function(){return this._matrix._inverseTransform(l.read(arguments))}},{statics:{_views:[],_viewsById:{},_id:0,create:function(t,e){return"string"==typeof e&&(e=document.getElementById(e)),new U(t,e)}}},new function(){function t(t){var e=H.getTarget(t);return e.getAttribute&&Z._viewsById[e.getAttribute("id")]}function e(t,e){return t.viewToProject(H.getOffset(e,t._element))}function n(){if(!Z._focused||!Z._focused.isVisible())for(var t=0,e=Z._views.length;e>t;t++){var n=Z._views[t];if(n&&n.isVisible()){Z._focused=a=n;break}}}function i(t,e,n){t._handleEvent("mousemove",e,n);var i=t._scope.tool;return i&&i._handleEvent(l&&i.responds("mousedrag")?"mousedrag":"mousemove",e,n),t.update(),i}var r,s,a,o,h,u,l=!1,c=window.navigator;c.pointerEnabled||c.msPointerEnabled?(o="pointerdown MSPointerDown",h="pointermove MSPointerMove",u="pointerup pointercancel MSPointerUp MSPointerCancel"):(o="touchstart",h="touchmove",u="touchend touchcancel","ontouchstart"in window&&c.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i)||(o+=" mousedown",h+=" mousemove",u+=" mouseup"));var d={"selectstart dragstart":function(t){l&&t.preventDefault()}},f={mouseout:function(t){var n=Z._focused,r=H.getRelatedTarget(t);!n||r&&"HTML"!==r.nodeName||i(n,e(n,t),t)},scroll:n};d[o]=function(n){var i=Z._focused=t(n),s=e(i,n);l=!0,i._handleEvent("mousedown",s,n),(r=i._scope.tool)&&r._handleEvent("mousedown",s,n),i.update()},f[h]=function(o){var h=Z._focused;if(!l){var u=t(o);u?(h!==u&&i(h,e(h,o),o),s=h,h=Z._focused=a=u):a&&a===h&&(h=Z._focused=s,n())}if(h){var c=e(h,o);(l||h.getBounds().contains(c))&&(r=i(h,c,o))}},f[u]=function(t){var n=Z._focused;if(n&&l){var i=e(n,t);l=!1,n._handleEvent("mouseup",i,t),r&&r._handleEvent("mouseup",i,t),n.update()}},H.add(document,f),H.add(window,{load:n});var g={mousedown:{mousedown:1,mousedrag:1,click:1,doubleclick:1},mouseup:{mouseup:1,mousedrag:1,click:1,doubleclick:1},mousemove:{mousedrag:1,mousemove:1,mouseenter:1,mouseleave:1}};return{_viewEvents:d,_handleEvent:function(){},_installEvent:function(t){var e=this._eventCounters;if(e)for(var n in g)e[n]=(e[n]||0)+(g[n][t]||0)},_uninstallEvent:function(t){var e=this._eventCounters;if(e)for(var n in g)e[n]-=g[n][t]||0},statics:{updateFocus:n}}}),U=Z.extend({_class:"CanvasView",initialize:function(t,e){if(!(e instanceof HTMLCanvasElement)){var n=d.read(arguments,1);if(n.isZero())throw new Error("Cannot create CanvasView with the provided argument: "+[].slice.call(arguments,1));e=K.getCanvas(n)}if(this._context=e.getContext("2d"),this._eventCounters={},this._pixelRatio=1,!/^off|false$/.test(s.getAttribute(e,"hidpi"))){var i=window.devicePixelRatio||1,r=q.getPrefixed(this._context,"backingStorePixelRatio")||1;this._pixelRatio=i/r}Z.call(this,t,e)},_setViewSize:function(t){var e=this._element,n=this._pixelRatio,i=t.width,r=t.height;if(e.width=i*n,e.height=r*n,1!==n){if(!s.hasAttribute(e,"resize")){var a=e.style;a.width=i+"px",a.height=r+"px"}this._context.scale(n,n)}},getPixelSize:function(t){var e,n=i.browser;if(n&&n.firefox){var r=this._element.parentNode,s=document.createElement("div");s.style.fontSize=t,r.appendChild(s),e=parseFloat(q.getStyles(s).fontSize),r.removeChild(s)}else{var a=this._context,o=a.font;a.font=t+" serif",e=parseFloat(a.font),a.font=o}return e},getTextWidth:function(t,e){var n=this._context,i=n.font,r=0;n.font=t;for(var s=0,a=e.length;a>s;s++)r=Math.max(r,n.measureText(e[s]).width);return n.font=i,r},update:function(t){var e=this._project;if(!e||!t&&!e._needsUpdate)return!1;var n=this._context,i=this._viewSize;return n.clearRect(0,0,i.width+1,i.height+1),e.draw(n,this._matrix,this._pixelRatio),e._needsUpdate=!1,!0}},new function(){function t(t,e,n,i,r,s){function a(t){return t.responds(e)&&(o||(o=new X(e,n,i,r,s?i.subtract(s):null)),t.emit(e,o)&&o.isStopped)?(n.preventDefault(),!0):void 0}for(var o,h=r;h;){if(a(h))return!0;h=h.getParent()}return a(t)?!0:!1}var e,n,i,r,s,a,o,h,u;return{_handleEvent:function(l,c,d){if(this._eventCounters[l]){var f=this._project,g=f.hitTest(c,{tolerance:0,fill:!0,stroke:!0}),_=g&&g.item,p=!1;switch(l){case"mousedown":for(p=t(this,l,d,c,_),h=s==_&&Date.now()-u<300,r=s=_,e=n=i=c,o=!p&&_;o&&!o.responds("mousedrag");)o=o._parent;break;case"mouseup":p=t(this,l,d,c,_,e),o&&(n&&!n.equals(c)&&t(this,"mousedrag",d,c,o,n),_!==o&&(i=c,t(this,"mousemove",d,c,_,i))),!p&&_&&_===r&&(u=Date.now(),t(this,h&&r.responds("doubleclick")?"doubleclick":"click",d,e,_),h=!1),r=o=null;break;case"mousemove":o&&(p=t(this,"mousedrag",d,c,o,n)),p||(_!==a&&(i=c),p=t(this,l,d,c,_,i)),n=i=c,_!==a&&(t(this,"mouseleave",d,c,a),a=_,t(this,"mouseenter",d,c,_))}return p}}}}),W=n.extend({_class:"Event",initialize:function(t){this.event=t},isPrevented:!1,isStopped:!1,preventDefault:function(){this.isPrevented=!0,this.event.preventDefault()},stopPropagation:function(){this.isStopped=!0,this.event.stopPropagation()},stop:function(){this.stopPropagation(),this.preventDefault()},getModifiers:function(){return $.modifiers}}),G=W.extend({_class:"KeyEvent",initialize:function(t,e,n,i){W.call(this,i),this.type=t?"keydown":"keyup",this.key=e,this.character=n},toString:function(){return"{ type: '"+this.type+"', key: '"+this.key+"', character: '"+this.character+"', modifiers: "+this.getModifiers()+" }"}}),$=new function(){function t(r,a,l,c){var d,f=l?String.fromCharCode(l):"",g=s[a],_=g||f.toLowerCase(),p=r?"keydown":"keyup",v=Z._focused,m=v&&v.isVisible()&&v._scope,y=m&&m.tool;if(u[_]=r,r?h[a]=l:delete h[a],g&&(d=n.camelize(g))in o){o[d]=r;var w=i.browser;if("command"===d&&w&&w.mac)if(r)e={};else{for(var x in e)x in h&&t(!1,x,e[x],c);e=null}}else r&&e&&(e[a]=l);y&&y.responds(p)&&(i=m,y.emit(p,new G(r,_,f,c)),v&&v.update())}var e,r,s={8:"backspace",9:"tab",13:"enter",16:"shift",17:"control",18:"option",19:"pause",20:"caps-lock",27:"escape",32:"space",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down",46:"delete",91:"command",93:"command",224:"command"},a={9:!0,13:!0,32:!0},o=new n({shift:!1,control:!1,option:!1,command:!1,capsLock:!1,space:!1}),h={},u={};return H.add(document,{keydown:function(e){var n=e.which||e.keyCode;n in s||o.command?t(!0,n,n in a||o.command?n:0,e):r=n},keypress:function(e){null!=r&&(t(!0,r,e.which||e.keyCode,e),r=null)},keyup:function(e){var n=e.which||e.keyCode;n in h&&t(!1,n,h[n],e)}}),H.add(window,{blur:function(e){for(var n in h)t(!1,n,h[n],e)}}),{modifiers:o,isDown:function(t){return!!u[t]}}},X=W.extend({_class:"MouseEvent",initialize:function(t,e,n,i,r){W.call(this,e),this.type=t,this.point=n,this.target=i,this.delta=r},toString:function(){return"{ type: '"+this.type+"', point: "+this.point+", target: "+this.target+(this.delta?", delta: "+this.delta:"")+", modifiers: "+this.getModifiers()+" }"}}),J=W.extend({_class:"ToolEvent",_item:null,initialize:function(t,e,n){this.tool=t,this.type=e,this.event=n},_choosePoint:function(t,e){return t?t:e?e.clone():null},getPoint:function(){return this._choosePoint(this._point,this.tool._point)},setPoint:function(t){this._point=t},getLastPoint:function(){return this._choosePoint(this._lastPoint,this.tool._lastPoint)},setLastPoint:function(t){this._lastPoint=t},getDownPoint:function(){return this._choosePoint(this._downPoint,this.tool._downPoint)},setDownPoint:function(t){this._downPoint=t},getMiddlePoint:function(){return!this._middlePoint&&this.tool._lastPoint?this.tool._point.add(this.tool._lastPoint).divide(2):this._middlePoint},setMiddlePoint:function(t){this._middlePoint=t},getDelta:function(){return!this._delta&&this.tool._lastPoint?this.tool._point.subtract(this.tool._lastPoint):this._delta},setDelta:function(t){this._delta=t},getCount:function(){return/^mouse(down|up)$/.test(this.type)?this.tool._downCount:this.tool._count},setCount:function(t){this.tool[/^mouse(down|up)$/.test(this.type)?"downCount":"count"]=t},getItem:function(){if(!this._item){var t=this.tool._scope.project.hitTest(this.getPoint());if(t){for(var e=t.item,n=e._parent;/^(Group|CompoundPath)$/.test(n._class);)e=n,n=n._parent;this._item=e}}return this._item},setItem:function(t){this._item=t},toString:function(){return"{ type: "+this.type+", point: "+this.getPoint()+", count: "+this.getCount()+", modifiers: "+this.getModifiers()+" }"}}),Y=a.extend({_class:"Tool",_list:"tools",_reference:"tool",_events:["onActivate","onDeactivate","onEditOptions","onMouseDown","onMouseUp","onMouseDrag","onMouseMove","onKeyDown","onKeyUp"],initialize:function(t){a.call(this),this._firstMove=!0,this._count=0,this._downCount=0,this._set(t)},getMinDistance:function(){return this._minDistance},setMinDistance:function(t){this._minDistance=t,null!=t&&null!=this._maxDistance&&t>this._maxDistance&&(this._maxDistance=t)},getMaxDistance:function(){return this._maxDistance},setMaxDistance:function(t){this._maxDistance=t,null!=this._minDistance&&null!=t&&t<this._minDistance&&(this._minDistance=t)},getFixedDistance:function(){return this._minDistance==this._maxDistance?this._minDistance:null},setFixedDistance:function(t){this._minDistance=this._maxDistance=t},_updateEvent:function(t,e,n,i,r,s,a){if(!r){if(null!=n||null!=i){var o=null!=n?n:0,h=e.subtract(this._point),u=h.getLength();if(o>u)return!1;if(null!=i&&0!=i)if(u>i)e=this._point.add(h.normalize(i));else if(a)return!1}if(s&&e.equals(this._point))return!1}switch(this._lastPoint=r&&"mousemove"==t?e:this._point,this._point=e,t){case"mousedown":this._lastPoint=this._downPoint,this._downPoint=this._point,this._downCount++;break;case"mouseup":this._lastPoint=this._downPoint}return this._count=r?0:this._count+1,!0},_fireEvent:function(t,e){var n=i.project._removeSets;if(n){"mouseup"===t&&(n.mousedrag=null);var r=n[t];if(r){for(var s in r){var a=r[s];for(var o in n){var h=n[o];h&&h!=r&&delete h[a._id]}a.remove()}n[t]=null}}return this.responds(t)&&this.emit(t,new J(this,t,e))},_handleEvent:function(t,e,n){i=this._scope;var r=!1;switch(t){case"mousedown":this._updateEvent(t,e,null,null,!0,!1,!1),r=this._fireEvent(t,n);break;case"mousedrag":for(var s=!1,a=!1;this._updateEvent(t,e,this.minDistance,this.maxDistance,!1,s,a);)r=this._fireEvent(t,n)||r,s=!0,a=!0;break;case"mouseup":!e.equals(this._point)&&this._updateEvent("mousedrag",e,this.minDistance,this.maxDistance,!1,!1,!1)&&(r=this._fireEvent("mousedrag",n)),this._updateEvent(t,e,null,this.maxDistance,!1,!1,!1),r=this._fireEvent(t,n)||r,this._updateEvent(t,e,null,null,!0,!1,!1),this._firstMove=!0;break;case"mousemove":for(;this._updateEvent(t,e,this.minDistance,this.maxDistance,this._firstMove,!0,!1);)r=this._fireEvent(t,n)||r,this._firstMove=!1}return r&&n.preventDefault(),r}}),Q={request:function(e,n,i,r){r=r===t?!0:r;var s=new(window.ActiveXObject||XMLHttpRequest)("Microsoft.XMLHTTP");return s.open(e.toUpperCase(),n,r),"overrideMimeType"in s&&s.overrideMimeType("text/plain"),s.onreadystatechange=function(){if(4===s.readyState){var t=s.status;if(0!==t&&200!==t)throw new Error("Could not load "+n+" (Error "+t+")");i.call(s,s.responseText)}},s.send(null)}},K={canvases:[],getCanvas:function(t,e){var n,i=!0;"object"==typeof t&&(e=t.height,t=t.width),n=this.canvases.length?this.canvases.pop():document.createElement("canvas");var r=n.getContext("2d");return n.width===t&&n.height===e?i&&r.clearRect(0,0,t+1,e+1):(n.width=t,n.height=e),r.save(),n},getContext:function(t,e){return this.getCanvas(t,e).getContext("2d")},release:function(t){var e=t.canvas?t.canvas:t;e.getContext("2d").restore(),this.canvases.push(e)}},tt=new function(){function t(t,e,n){return.2989*t+.587*e+.114*n}function e(e,n,i,r){var s=r-t(e,n,i);f=e+s,g=n+s,_=i+s;var r=t(f,g,_),a=p(f,g,_),o=v(f,g,_);if(0>a){var h=r-a;f=r+(f-r)*r/h,g=r+(g-r)*r/h,_=r+(_-r)*r/h}if(o>255){var u=255-r,l=o-r;f=r+(f-r)*u/l,g=r+(g-r)*u/l,_=r+(_-r)*u/l}}function i(t,e,n){return v(t,e,n)-p(t,e,n)}function r(t,e,n,i){var r,s=[t,e,n],a=v(t,e,n),o=p(t,e,n);o=o===t?0:o===e?1:2,a=a===t?0:a===e?1:2,r=0===p(o,a)?1===v(o,a)?2:1:0,s[a]>s[o]?(s[r]=(s[r]-s[o])*i/(s[a]-s[o]),s[a]=i):s[r]=s[a]=0,s[o]=0,f=s[0],g=s[1],_=s[2]}var s,a,o,h,u,l,c,d,f,g,_,p=Math.min,v=Math.max,m=Math.abs,y={multiply:function(){f=u*s/255,g=l*a/255,_=c*o/255},screen:function(){f=u+s-u*s/255,g=l+a-l*a/255,_=c+o-c*o/255},overlay:function(){f=128>u?2*u*s/255:255-2*(255-u)*(255-s)/255,g=128>l?2*l*a/255:255-2*(255-l)*(255-a)/255,_=128>c?2*c*o/255:255-2*(255-c)*(255-o)/255},"soft-light":function(){var t=s*u/255;f=t+u*(255-(255-u)*(255-s)/255-t)/255,t=a*l/255,g=t+l*(255-(255-l)*(255-a)/255-t)/255,t=o*c/255,_=t+c*(255-(255-c)*(255-o)/255-t)/255},"hard-light":function(){f=128>s?2*s*u/255:255-2*(255-s)*(255-u)/255,g=128>a?2*a*l/255:255-2*(255-a)*(255-l)/255,_=128>o?2*o*c/255:255-2*(255-o)*(255-c)/255},"color-dodge":function(){f=0===u?0:255===s?255:p(255,255*u/(255-s)),g=0===l?0:255===a?255:p(255,255*l/(255-a)),_=0===c?0:255===o?255:p(255,255*c/(255-o))},"color-burn":function(){f=255===u?255:0===s?0:v(0,255-255*(255-u)/s),g=255===l?255:0===a?0:v(0,255-255*(255-l)/a),_=255===c?255:0===o?0:v(0,255-255*(255-c)/o)},darken:function(){f=s>u?u:s,g=a>l?l:a,_=o>c?c:o},lighten:function(){f=u>s?u:s,g=l>a?l:a,_=c>o?c:o},difference:function(){f=u-s,0>f&&(f=-f),g=l-a,0>g&&(g=-g),_=c-o,0>_&&(_=-_)},exclusion:function(){f=u+s*(255-u-u)/255,g=l+a*(255-l-l)/255,_=c+o*(255-c-c)/255},hue:function(){r(s,a,o,i(u,l,c)),e(f,g,_,t(u,l,c))},saturation:function(){r(u,l,c,i(s,a,o)),e(f,g,_,t(u,l,c))},luminosity:function(){e(u,l,c,t(s,a,o))},color:function(){e(s,a,o,t(u,l,c))},add:function(){f=p(u+s,255),g=p(l+a,255),_=p(c+o,255)},subtract:function(){f=v(u-s,0),g=v(l-a,0),_=v(c-o,0)},average:function(){f=(u+s)/2,g=(l+a)/2,_=(c+o)/2},negation:function(){f=255-m(255-s-u),g=255-m(255-a-l),_=255-m(255-o-c)}},w=this.nativeModes=n.each(["source-over","source-in","source-out","source-atop","destination-over","destination-in","destination-out","destination-atop","lighter","darker","copy","xor"],function(t){this[t]=!0},{}),x=K.getContext(1,1);n.each(y,function(t,e){var n="darken"===e,i=!1;x.save();try{x.fillStyle=n?"#300":"#a00",x.fillRect(0,0,1,1),x.globalCompositeOperation=e,x.globalCompositeOperation===e&&(x.fillStyle=n?"#a00":"#300",x.fillRect(0,0,1,1),i=x.getImageData(0,0,1,1).data[0]!==n?170:51)}catch(r){}x.restore(),w[e]=i}),K.release(x),this.process=function(t,e,n,i,r){var p=e.canvas,v="normal"===t;if(v||w[t])n.save(),n.setTransform(1,0,0,1,0,0),n.globalAlpha=i,v||(n.globalCompositeOperation=t),n.drawImage(p,r.x,r.y),n.restore();else{var m=y[t];if(!m)return;for(var x=n.getImageData(r.x,r.y,p.width,p.height),b=x.data,C=e.getImageData(0,0,p.width,p.height).data,S=0,P=b.length;P>S;S+=4){s=C[S],u=b[S],a=C[S+1],l=b[S+1],o=C[S+2],c=b[S+2],h=C[S+3],d=b[S+3],m();var k=h*i/255,M=1-k;b[S]=k*f+M*u,b[S+1]=k*g+M*l,b[S+2]=k*_+M*c,b[S+3]=h*i+M*d}n.putImageData(x,r.x,r.y)}}},et=n.each({fillColor:["fill","color"],strokeColor:["stroke","color"],strokeWidth:["stroke-width","number"],strokeCap:["stroke-linecap","string"],strokeJoin:["stroke-linejoin","string"],strokeScaling:["vector-effect","lookup",{"true":"none","false":"non-scaling-stroke"},function(t,e){return!e&&(t instanceof O||t instanceof C||t instanceof j)}],miterLimit:["stroke-miterlimit","number"],dashArray:["stroke-dasharray","array"],dashOffset:["stroke-dashoffset","number"],fontFamily:["font-family","string"],fontWeight:["font-weight","string"],fontSize:["font-size","number"],justification:["text-anchor","lookup",{left:"start",center:"middle",right:"end"}],opacity:["opacity","number"],blendMode:["mix-blend-mode","string"]},function(t,e){var i=n.capitalize(e),r=t[2];this[e]={type:t[1],property:e,attribute:t[0],toSVG:r,fromSVG:r&&n.each(r,function(t,e){this[t]=e},{}),exportFilter:t[3],get:"get"+i,set:"set"+i}},{}),nt={href:"http://www.w3.org/1999/xlink",xlink:"http://www.w3.org/2000/xmlns"};return new function(){function t(t,e){for(var n in e){var i=e[n],r=nt[n];"number"==typeof i&&(i=b.number(i)),r?t.setAttributeNS(r,n,i):t.setAttribute(n,i)}return t}function e(e,n){return t(document.createElementNS("http://www.w3.org/2000/svg",e),n)}function i(t,e,i){var r=new n,s=t.getTranslation();if(e){t=t.shiftless();var a=t._inverseTransform(s);r[i?"cx":"x"]=a.x,r[i?"cy":"y"]=a.y,s=null}if(!t.isIdentity()){var o=t.decompose();if(o&&!o.shearing){var u=[],l=o.rotation,c=o.scaling;s&&!s.isZero()&&u.push("translate("+b.point(s)+")"),h.isZero(c.x-1)&&h.isZero(c.y-1)||u.push("scale("+b.point(c)+")"),l&&u.push("rotate("+b.number(l)+")"),r.transform=u.join(" ")}else r.transform="matrix("+t.getValues().join(",")+")"}return r}function r(n,r){for(var s=i(n._matrix),a=n._children,o=e("g",s),h=0,u=a.length;u>h;h++){var l=a[h],c=y(l,r);if(c)if(l.isClipMask()){var d=e("clipPath");d.appendChild(c),p(l,d,"clip"),t(o,{"clip-path":"url(#"+d.id+")"})}else o.appendChild(c)}return o}function s(t,n){var r=i(t._matrix,!0),s=t.getSize(),a=t.getImage();return r.x-=s.width/2,r.y-=s.height/2,r.width=s.width,r.height=s.height,r.href=n.embedImages===!1&&a&&a.src||t.toDataURL(),e("image",r)}function a(t,n){var r=n.matchShapes;if(r){var s=t.toShape(!1);if(s)return u(s,n)}var a,o=t._segments,h=i(t._matrix);if(0===o.length)return null;if(r&&!t.hasHandles())if(o.length>=3){a=t._closed?"polygon":"polyline";for(var l=[],c=0,d=o.length;d>c;c++)l.push(b.point(o[c]._point));h.points=l.join(" ")}else{a="line";var f=o[0]._point,g=o[o.length-1]._point;h.set({x1:f.x,y1:f.y,x2:g.x,y2:g.y})}else a="path",h.d=t.getPathData(null,n.precision);return e(a,h)}function u(t){var n=t._type,r=t._radius,s=i(t._matrix,!0,"rectangle"!==n);if("rectangle"===n){n="rect";var a=t._size,o=a.width,h=a.height;s.x-=o/2,s.y-=h/2,s.width=o,s.height=h,r.isZero()&&(r=null)}return r&&("circle"===n?s.r=r:(s.rx=r.width,s.ry=r.height)),e(n,s)}function l(t,n){var r=i(t._matrix),s=t.getPathData(null,n.precision);return s&&(r.d=s),e("path",r)}function c(t,n){var r=i(t._matrix,!0),s=t.getSymbol(),a=_(s,"symbol"),o=s.getDefinition(),h=o.getBounds();return a||(a=e("symbol",{viewBox:b.rectangle(h)}),a.appendChild(y(o,n)),p(s,a,"symbol")),r.href="#"+a.id,r.x+=h.x,r.y+=h.y,r.width=b.number(h.width),r.height=b.number(h.height),r.overflow="visible",e("use",r)}function d(t){var n=_(t,"color");if(!n){var i,r=t.getGradient(),s=r._radial,a=t.getOrigin().transform(),o=t.getDestination().transform();if(s){i={cx:a.x,cy:a.y,r:a.getDistance(o)};var h=t.getHighlight();h&&(h=h.transform(),i.fx=h.x,i.fy=h.y)}else i={x1:a.x,y1:a.y,x2:o.x,y2:o.y};i.gradientUnits="userSpaceOnUse",n=e((s?"radial":"linear")+"Gradient",i);for(var u=r._stops,l=0,c=u.length;c>l;l++){var d=u[l],f=d._color,g=f.getAlpha();i={offset:d._rampPoint,"stop-color":f.toCSS(!0)},1>g&&(i["stop-opacity"]=g),n.appendChild(e("stop",i))}p(t,n,"color")}return"url(#"+n.id+")"}function f(t){var n=e("text",i(t._matrix,!0));return n.textContent=t._content,n}function g(e,i,r){var s={},a=!r&&e.getParent();return null!=e._name&&(s.id=e._name),n.each(et,function(t){var i=t.get,r=t.type,o=e[i]();if(t.exportFilter?t.exportFilter(e,o):!a||!n.equals(a[i](),o)){if("color"===r&&null!=o){var h=o.getAlpha();1>h&&(s[t.attribute+"-opacity"]=h)}s[t.attribute]=null==o?"none":"number"===r?b.number(o):"color"===r?o.gradient?d(o,e):o.toCSS(!0):"array"===r?o.join(","):"lookup"===r?t.toSVG[o]:o}}),1===s.opacity&&delete s.opacity,e._visible||(s.visibility="hidden"),t(i,s)}function _(t,e){return C||(C={ids:{},svgs:{}}),t&&C.svgs[e+"-"+t._id]}function p(t,e,n){C||_();var i=C.ids[n]=(C.ids[n]||0)+1;e.id=n+"-"+i,C.svgs[n+"-"+t._id]=e}function v(t,n){var i=t,r=null;if(C){i="svg"===t.nodeName.toLowerCase()&&t;for(var s in C.svgs)r||(i||(i=e("svg"),i.appendChild(t)),r=i.insertBefore(e("defs"),i.firstChild)),r.appendChild(C.svgs[s]);C=null}return n.asString?(new XMLSerializer).serializeToString(i):i}function y(t,e,n){var i=S[t._class],r=i&&i(t,e);if(r){var s=e.onExport;s&&(r=s(t,r,e)||r);var a=JSON.stringify(t._data);a&&"{}"!==a&&"null"!==a&&r.setAttribute("data-paper-data",a)}return r&&g(t,r,n)}function x(t){return t||(t={}),b=new o(t.precision),t}var b,C,S={Group:r,Layer:r,Raster:s,Path:a,Shape:u,CompoundPath:l,PlacedSymbol:c,PointText:f};w.inject({exportSVG:function(t){return t=x(t),v(y(this,t,!0),t)}}),m.inject({exportSVG:function(t){t=x(t);var n=this.layers,r=this.getView(),s=r.getViewSize(),a=e("svg",{x:0,y:0,width:s.width,height:s.height,version:"1.1",xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}),o=a,h=r._matrix;h.isIdentity()||(o=a.appendChild(e("g",i(h))));for(var u=0,l=n.length;l>u;u++)o.appendChild(y(n[u],t,!0));return v(a,t)}})},new function(){function e(t,e,n,i){var r=nt[e],s=r?t.getAttributeNS(r,e):t.getAttribute(e);return"null"===s&&(s=null),null==s?i?null:n?"":0:n?s:parseFloat(s)}function r(t,n,i,r){return n=e(t,n,!1,r),i=e(t,i,!1,r),!r||null!=n&&null!=i?new l(n,i):null}function s(t,n,i,r){return n=e(t,n,!1,r),i=e(t,i,!1,r),!r||null!=n&&null!=i?new d(n,i):null}function a(t,e,n){return"none"===t?null:"number"===e?parseFloat(t):"array"===e?t?t.split(/[\s,]+/g).map(parseFloat):[]:"color"===e?P(t)||t:"lookup"===e?n[t]:t}function o(t,e,n,i){var r=t.childNodes,s="clippath"===e,a=new x,o=a._project,h=o._currentStyle,u=[];if(s||(a=b(a,t,i),o._currentStyle=a._style.clone()),i)for(var l=t.querySelectorAll("defs"),c=0,d=l.length;d>c;c++)k(l[c],n,!1);for(var c=0,d=r.length;d>c;c++){var f,g=r[c];1!==g.nodeType||"defs"===g.nodeName.toLowerCase()||!(f=k(g,n,!1))||f instanceof y||u.push(f)}return a.addChildren(u),s&&(a=b(a.reduce(),t,i)),o._currentStyle=h,(s||"defs"===e)&&(a.remove(),a=null),a}function h(t,e){for(var n=t.getAttribute("points").match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g),i=[],r=0,s=n.length;s>r;r+=2)i.push(new l(parseFloat(n[r]),parseFloat(n[r+1])));var a=new T(i);return"polygon"===e&&a.closePath(),a}function u(t){var e=t.getAttribute("d"),n={pathData:e};return(e.match(/m/gi)||[]).length>1||/z\S+/i.test(e)?new E(n):new T(n)}function c(t,n){var i,s=(e(t,"href",!0)||"").substring(1),a="radialgradient"===n;if(s)i=A[s].getGradient();else{for(var o=t.childNodes,h=[],u=0,l=o.length;l>u;u++){var c=o[u];1===c.nodeType&&h.push(b(new F,c))}i=new B(h,a)}var d,f,g;return a?(d=r(t,"cx","cy"),f=d.add(e(t,"r"),0),g=r(t,"fx","fy",!0)):(d=r(t,"x1","y1"),f=r(t,"x2","y2")),b(new R(i,d,f,g),t),null}function f(t,e,n,i){for(var r=(i.getAttribute(n)||"").split(/\)\s*/g),s=new p,a=0,o=r.length;o>a;a++){var h=r[a];if(!h)break;for(var u=h.split(/\(\s*/),l=u[0],c=u[1].split(/[\s,]+/g),d=0,f=c.length;f>d;d++)c[d]=parseFloat(c[d]);switch(l){case"matrix":s.concatenate(new p(c[0],c[1],c[2],c[3],c[4],c[5]));break;case"rotate":s.rotate(c[0],c[1],c[2]);break;case"translate":s.translate(c[0],c[1]);break;case"scale":s.scale(c);break;case"skewX":s.skew(c[0],0);break;case"skewY":s.skew(0,c[0])}}t.transform(s)}function _(t,e,n){var i=t["fill-opacity"===n?"getFillColor":"getStrokeColor"]();i&&i.setAlpha(parseFloat(e))}function v(e,i,r){var s=e.attributes[i],a=s&&s.value;if(!a){var o=n.camelize(i);a=e.style[o],a||r.node[o]===r.parent[o]||(a=r.node[o])}return a?"none"===a?null:a:t}function b(e,i,r){var s={node:q.getStyles(i)||{},parent:!r&&q.getStyles(i.parentNode)||{}};return n.each(I,function(r,a){var o=v(i,a,s);o!==t&&(e=n.pick(r(e,o,a,i,s),e))}),e}function P(t){var e=t&&t.match(/\((?:#|)([^)']+)/);return e&&A[e[1]]}function k(t,e,r){function s(t){i=o;var n=k(t,e,r),s=e.onLoad,a=o.project&&o.getView();s&&s.call(this,n),a.update()}if(!t)return null;e?"function"==typeof e&&(e={onLoad:e}):e={};var a=t,o=i;if(r)if("string"!=typeof t||/^.*</.test(t)){if("undefined"!=typeof File&&t instanceof File){var h=new FileReader;return h.onload=function(){s(h.result)},h.readAsText(t)}}else{if(a=document.getElementById(t),!a)return Q.request("get",t,s);t=null}if("string"==typeof t&&(a=(new DOMParser).parseFromString(t,"image/svg+xml")),!a.nodeName)throw new Error("Unsupported SVG source: "+t);var u,l=a.nodeName.toLowerCase(),c=M[l],d=a.getAttribute&&a.getAttribute("data-paper-data"),f=o.settings,g=f.applyMatrix;if(f.applyMatrix=!1,u=c&&c(a,l,e,r)||null,f.applyMatrix=g,u){"#document"===l||u instanceof x||(u=b(u,a,r));var _=e.onImport;_&&(u=_(a,u,e)||u),e.expandShapes&&u instanceof C&&(u.remove(),u=u.toPath()),d&&(u._data=JSON.parse(d))}return r&&(A={},u&&n.pick(e.applyMatrix,g)&&u.matrix.apply(!0,!0)),u}var M={"#document":function(t,e,n,i){for(var r=t.childNodes,s=0,a=r.length;a>s;s++){var o=r[s];if(1===o.nodeType){var h=o.nextSibling;document.body.appendChild(o);var u=k(o,n,i);return h?t.insertBefore(o,h):t.appendChild(o),u}}},g:o,svg:o,clippath:o,polygon:h,polyline:h,path:u,lineargradient:c,radialgradient:c,image:function(t){var n=new S(e(t,"href",!0));return n.on("load",function(){var e=s(t,"width","height");this.setSize(e);var n=this._matrix._transformPoint(r(t,"x","y").add(e.divide(2)));this.translate(n)}),n},symbol:function(t,e,n,i){return new y(o(t,e,n,i),!0)},defs:o,use:function(t){var n=(e(t,"href",!0)||"").substring(1),i=A[n],s=r(t,"x","y");return i?i instanceof y?i.place(s):i.clone().translate(s):null},circle:function(t){return new C.Circle(r(t,"cx","cy"),e(t,"r"))},ellipse:function(t){return new C.Ellipse({center:r(t,"cx","cy"),radius:s(t,"rx","ry")})},rect:function(t){var e=r(t,"x","y"),n=s(t,"width","height"),i=s(t,"rx","ry");return new C.Rectangle(new g(e,n),i)},line:function(t){return new T.Line(r(t,"x1","y1"),r(t,"x2","y2"))},text:function(t){var e=new D(r(t,"x","y").add(r(t,"dx","dy")));return e.setContent(t.textContent.trim()||""),e}},I=n.set(n.each(et,function(t){this[t.attribute]=function(e,n){if(e[t.set](a(n,t.type,t.fromSVG)),"color"===t.type&&e instanceof C){var i=e[t.get]();i&&i.transform((new p).translate(e.getPosition(!0).negate()))}}},{}),{id:function(t,e){A[e]=t,t.setName&&t.setName(e)},"clip-path":function(t,e){var n=P(e);if(n){if(n=n.clone(),n.setClipMask(!0),!(t instanceof x))return new x(n,t);t.insertChild(0,n)}},gradientTransform:f,transform:f,"fill-opacity":_,"stroke-opacity":_,visibility:function(t,e){t.setVisible("visible"===e)},display:function(t,e){t.setVisible(null!==e)},"stop-color":function(t,e){t.setColor&&t.setColor(e)},"stop-opacity":function(t,e){t._color&&t._color.setAlpha(parseFloat(e))},offset:function(t,e){var n=e.match(/(.*)%$/);t.setRampPoint(n?n[1]/100:parseFloat(e))},viewBox:function(t,e,n,i,r){var o=new g(a(e,"array")),h=s(i,"width","height",!0);if(t instanceof x){var u=h?o.getSize().divide(h):1,l=(new p).translate(o.getPoint()).scale(u);t.transform(l.inverted())}else if(t instanceof y){h&&o.setSize(h);var c="visible"!=v(i,"overflow",r),d=t._definition;c&&!o.contains(d.getBounds())&&(c=new C.Rectangle(o).transform(d._matrix),c.setClipMask(!0),d.addChild(c))}}}),A={};w.inject({importSVG:function(t,e){return this.addChild(k(t,e,!0))}}),m.inject({importSVG:function(t,e){return this.activate(),k(t,e,!0)}})},n.exports.PaperScript=function(){function t(t,e,n){var i=v[e];if(t&&t[i]){var r=t[i](n);return"!="===e?!r:r}switch(e){case"+":return t+n;case"-":return t-n;case"*":return t*n;case"/":return t/n;case"%":return t%n;case"==":return t==n;case"!=":return t!=n}}function r(t,e){var n=m[t];if(n&&e&&e[n])return e[n]();switch(t){case"+":return+e;case"-":return-e}}function a(t,e){return p.acorn.parse(t,e)}function o(t,e,n){function r(t){for(var e=0,n=l.length;n>e;e++){var i=l[e];if(i[0]>=t)break;t+=i[1]}return t}function s(e){return t.substring(r(e.range[0]),r(e.range[1]))}function o(e,n){return t.substring(r(e.range[1]),r(n.range[0]))}function h(e,n){for(var i=r(e.range[0]),s=r(e.range[1]),a=0,o=l.length-1;o>=0;o--)if(i>l[o][0]){a=o+1;break}l.splice(a,0,[i,n.length-s+i]),t=t.substring(0,i)+n+t.substring(s)}function u(t,e){if(t){for(var n in t)if("range"!==n&&"loc"!==n){var i=t[n];if(Array.isArray(i))for(var r=0,a=i.length;a>r;r++)u(i[r],t);else i&&"object"==typeof i&&u(i,t)}switch(t.type){case"UnaryExpression":if(t.operator in m&&"Literal"!==t.argument.type){var l=s(t.argument);h(t,'$__("'+t.operator+'", '+l+")")}break;case"BinaryExpression":if(t.operator in v&&"Literal"!==t.left.type){var c=s(t.left),d=s(t.right),f=o(t.left,t.right),g=t.operator;h(t,"__$__("+c+","+f.replace(new RegExp("\\"+g),'"'+g+'"')+", "+d+")")}break;case"UpdateExpression":case"AssignmentExpression":var _=e&&e.type;if(!("ForStatement"===_||"BinaryExpression"===_&&/^[=!<>]/.test(e.operator)||"MemberExpression"===_&&e.computed))if("UpdateExpression"===t.type){var l=s(t.argument),p="__$__("+l+', "'+t.operator[0]+'", 1)',y=l+" = "+p;t.prefix||"AssignmentExpression"!==_&&"VariableDeclarator"!==_||(s(e.left||e.id)===l&&(y=p),y=l+"; "+y),h(t,y)}else if(/^.=$/.test(t.operator)&&"Literal"!==t.left.type){var c=s(t.left),d=s(t.right);h(t,c+" = __$__("+c+', "'+t.operator[0]+'", '+d+")")}}}}if(!t)return"";n=n||{},e=e||"";var l=[],c=null,d=i.browser,f=d.versionNumber,g=/\r\n|\n|\r/gm;if(d.chrome&&f>=30||d.webkit&&f>=537.76||d.firefox&&f>=23){var _=0;if(0===window.location.href.indexOf(e)){var p=document.getElementsByTagName("html")[0].innerHTML;_=p.substr(0,p.indexOf(t)+1).match(g).length+1}var y=["AAAA"];y.length=(t.match(g)||[]).length+1+_,c={version:3,file:e,names:[],mappings:y.join(";AACA"),sourceRoot:"",sources:[e]};var w=n.source||!e&&t;w&&(c.sourcesContent=[w])}return u(a(t,{ranges:!0})),c&&(t=new Array(_+1).join("\n")+t+"\n//# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(c))))+"\n//# sourceURL="+(e||"paperscript")),t}function h(e,s,a,h){function u(t,n){for(var i in t)!n&&/^_/.test(i)||!new RegExp("([\\b\\s\\W]|^)"+i.replace(/\$/g,"\\$")+"\\b").test(e)||(p.push(i),v.push(t[i]))}i=s;var c,d=s.getView(),f=/\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(e)?new Y:null,g=f?f._events:[],_=["onFrame","onResize"].concat(g),p=[],v=[];e=o(e,a,h),u({__$__:t,$__:r,paper:s,view:d,tool:f},!0),u(s),_=n.each(_,function(t){new RegExp("\\s+"+t+"\\b").test(e)&&(p.push(t),this.push(t+": "+t))},[]).join(", "),_&&(e+="\nreturn { "+_+" };");var m=i.browser;if(m.chrome||m.firefox){var y=document.createElement("script"),w=document.head||document.getElementsByTagName("head")[0];m.firefox&&(e="\n"+e),y.appendChild(document.createTextNode("paper._execute = function("+p+") {"+e+"\n}")),w.appendChild(y),c=i._execute,delete i._execute,w.removeChild(y)}else c=Function(p,e);var x=c.apply(s,v)||{};n.each(g,function(t){var e=x[t];e&&(f[t]=e)}),d&&(x.onResize&&d.setOnResize(x.onResize),d.emit("resize",{size:d.size,delta:new l}),x.onFrame&&d.setOnFrame(x.onFrame),d.update())}function u(t){if(/^text\/(?:x-|)paperscript$/.test(t.type)&&"true"!==s.getAttribute(t,"ignore")){var e=s.getAttribute(t,"canvas"),n=document.getElementById(e),i=t.src||t.getAttribute("data-src"),r=s.hasAttribute(t,"async"),a="data-paper-scope";if(!n)throw new Error('Unable to find canvas with id "'+e+'"');var o=s.get(n.getAttribute(a))||(new s).setup(n);return n.setAttribute(a,o._id),i?Q.request("get",i,function(t){h(t,o,i)},r):h(t.innerHTML,o,t.baseURI),t.setAttribute("data-paper-ignore","true"),o}}function c(){n.each(document.getElementsByTagName("script"),u)}function f(t){return t?u(t):c()}var g,_,p=this;!function(t,n){return"object"==typeof g&&"object"==typeof e?n(g):"function"==typeof _&&_.amd?_(["exports"],n):void n(t.acorn||(t.acorn={}))}(this,function(t){"use strict";function e(t){ct=t||{};for(var e in _t)Object.prototype.hasOwnProperty.call(ct,e)||(ct[e]=_t[e]);gt=ct.sourceFile||null}function n(t,e){var n=pt(dt,t);e+=" ("+n.line+":"+n.column+")";var i=new SyntaxError(e);throw i.pos=t,i.loc=n,i.raisedAt=vt,i}function i(t){function e(t){if(1==t.length)return n+="return str === "+JSON.stringify(t[0])+";";
n+="switch(str){";for(var e=0;e<t.length;++e)n+="case "+JSON.stringify(t[e])+":";n+="return true}return false;"}t=t.split(" ");var n="",i=[];t:for(var r=0;r<t.length;++r){for(var s=0;s<i.length;++s)if(i[s][0].length==t[r].length){i[s].push(t[r]);continue t}i.push([t[r]])}if(i.length>3){i.sort(function(t,e){return e.length-t.length}),n+="switch(str.length){";for(var r=0;r<i.length;++r){var a=i[r];n+="case "+a[0].length+":",e(a)}n+="}"}else e(t);return new Function("str",n)}function r(){this.line=Pt,this.column=vt-kt}function s(){Pt=1,vt=kt=0,St=!0,u()}function a(t,e){yt=vt,ct.locations&&(xt=new r),bt=t,u(),Ct=e,St=t.beforeExpr}function o(){var t=ct.onComment&&ct.locations&&new r,e=vt,i=dt.indexOf("*/",vt+=2);if(-1===i&&n(vt-2,"Unterminated comment"),vt=i+2,ct.locations){Je.lastIndex=e;for(var s;(s=Je.exec(dt))&&s.index<vt;)++Pt,kt=s.index+s[0].length}ct.onComment&&ct.onComment(!0,dt.slice(e+2,i),e,vt,t,ct.locations&&new r)}function h(){for(var t=vt,e=ct.onComment&&ct.locations&&new r,n=dt.charCodeAt(vt+=2);ft>vt&&10!==n&&13!==n&&8232!==n&&8233!==n;)++vt,n=dt.charCodeAt(vt);ct.onComment&&ct.onComment(!1,dt.slice(t+2,vt),t,vt,e,ct.locations&&new r)}function u(){for(;ft>vt;){var t=dt.charCodeAt(vt);if(32===t)++vt;else if(13===t){++vt;var e=dt.charCodeAt(vt);10===e&&++vt,ct.locations&&(++Pt,kt=vt)}else if(10===t||8232===t||8233===t)++vt,ct.locations&&(++Pt,kt=vt);else if(t>8&&14>t)++vt;else if(47===t){var e=dt.charCodeAt(vt+1);if(42===e)o();else{if(47!==e)break;h()}}else if(160===t)++vt;else{if(!(t>=5760&&Ze.test(String.fromCharCode(t))))break;++vt}}}function l(){var t=dt.charCodeAt(vt+1);return t>=48&&57>=t?S(!0):(++vt,a(we))}function c(){var t=dt.charCodeAt(vt+1);return St?(++vt,x()):61===t?w(Se,2):w(be,1)}function d(){var t=dt.charCodeAt(vt+1);return 61===t?w(Se,2):w(je,1)}function f(t){var e=dt.charCodeAt(vt+1);return e===t?w(124===t?Ie:Ae,2):61===e?w(Se,2):w(124===t?ze:Te,1)}function g(){var t=dt.charCodeAt(vt+1);return 61===t?w(Se,2):w(Oe,1)}function _(t){var e=dt.charCodeAt(vt+1);return e===t?45==e&&62==dt.charCodeAt(vt+2)&&Xe.test(dt.slice(It,vt))?(vt+=3,h(),u(),y()):w(ke,2):61===e?w(Se,2):w(Pe,1)}function p(t){var e=dt.charCodeAt(vt+1),n=1;return e===t?(n=62===t&&62===dt.charCodeAt(vt+2)?3:2,61===dt.charCodeAt(vt+n)?w(Se,n+1):w(Le,n)):33==e&&60==t&&45==dt.charCodeAt(vt+2)&&45==dt.charCodeAt(vt+3)?(vt+=4,h(),u(),y()):(61===e&&(n=61===dt.charCodeAt(vt+2)?3:2),w(Ne,n))}function v(t){var e=dt.charCodeAt(vt+1);return 61===e?w(Ee,61===dt.charCodeAt(vt+2)?3:2):w(61===t?Ce:Me,1)}function m(t){switch(t){case 46:return l();case 40:return++vt,a(_e);case 41:return++vt,a(pe);case 59:return++vt,a(me);case 44:return++vt,a(ve);case 91:return++vt,a(ce);case 93:return++vt,a(de);case 123:return++vt,a(fe);case 125:return++vt,a(ge);case 58:return++vt,a(ye);case 63:return++vt,a(xe);case 48:var e=dt.charCodeAt(vt+1);if(120===e||88===e)return C();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return S(!1);case 34:case 39:return P(t);case 47:return c(t);case 37:case 42:return d();case 124:case 38:return f(t);case 94:return g();case 43:case 45:return _(t);case 60:case 62:return p(t);case 61:case 33:return v(t);case 126:return w(Me,1)}return!1}function y(t){if(t?vt=mt+1:mt=vt,ct.locations&&(wt=new r),t)return x();if(vt>=ft)return a(Rt);var e=dt.charCodeAt(vt);if(Ye(e)||92===e)return I();var i=m(e);if(i===!1){var s=String.fromCharCode(e);if("\\"===s||Ge.test(s))return I();n(vt,"Unexpected character '"+s+"'")}return i}function w(t,e){var n=dt.slice(vt,vt+e);vt+=e,a(t,n)}function x(){for(var t,e,i="",r=vt;;){vt>=ft&&n(r,"Unterminated regular expression");var s=dt.charAt(vt);if(Xe.test(s)&&n(r,"Unterminated regular expression"),t)t=!1;else{if("["===s)e=!0;else if("]"===s&&e)e=!1;else if("/"===s&&!e)break;t="\\"===s}++vt}var i=dt.slice(r,vt);++vt;var o=M();return o&&!/^[gmsiy]*$/.test(o)&&n(r,"Invalid regexp flag"),a(Lt,new RegExp(i,o))}function b(t,e){for(var n=vt,i=0,r=0,s=null==e?1/0:e;s>r;++r){var a,o=dt.charCodeAt(vt);if(a=o>=97?o-97+10:o>=65?o-65+10:o>=48&&57>=o?o-48:1/0,a>=t)break;++vt,i=i*t+a}return vt===n||null!=e&&vt-n!==e?null:i}function C(){vt+=2;var t=b(16);return null==t&&n(mt+2,"Expected hexadecimal number"),Ye(dt.charCodeAt(vt))&&n(vt,"Identifier directly after number"),a(Nt,t)}function S(t){var e=vt,i=!1,r=48===dt.charCodeAt(vt);t||null!==b(10)||n(e,"Invalid number"),46===dt.charCodeAt(vt)&&(++vt,b(10),i=!0);var s=dt.charCodeAt(vt);(69===s||101===s)&&(s=dt.charCodeAt(++vt),(43===s||45===s)&&++vt,null===b(10)&&n(e,"Invalid number"),i=!0),Ye(dt.charCodeAt(vt))&&n(vt,"Identifier directly after number");var o,h=dt.slice(e,vt);return i?o=parseFloat(h):r&&1!==h.length?/[89]/.test(h)||Tt?n(e,"Invalid number"):o=parseInt(h,8):o=parseInt(h,10),a(Nt,o)}function P(t){vt++;for(var e="";;){vt>=ft&&n(mt,"Unterminated string constant");var i=dt.charCodeAt(vt);if(i===t)return++vt,a(jt,e);if(92===i){i=dt.charCodeAt(++vt);var r=/^[0-7]+/.exec(dt.slice(vt,vt+3));for(r&&(r=r[0]);r&&parseInt(r,8)>255;)r=r.slice(0,r.length-1);if("0"===r&&(r=null),++vt,r)Tt&&n(vt-2,"Octal literal in strict mode"),e+=String.fromCharCode(parseInt(r,8)),vt+=r.length-1;else switch(i){case 110:e+="\n";break;case 114:e+="\r";break;case 120:e+=String.fromCharCode(k(2));break;case 117:e+=String.fromCharCode(k(4));break;case 85:e+=String.fromCharCode(k(8));break;case 116:e+="	";break;case 98:e+="\b";break;case 118:e+="\x0B";break;case 102:e+="\f";break;case 48:e+="\x00";break;case 13:10===dt.charCodeAt(vt)&&++vt;case 10:ct.locations&&(kt=vt,++Pt);break;default:e+=String.fromCharCode(i)}}else(13===i||10===i||8232===i||8233===i)&&n(mt,"Unterminated string constant"),e+=String.fromCharCode(i),++vt}}function k(t){var e=b(16,t);return null===e&&n(mt,"Bad character escape sequence"),e}function M(){Re=!1;for(var t,e=!0,i=vt;;){var r=dt.charCodeAt(vt);if(Qe(r))Re&&(t+=dt.charAt(vt)),++vt;else{if(92!==r)break;Re||(t=dt.slice(i,vt)),Re=!0,117!=dt.charCodeAt(++vt)&&n(vt,"Expecting Unicode escape sequence \\uXXXX"),++vt;var s=k(4),a=String.fromCharCode(s);a||n(vt-1,"Invalid Unicode escape"),(e?Ye(s):Qe(s))||n(vt-4,"Invalid Unicode escape"),t+=a}e=!1}return Re?t:dt.slice(i,vt)}function I(){var t=M(),e=Dt;return Re||(He(t)?e=le[t]:(ct.forbidReserved&&(3===ct.ecmaVersion?Be:Fe)(t)||Tt&&Ve(t))&&n(mt,"The keyword '"+t+"' is reserved")),a(e,t)}function A(){Mt=mt,It=yt,At=xt,y()}function z(t){if(Tt=t,vt=It,ct.locations)for(;kt>vt;)kt=dt.lastIndexOf("\n",kt-2)+1,--Pt;u(),y()}function O(){this.type=null,this.start=mt,this.end=null}function T(){this.start=wt,this.end=null,null!==gt&&(this.source=gt)}function E(){var t=new O;return ct.locations&&(t.loc=new T),ct.ranges&&(t.range=[mt,0]),t}function N(t){var e=new O;return e.start=t.start,ct.locations&&(e.loc=new T,e.loc.start=t.loc.start),ct.ranges&&(e.range=[t.range[0],0]),e}function L(t,e){return t.type=e,t.end=It,ct.locations&&(t.loc.end=At),ct.ranges&&(t.range[1]=It),t}function j(t){return ct.ecmaVersion>=5&&"ExpressionStatement"===t.type&&"Literal"===t.expression.type&&"use strict"===t.expression.value}function D(t){return bt===t?(A(),!0):void 0}function R(){return!ct.strictSemicolons&&(bt===Rt||bt===ge||Xe.test(dt.slice(It,mt)))}function B(){D(me)||R()||V()}function F(t){bt===t?A():V()}function V(){n(mt,"Unexpected token")}function q(t){"Identifier"!==t.type&&"MemberExpression"!==t.type&&n(t.start,"Assigning to rvalue"),Tt&&"Identifier"===t.type&&qe(t.name)&&n(t.start,"Assigning to "+t.name+" in strict mode")}function H(t){Mt=It=vt,ct.locations&&(At=new r),zt=Tt=null,Ot=[],y();var e=t||E(),n=!0;for(t||(e.body=[]);bt!==Rt;){var i=Z();e.body.push(i),n&&j(i)&&z(!0),n=!1}return L(e,"Program")}function Z(){(bt===be||bt===Se&&"/="==Ct)&&y(!0);var t=bt,e=E();switch(t){case Bt:case qt:A();var i=t===Bt;D(me)||R()?e.label=null:bt!==Dt?V():(e.label=lt(),B());for(var r=0;r<Ot.length;++r){var s=Ot[r];if(null==e.label||s.name===e.label.name){if(null!=s.kind&&(i||"loop"===s.kind))break;if(e.label&&i)break}}return r===Ot.length&&n(e.start,"Unsyntactic "+t.keyword),L(e,i?"BreakStatement":"ContinueStatement");case Ht:return A(),B(),L(e,"DebuggerStatement");case Ut:return A(),Ot.push(Ke),e.body=Z(),Ot.pop(),F(ne),e.test=U(),B(),L(e,"DoWhileStatement");case $t:if(A(),Ot.push(Ke),F(_e),bt===me)return G(e,null);if(bt===ee){var a=E();return A(),X(a,!0),L(a,"VariableDeclaration"),1===a.declarations.length&&D(ue)?$(e,a):G(e,a)}var a=J(!1,!0);return D(ue)?(q(a),$(e,a)):G(e,a);case Xt:return A(),ht(e,!0);case Jt:return A(),e.test=U(),e.consequent=Z(),e.alternate=D(Wt)?Z():null,L(e,"IfStatement");case Yt:return zt||n(mt,"'return' outside of function"),A(),D(me)||R()?e.argument=null:(e.argument=J(),B()),L(e,"ReturnStatement");case Qt:A(),e.discriminant=U(),e.cases=[],F(fe),Ot.push(tn);for(var o,h;bt!=ge;)if(bt===Ft||bt===Zt){var u=bt===Ft;o&&L(o,"SwitchCase"),e.cases.push(o=E()),o.consequent=[],A(),u?o.test=J():(h&&n(Mt,"Multiple default clauses"),h=!0,o.test=null),F(ye)}else o||V(),o.consequent.push(Z());return o&&L(o,"SwitchCase"),A(),Ot.pop(),L(e,"SwitchStatement");case Kt:return A(),Xe.test(dt.slice(It,mt))&&n(It,"Illegal newline after throw"),e.argument=J(),B(),L(e,"ThrowStatement");case te:if(A(),e.block=W(),e.handler=null,bt===Vt){var l=E();A(),F(_e),l.param=lt(),Tt&&qe(l.param.name)&&n(l.param.start,"Binding "+l.param.name+" in strict mode"),F(pe),l.guard=null,l.body=W(),e.handler=L(l,"CatchClause")}return e.guardedHandlers=Et,e.finalizer=D(Gt)?W():null,e.handler||e.finalizer||n(e.start,"Missing catch or finally clause"),L(e,"TryStatement");case ee:return A(),X(e),B(),L(e,"VariableDeclaration");case ne:return A(),e.test=U(),Ot.push(Ke),e.body=Z(),Ot.pop(),L(e,"WhileStatement");case ie:return Tt&&n(mt,"'with' in strict mode"),A(),e.object=U(),e.body=Z(),L(e,"WithStatement");case fe:return W();case me:return A(),L(e,"EmptyStatement");default:var c=Ct,d=J();if(t===Dt&&"Identifier"===d.type&&D(ye)){for(var r=0;r<Ot.length;++r)Ot[r].name===c&&n(d.start,"Label '"+c+"' is already declared");var f=bt.isLoop?"loop":bt===Qt?"switch":null;return Ot.push({name:c,kind:f}),e.body=Z(),Ot.pop(),e.label=d,L(e,"LabeledStatement")}return e.expression=d,B(),L(e,"ExpressionStatement")}}function U(){F(_e);var t=J();return F(pe),t}function W(t){var e,n=E(),i=!0,r=!1;for(n.body=[],F(fe);!D(ge);){var s=Z();n.body.push(s),i&&t&&j(s)&&(e=r,z(r=!0)),i=!1}return r&&!e&&z(!1),L(n,"BlockStatement")}function G(t,e){return t.init=e,F(me),t.test=bt===me?null:J(),F(me),t.update=bt===pe?null:J(),F(pe),t.body=Z(),Ot.pop(),L(t,"ForStatement")}function $(t,e){return t.left=e,t.right=J(),F(pe),t.body=Z(),Ot.pop(),L(t,"ForInStatement")}function X(t,e){for(t.declarations=[],t.kind="var";;){var i=E();if(i.id=lt(),Tt&&qe(i.id.name)&&n(i.id.start,"Binding "+i.id.name+" in strict mode"),i.init=D(Ce)?J(!0,e):null,t.declarations.push(L(i,"VariableDeclarator")),!D(ve))break}return t}function J(t,e){var n=Y(e);if(!t&&bt===ve){var i=N(n);for(i.expressions=[n];D(ve);)i.expressions.push(Y(e));return L(i,"SequenceExpression")}return n}function Y(t){var e=Q(t);if(bt.isAssign){var n=N(e);return n.operator=Ct,n.left=e,A(),n.right=Y(t),q(e),L(n,"AssignmentExpression")}return e}function Q(t){var e=K(t);if(D(xe)){var n=N(e);return n.test=e,n.consequent=J(!0),F(ye),n.alternate=J(!0,t),L(n,"ConditionalExpression")}return e}function K(t){return tt(et(),-1,t)}function tt(t,e,n){var i=bt.binop;if(null!=i&&(!n||bt!==ue)&&i>e){var r=N(t);r.left=t,r.operator=Ct,A(),r.right=tt(et(),i,n);var s=L(r,/&&|\|\|/.test(r.operator)?"LogicalExpression":"BinaryExpression");return tt(s,e,n)}return t}function et(){if(bt.prefix){var t=E(),e=bt.isUpdate;return t.operator=Ct,t.prefix=!0,St=!0,A(),t.argument=et(),e?q(t.argument):Tt&&"delete"===t.operator&&"Identifier"===t.argument.type&&n(t.start,"Deleting local variable in strict mode"),L(t,e?"UpdateExpression":"UnaryExpression")}for(var i=nt();bt.postfix&&!R();){var t=N(i);t.operator=Ct,t.prefix=!1,t.argument=i,q(i),A(),i=L(t,"UpdateExpression")}return i}function nt(){return it(rt())}function it(t,e){if(D(we)){var n=N(t);return n.object=t,n.property=lt(!0),n.computed=!1,it(L(n,"MemberExpression"),e)}if(D(ce)){var n=N(t);return n.object=t,n.property=J(),n.computed=!0,F(de),it(L(n,"MemberExpression"),e)}if(!e&&D(_e)){var n=N(t);return n.callee=t,n.arguments=ut(pe,!1),it(L(n,"CallExpression"),e)}return t}function rt(){switch(bt){case se:var t=E();return A(),L(t,"ThisExpression");case Dt:return lt();case Nt:case jt:case Lt:var t=E();return t.value=Ct,t.raw=dt.slice(mt,yt),A(),L(t,"Literal");case ae:case oe:case he:var t=E();return t.value=bt.atomValue,t.raw=bt.keyword,A(),L(t,"Literal");case _e:var e=wt,n=mt;A();var i=J();return i.start=n,i.end=yt,ct.locations&&(i.loc.start=e,i.loc.end=xt),ct.ranges&&(i.range=[n,yt]),F(pe),i;case ce:var t=E();return A(),t.elements=ut(de,!0,!0),L(t,"ArrayExpression");case fe:return at();case Xt:var t=E();return A(),ht(t,!1);case re:return st();default:V()}}function st(){var t=E();return A(),t.callee=it(rt(),!0),t.arguments=D(_e)?ut(pe,!1):Et,L(t,"NewExpression")}function at(){var t=E(),e=!0,i=!1;for(t.properties=[],A();!D(ge);){if(e)e=!1;else if(F(ve),ct.allowTrailingCommas&&D(ge))break;var r,s={key:ot()},a=!1;if(D(ye)?(s.value=J(!0),r=s.kind="init"):ct.ecmaVersion>=5&&"Identifier"===s.key.type&&("get"===s.key.name||"set"===s.key.name)?(a=i=!0,r=s.kind=s.key.name,s.key=ot(),bt!==_e&&V(),s.value=ht(E(),!1)):V(),"Identifier"===s.key.type&&(Tt||i))for(var o=0;o<t.properties.length;++o){var h=t.properties[o];if(h.key.name===s.key.name){var u=r==h.kind||a&&"init"===h.kind||"init"===r&&("get"===h.kind||"set"===h.kind);u&&!Tt&&"init"===r&&"init"===h.kind&&(u=!1),u&&n(s.key.start,"Redefinition of property")}}t.properties.push(s)}return L(t,"ObjectExpression")}function ot(){return bt===Nt||bt===jt?rt():lt(!0)}function ht(t,e){bt===Dt?t.id=lt():e?V():t.id=null,t.params=[];var i=!0;for(F(_e);!D(pe);)i?i=!1:F(ve),t.params.push(lt());var r=zt,s=Ot;if(zt=!0,Ot=[],t.body=W(!0),zt=r,Ot=s,Tt||t.body.body.length&&j(t.body.body[0]))for(var a=t.id?-1:0;a<t.params.length;++a){var o=0>a?t.id:t.params[a];if((Ve(o.name)||qe(o.name))&&n(o.start,"Defining '"+o.name+"' in strict mode"),a>=0)for(var h=0;a>h;++h)o.name===t.params[h].name&&n(o.start,"Argument name clash in strict mode")}return L(t,e?"FunctionDeclaration":"FunctionExpression")}function ut(t,e,n){for(var i=[],r=!0;!D(t);){if(r)r=!1;else if(F(ve),e&&ct.allowTrailingCommas&&D(t))break;n&&bt===ve?i.push(null):i.push(J(!0))}return i}function lt(t){var e=E();return e.name=bt===Dt?Ct:t&&!ct.forbidReserved&&bt.keyword||V(),St=!1,A(),L(e,"Identifier")}t.version="0.4.0";var ct,dt,ft,gt;t.parse=function(t,n){return dt=String(t),ft=dt.length,e(n),s(),H(ct.program)};var _t=t.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null},pt=t.getLineInfo=function(t,e){for(var n=1,i=0;;){Je.lastIndex=i;var r=Je.exec(t);if(!(r&&r.index<e))break;++n,i=r.index+r[0].length}return{line:n,column:e-i}};t.tokenize=function(t,n){function i(t){return y(t),r.start=mt,r.end=yt,r.startLoc=wt,r.endLoc=xt,r.type=bt,r.value=Ct,r}dt=String(t),ft=dt.length,e(n),s();var r={};return i.jumpTo=function(t,e){if(vt=t,ct.locations){Pt=1,kt=Je.lastIndex=0;for(var n;(n=Je.exec(dt))&&n.index<t;)++Pt,kt=n.index+n[0].length}St=e,u()},i};var vt,mt,yt,wt,xt,bt,Ct,St,Pt,kt,Mt,It,At,zt,Ot,Tt,Et=[],Nt={type:"num"},Lt={type:"regexp"},jt={type:"string"},Dt={type:"name"},Rt={type:"eof"},Bt={keyword:"break"},Ft={keyword:"case",beforeExpr:!0},Vt={keyword:"catch"},qt={keyword:"continue"},Ht={keyword:"debugger"},Zt={keyword:"default"},Ut={keyword:"do",isLoop:!0},Wt={keyword:"else",beforeExpr:!0},Gt={keyword:"finally"},$t={keyword:"for",isLoop:!0},Xt={keyword:"function"},Jt={keyword:"if"},Yt={keyword:"return",beforeExpr:!0},Qt={keyword:"switch"},Kt={keyword:"throw",beforeExpr:!0},te={keyword:"try"},ee={keyword:"var"},ne={keyword:"while",isLoop:!0},ie={keyword:"with"},re={keyword:"new",beforeExpr:!0},se={keyword:"this"},ae={keyword:"null",atomValue:null},oe={keyword:"true",atomValue:!0},he={keyword:"false",atomValue:!1},ue={keyword:"in",binop:7,beforeExpr:!0},le={"break":Bt,"case":Ft,"catch":Vt,"continue":qt,"debugger":Ht,"default":Zt,"do":Ut,"else":Wt,"finally":Gt,"for":$t,"function":Xt,"if":Jt,"return":Yt,"switch":Qt,"throw":Kt,"try":te,"var":ee,"while":ne,"with":ie,"null":ae,"true":oe,"false":he,"new":re,"in":ue,"instanceof":{keyword:"instanceof",binop:7,beforeExpr:!0},"this":se,"typeof":{keyword:"typeof",prefix:!0,beforeExpr:!0},"void":{keyword:"void",prefix:!0,beforeExpr:!0},"delete":{keyword:"delete",prefix:!0,beforeExpr:!0}},ce={type:"[",beforeExpr:!0},de={type:"]"},fe={type:"{",beforeExpr:!0},ge={type:"}"},_e={type:"(",beforeExpr:!0},pe={type:")"},ve={type:",",beforeExpr:!0},me={type:";",beforeExpr:!0},ye={type:":",beforeExpr:!0},we={type:"."},xe={type:"?",beforeExpr:!0},be={binop:10,beforeExpr:!0},Ce={isAssign:!0,beforeExpr:!0},Se={isAssign:!0,beforeExpr:!0},Pe={binop:9,prefix:!0,beforeExpr:!0},ke={postfix:!0,prefix:!0,isUpdate:!0},Me={prefix:!0,beforeExpr:!0},Ie={binop:1,beforeExpr:!0},Ae={binop:2,beforeExpr:!0},ze={binop:3,beforeExpr:!0},Oe={binop:4,beforeExpr:!0},Te={binop:5,beforeExpr:!0},Ee={binop:6,beforeExpr:!0},Ne={binop:7,beforeExpr:!0},Le={binop:8,beforeExpr:!0},je={binop:10,beforeExpr:!0};t.tokTypes={bracketL:ce,bracketR:de,braceL:fe,braceR:ge,parenL:_e,parenR:pe,comma:ve,semi:me,colon:ye,dot:we,question:xe,slash:be,eq:Ce,name:Dt,eof:Rt,num:Nt,regexp:Lt,string:jt};for(var De in le)t.tokTypes["_"+De]=le[De];var Re,Be=i("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile"),Fe=i("class enum extends super const export import"),Ve=i("implements interface let package private protected public static yield"),qe=i("eval arguments"),He=i("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"),Ze=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/,Ue="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",We="̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿",Ge=new RegExp("["+Ue+"]"),$e=new RegExp("["+Ue+We+"]"),Xe=/[\n\r\u2028\u2029]/,Je=/\r\n|[\n\r\u2028\u2029]/g,Ye=t.isIdentifierStart=function(t){return 65>t?36===t:91>t?!0:97>t?95===t:123>t?!0:t>=170&&Ge.test(String.fromCharCode(t))},Qe=t.isIdentifierChar=function(t){return 48>t?36===t:58>t?!0:65>t?!1:91>t?!0:97>t?95===t:123>t?!0:t>=170&&$e.test(String.fromCharCode(t))},Ke={kind:"loop"},tn={kind:"switch"}});var v={"+":"__add","-":"__subtract","*":"__multiply","/":"__divide","%":"__modulo","==":"equals","!=":"equals"},m={"-":"__negate","+":null},y=n.each(["add","subtract","multiply","divide","modulo","negate"],function(t){this["__"+t]="#"+t},{});return l.inject(y),d.inject(y),R.inject(y),"complete"===document.readyState?setTimeout(c):H.add(window,{load:c}),{compile:o,execute:h,load:f,parse:a}}.call(this),i=new(s.inject(n.exports,{enumerable:!0,Base:n,Numerical:h,Key:$})),"function"==typeof define&&define.amd?define("paper",i):"object"==typeof e&&e&&(e.exports=i),i}},{}],2:[function(t,e,n){"use strict";function i(t,e,n,i){var o=this;o.stopped=!1,o.startTime=(new Date).getTime(),o.settings=r(n),o.item=t,o.tweens=[],o.ticker=null,o._continue=i,"undefined"==typeof t.data._animatePaperAnims&&(o.item.data._animatePaperAnims=[]),o._dataIndex=o.item.data._animatePaperAnims.length,o.item.data._animatePaperAnims[o._dataIndex]=o;for(var h in e)e.hasOwnProperty(h)&&o.tweens.push(new s(h,e[h],o));"onFrame"===o.settings.mode&&(o.ticker=a.add(o.item,"_animate"+o.startTime,function(){o.tick()}))}function r(t){var e={duration:400,easing:"linear",complete:void 0,step:void 0,mode:"onFrame"};return"undefined"==typeof t&&(t={}),"undefined"==typeof t.duration?t.duration=e.duration:(t.duration=Number(t.duration),t.duration<1&&(t.duration=e.duration)),"undefined"==typeof t.easing&&(t.easing=e.easing),"undefined"!=typeof o[t.easing]&&o.hasOwnProperty(t.easing)?t.easingFunction=o[t.easing]:(t.easing=e.easing,t.easingFunction=o[e.easing]),"function"!=typeof t.complete&&(t.complete=void 0),"function"!=typeof t.step&&(t.step=void 0),-1===["onFrame","timeout"].indexOf(t.mode)&&(t.mode=e.mode),t}var s=(t("paper"),t("./tween")),a=t("./frameManager"),o=t("./easing");i.prototype.tick=function(){var t=this;if(t.stopped)return!1;for(var e=(new Date).getTime(),n=Math.max(0,t.startTime+t.settings.duration-e),i=n/t.settings.duration||0,r=1-i,s=0,a=t.tweens.length;a>s;s++)t.tweens[s].run(r);return"undefined"!=typeof t.settings.step&&t.settings.step.call(t.item,{percent:r,remaining:n}),t.item.project.view.draw(),"timeout"===t.settings.mode,1>r&&a?n:(t.end(),!1)},i.prototype.stop=function(t){var e=this,n=0,i=t?e.tweens.length:0;if(e.stopped)return e;for(e.stopped=!0;i>n;n++)e.tweens[n].run(1);t&&(e._continue&&(e._continue=null),e.end())},i.prototype.end=function(){var t=this;"onFrame"===t.settings.mode&&a.remove(t.item,t.ticker),"undefined"!=typeof t.settings.complete&&t.settings.complete.call(t.item),"timeout"===t.settings.mode,"function"==typeof t._continue&&t._continue.call(t.item),t.item.data._animatePaperAnims[t._dataIndex]=null,t=null},e.exports=i},{"./easing":3,"./frameManager":6,"./tween":8,paper:1}],3:[function(t,e,n){for(var i={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,n=4;t<((e=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*e-2)/22-t,2)}},r=["Quad","Cubic","Quart","Quint","Expo"],s=0,a=r.length;a>s;s++)i[r[s]]=function(t){return Math.pow(t,s+2)};r=null;for(var o in i)if(i.hasOwnProperty(o)){var h=i[o];i["easeIn"+o]=h,i["easeOut"+o]=function(t){return 1-h(1-t)},i["easeInOut"+o]=function(t){return.5>t?h(2*t)/2:1-h(-2*t+2)/2}}e.exports=i,e.exports.extendEasing=function(t){for(var e in t)t.hasOwnProperty(e)&&(i[e]=t[e])}},{}],4:[function(t,e,n){e.exports={grow:function(t,e){return animatePaper.animate(t,{properties:{segmentGrow:e.to},settings:{easing:e.easing,complete:e.complete}}),t},shake:function(t,e){for(var n=2*Math.floor(e?e.nb||2:2),i=Math.floor(e?e.movement||40:40),r=[],s=!0;n>0;n--){var a=n%2?"+":"-",o=i,h=null;1===n&&e&&"undefined"!=typeof e.complete&&(h=e.complete),(s||1===n)&&(o/=2,s=!1),r.push({properties:{position:{x:a+o}},settings:{duration:100,easing:"swing",complete:h}})}animatePaper.animate(t,r)},fadeIn:function(t,e){var n=500,i=void 0,r="swing";"undefined"!=typeof e&&("undefined"!=typeof e.duration&&(n=Number(e.duration)),"function"==typeof e.complete&&(i=e.complete),"undefined"!=typeof e.easing&&(r=e.easing)),animatePaper.animate(t,{properties:{opacity:1},settings:{duration:n,easing:r,complete:i}})},fadeOut:function(t,e){var n=500,i=void 0,r="swing";"undefined"!=typeof e&&("undefined"!=typeof e.duration&&(n=Number(e.duration)),"function"==typeof e.complete&&(i=e.complete),"undefined"!=typeof e.easing&&(r=e.easing)),animatePaper.animate(t,{properties:{opacity:0},settings:{duration:n,easing:r,complete:i}})},slideUp:function(t,e){var n=500,i=void 0,r=50,s="swing";"undefined"!=typeof e&&("undefined"!=typeof e.duration&&(n=Number(e.duration)),"function"==typeof e.complete&&(i=e.complete),"undefined"!=typeof e.easing&&(s=e.easing),"undefined"!=typeof e.distance&&(r=e.distance)),animatePaper.animate(t,{properties:{opacity:1,position:{y:"-"+r}},settings:{duration:n,easing:s,complete:i}})},slideDown:function(t,e){var n=500,i=void 0,r=50,s="swing";"undefined"!=typeof e&&("undefined"!=typeof e.duration&&(n=Number(e.duration)),"function"==typeof e.complete&&(i=e.complete),"undefined"!=typeof e.easing&&(s=e.easing),"undefined"!=typeof e.distance&&(r=e.distance)),animatePaper.animate(t,{properties:{opacity:0,position:{y:"+"+r}},settings:{duration:n,easing:s,complete:i}})},splash:function(t,e){var n=500,i=void 0,r="swing";"undefined"!=typeof e&&("undefined"!=typeof e.duration&&(n=Number(e.duration)),"function"==typeof e.complete&&(i=e.complete),"undefined"!=typeof e.easing&&(r=e.easing)),animatePaper.animate(t,{properties:{opacity:1,scale:3,rotate:360},settings:{duration:n,easing:r,complete:i}})}}},{}],5:[function(t,e,n){var i=t("./animation"),r=t("./effects"),s=t("./frameManager"),a=t("paper");n.animate=function(t,e){var n=[];e instanceof Array?n=e:n.push(e);var r=0;return new i(t,n[r].properties,n[r].settings,function s(){r++,"undefined"!=typeof n[r]&&new i(t,n[r].properties,n[r].settings,s)}),t},n.stop=function(t,e){if(t.data._animatePaperAnims)for(var n=0,i=t.data._animatePaperAnims.length;i>n;n++)t.data._animatePaperAnims[n]&&t.data._animatePaperAnims[n].stop(e);return t},n.extendEasing=t("./easing").extendEasing,n.extendPropHooks=t("./prophooks").extendPropHooks,n.frameManager=s,n.fx=r,a.Item.prototype.animate||(a.Item.prototype.animate=function(t){return n.animate(this,t)}),a.Item.prototype.stop||(a.Item.prototype.stop=function(t){return n.stop(this,t)}),e.exports=n},{"./animation":2,"./easing":3,"./effects":4,"./frameManager":6,"./prophooks":7,paper:1}],6:[function(t,e,n){function i(t){var e=this;if("undefined"!=typeof e.data._customHandlers&&e.data._customHandlersCount>0)for(var n in e.data._customHandlers)e.data._customHandlers.hasOwnProperty(n)&&"function"==typeof e.data._customHandlers[n]&&e.data._customHandlers[n].call(e,t)}e.exports={add:function(t,e,n){return"undefined"==typeof t.data._customHandlers&&(t.data._customHandlers={},t.data._customHandlersCount=0),t.data._customHandlers[e]=n,t.data._customHandlersCount+=1,t.data._customHandlersCount>0&&(t.onFrame=i),e},remove:function(t,e){"undefined"!=typeof t.data._customHandlers&&(t.data._customHandlers[e]=null,t.data._customHandlersCount-=1,t.data._customHandlersCount<=0&&(t.data._customHandlersCount=0))}}},{}],7:[function(require,module,exports){function _pointDiff(a,b,operator){if(-1!==["+","-"].indexOf(operator)&&"undefined"!=typeof a&&"undefined"!=typeof b){var ax,bx,ay,by;ax=a.x||0,bx=b.x||0,ay=a.y||0,by=b.y||0;var output=new paper.Point(eval(ax+operator+bx),eval(ay+operator+by));return output}}for(var dirRegexp=/^([+\-])(.+)/,_tweenPropHooks={_default:{get:function(t){var e;return null!=t.item[t.prop]&&(e=t.item[t.prop]),e},set:function(t){var e={};e[t.prop]=t.now,t.item.set(e)}},scale:{get:function(t){t.item.data._animatePaperVals||(t.item.data._animatePaperVals={}),"undefined"==typeof t.item.data._animatePaperVals.scale&&(t.item.data._animatePaperVals.scale=1);var e=t.item.data._animatePaperVals.scale;return e},set:function(t){var e=t.item.data._animatePaperVals.scale,n=t.now/e;t.item.data._animatePaperVals.scale=t.now,t.item.scale(n)}},rotate:{get:function(t){t.item.data._animatePaperVals||(t.item.data._animatePaperVals={}),"undefined"==typeof t.item.data._animatePaperVals.rotate&&(t.item.data._animatePaperVals.rotate=-0);var e=t.item.data._animatePaperVals.rotate;return e},set:function(t){var e=t.item.data._animatePaperVals.rotate,n=t.now-e;t.item.data._animatePaperVals.rotate=t.now,t.item.rotate(n)}},translate:{get:function(t){t.item.data._animatePaperVals||(t.item.data._animatePaperVals={}),"undefined"==typeof t.item.data._animatePaperVals.translate&&(t.item.data._animatePaperVals.translate=new paper.Point(0,0));var e=t.item.data._animatePaperVals.translate;return e},set:function(t){var e=t.item.data._animatePaperVals.translate,n=_pointDiff(t.now,e,"-");t.item.data._animatePaperVals.translate=t.now,t.item.translate(n)},ease:function(t,e){var n=_pointDiff(t.end,t.start,"-");return n.x=n.x*e,n.y=n.y*e,t.now=_pointDiff(n,t.start,"+"),t.now}},segmentGrow:{get:function(t){if(!(t.item instanceof paper.Path))throw new Error("Only a Path object can be used with : segmentGrow");var e=t.item.lastSegment.point;return e},set:function(t){t.item.add(t.now)},ease:function(t,e){var n=_pointDiff(t.end,t.start,"-");return n.x=n.x*e,n.y=n.y*e,t.now=_pointDiff(n,t.start,"+"),t.now}},position:{get:function(t){return{x:t.item.position.x,y:t.item.position.y}},set:function(t){t.item.position.x+=t.now.x,t.item.position.y+=t.now.y},ease:function(t,e){var n="",i="",r=null,s=null;"undefined"==typeof t._easePositionCache&&(t._easePositionCache={x:0,y:0});var a=Number(t.end.x||0),o=Number(t.end.y||0);if(t.end.x)var r=(""+t.end.x).match(dirRegexp);if(t.end.y)var s=(""+t.end.y).match(dirRegexp);r&&(n=r[1],a=Number(r[2])),s&&(i=s[1],o=Number(s[2]));var h=function(t){return(t||0)*e};return"undefined"!=typeof t.end.x?"+"===n?(t.now.x=h(a)-t._easePositionCache.x,t._easePositionCache.x+=t.now.x):"-"===n?(t.now.x=h(a)-t._easePositionCache.x,t._easePositionCache.x+=t.now.x,t.now.x=-t.now.x):(t.now.x=(o-t.start.x)*e-t._easePositionCache.x,t._easePositionCache.x+=t.now.x):t.now.x=0,"undefined"!=typeof t.end.y?"+"===i?(t.now.y=h(o)-t._easePositionCache.y,t._easePositionCache.y+=t.now.y):"-"===i?(t.now.y=h(o)-t._easePositionCache.y,t._easePositionCache.y+=t.now.y,t.now.y=-t.now.y):(t.now.y=(o-t.start.y)*e-t._easePositionCache.y,t._easePositionCache.y+=t.now.y):t.now.y=0,t.now}},Color:{get:function(t){return{hue:t.item[t.prop].hue,brightness:t.item[t.prop].brightness,saturation:t.item[t.prop].saturation}},set:function(t){t.item[t.prop].hue+=t.now.hue,t.item[t.prop].brightness+=t.now.brightness,t.item[t.prop].saturation+=t.now.saturation},ease:function(t,e){for(var n=["hue","brightness","saturation"],i=function(t){return(t||0)*e},r=0,s=n.length;s>r;r++){var a=n[r],o="",h="";"undefined"==typeof t._easeColorCache&&(t._easeColorCache={}),"undefined"==typeof t._easeColorCache[a]&&(t._easeColorCache[a]=0);var u=Number(t.end[a]||0);if(t.end[a])var h=(""+t.end[a]).match(dirRegexp);h&&(o=h[1],u=Number(h[2])),"undefined"!=typeof t.end[a]?"+"===o?(t.now[a]=i(u)-t._easeColorCache[a],t._easeColorCache[a]+=t.now[a]):"-"===o?(t.now[a]=i(u)-t._easeColorCache[a],t._easeColorCache[a]+=t.now[a],t.now[a]=-t.now[a]):(t.now[a]=(u-t.start[a])*e-t._easeColorCache[a],t._easeColorCache[a]+=t.now[a]):t.now[a]=0}return t.now}}},_colorProperties=["fill","stroke"],i=0,l=_colorProperties.length;l>i;i++)_tweenPropHooks[_colorProperties[i]+"Color"]=_tweenPropHooks.Color;module.exports={_tweenPropHooks:_tweenPropHooks,_pointDiff:_pointDiff,extendPropHooks:function(t){for(var e in t)t.hasOwnProperty(e)&&(_tweenPropHooks[e]=t[e])}}},{}],8:[function(t,e,n){function i(t,e,n){var i=this;i.A=n,i.item=n.item,i.prop=t,i.end=e,i.start=i.cur(),i.now=i.cur(),i.direction=i.end>i.start?"+":"-"}var r=t("./prophooks")._tweenPropHooks,s=t("./easing");i.prototype.cur=function(){
var t=this,e=r[t.prop];return e&&e.get?e.get(t):r._default.get(t)},i.prototype.run=function(t){var e,n=this,i=r[n.prop],a=n.A.settings;return a.duration?n.pos=e=s[a.easing](t,a.duration*t,0,1,n.duration):n.pos=e=t,i&&i.ease?i.ease(n,e):n.now=(n.end-n.start)*e+n.start,i&&i.set?i.set(n):r._default.set(n),n},e.exports=i},{"./easing":3,"./prophooks":7}]},{},[5]);
//# sourceMappingURL=data:application/json;base64,
